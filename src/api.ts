/**
 * xservices API
 * api接口
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import localVarRequest = require('request')
import http = require('http')
import Promise = require('bluebird')

let defaultBasePath = 'http://39.108.78.208:5111'

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

/* tslint:disable:no-unused-variable */
let primitives = [
    "string",
    "boolean",
    "double",
    "integer",
    "long",
    "float",
    "number",
    "any"
]

class ObjectSerializer {

    public static findCorrectType(data: any, expectedType: string) {
        if (data == undefined) {
            return expectedType
        } else if (primitives.indexOf(expectedType.toLowerCase()) !== -1) {
            return expectedType
        } else if (expectedType === "Date") {
            return expectedType
        } else {
            if (enumsMap[expectedType]) {
                return expectedType
            }

            if (!typeMap[expectedType]) {
                return expectedType // w/e we don't know the type
            }

            // Check the discriminator
            let discriminatorProperty = typeMap[expectedType].discriminator
            if (discriminatorProperty == null) {
                return expectedType // the type does not have a discriminator. use it.
            } else {
                if (data[discriminatorProperty]) {
                    return data[discriminatorProperty] // use the type given in the discriminator
                } else {
                    return expectedType // discriminator was not present (or an empty string)
                }
            }
        }
    }

    public static serialize(data: any, type: string) {
        if (data == undefined) {
            return data
        } else if (primitives.indexOf(type.toLowerCase()) !== -1) {
            return data
        } else if (type.lastIndexOf("Array<", 0) === 0) { // string.startsWith pre es6
            let subType: string = type.replace("Array<", "") // Array<Type> => Type>
            subType = subType.substring(0, subType.length - 1) // Type> => Type
            let transformedData: any[] = []
            for (let index in data) {
                let date = data[index]
                transformedData.push(ObjectSerializer.serialize(date, subType))
            }
            return transformedData
        } else if (type === "Date") {
            return data.toString()
        } else {
            if (enumsMap[type]) {
                return data
            }
            if (!typeMap[type]) { // in case we dont know the type
                return data
            }

            // get the map for the correct type.
            let attributeTypes = typeMap[type].getAttributeTypeMap()
            let instance: { [index: string]: any } = {}
            for (let index in attributeTypes) {
                let attributeType = attributeTypes[index]
                instance[attributeType.baseName] = ObjectSerializer.serialize(data[attributeType.name], attributeType.type)
            }
            return instance
        }
    }

    public static deserialize(data: any, type: string) {
        // polymorphism may change the actual type.
        type = ObjectSerializer.findCorrectType(data, type)
        if (data == undefined) {
            return data
        } else if (primitives.indexOf(type.toLowerCase()) !== -1) {
            return data
        } else if (type.lastIndexOf("Array<", 0) === 0) { // string.startsWith pre es6
            let subType: string = type.replace("Array<", "") // Array<Type> => Type>
            subType = subType.substring(0, subType.length - 1) // Type> => Type
            let transformedData: any[] = []
            for (let index in data) {
                let date = data[index]
                transformedData.push(ObjectSerializer.deserialize(date, subType))
            }
            return transformedData
        } else if (type === "Date") {
            return new Date(data)
        } else {
            if (enumsMap[type]) {// is Enum
                return data
            }

            if (!typeMap[type]) { // dont know the type
                return data
            }
            let instance = new typeMap[type]()
            let attributeTypes = typeMap[type].getAttributeTypeMap()
            for (let index in attributeTypes) {
                let attributeType = attributeTypes[index]
                instance[attributeType.name] = ObjectSerializer.deserialize(data[attributeType.baseName], attributeType.type)
            }
            return instance
        }
    }
}

export class ActionCreate {
    /**
    * 服务id
    */
    'serviceID': number
    /**
    * 运营号平台Uid
    */
    'profilePlatformUid': string
    /**
    * 联系人平台Uid
    */
    'contactPlatformUid': string
    /**
    * 操作类型
    */
    'type': string
    /**
    * 操作时间
    */
    'actionTime': number
    /**
    * 内容
    */
    'content': string
    /**
    * 扩展字段
    */
    'extra': string

    static discriminator = undefined

    static attributeTypeMap: Array<{ name: string, baseName: string, type: string }> = [
        {
            "name": "serviceID",
            "baseName": "serviceID",
            "type": "number"
        },
        {
            "name": "profilePlatformUid",
            "baseName": "profilePlatformUid",
            "type": "string"
        },
        {
            "name": "contactPlatformUid",
            "baseName": "contactPlatformUid",
            "type": "string"
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "string"
        },
        {
            "name": "actionTime",
            "baseName": "actionTime",
            "type": "number"
        },
        {
            "name": "content",
            "baseName": "content",
            "type": "string"
        },
        {
            "name": "extra",
            "baseName": "extra",
            "type": "string"
        }]

    static getAttributeTypeMap() {
        return ActionCreate.attributeTypeMap
    }
}

export class AddressCreate {
    /**
    * 服务id
    */
    'serviceID': number
    /**
    * 平台uid
    */
    'platformUid': string
    /**
    * 平台自定义id
    */
    'customID': string
    /**
    * 收货人姓名
    */
    'name': string
    /**
    * 收货人联系方式
    */
    'mobilephone': string
    /**
    * 国家
    */
    'country': string
    /**
    * 省份
    */
    'state': string
    /**
    * 城市
    */
    'city': string
    /**
    * 区
    */
    'district': string
    /**
    * 详细地址
    */
    'addr': string
    /**
    * 扩展字段
    */
    'extra': string
    /**
    * 标签
    */
    'tags': string
    /**
    * 备注说明
    */
    'desc': string

    static discriminator = undefined

    static attributeTypeMap: Array<{ name: string, baseName: string, type: string }> = [
        {
            "name": "serviceID",
            "baseName": "serviceID",
            "type": "number"
        },
        {
            "name": "platformUid",
            "baseName": "platformUid",
            "type": "string"
        },
        {
            "name": "customID",
            "baseName": "customID",
            "type": "string"
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "mobilephone",
            "baseName": "mobilephone",
            "type": "string"
        },
        {
            "name": "country",
            "baseName": "country",
            "type": "string"
        },
        {
            "name": "state",
            "baseName": "state",
            "type": "string"
        },
        {
            "name": "city",
            "baseName": "city",
            "type": "string"
        },
        {
            "name": "district",
            "baseName": "district",
            "type": "string"
        },
        {
            "name": "addr",
            "baseName": "addr",
            "type": "string"
        },
        {
            "name": "extra",
            "baseName": "extra",
            "type": "string"
        },
        {
            "name": "tags",
            "baseName": "tags",
            "type": "string"
        },
        {
            "name": "desc",
            "baseName": "desc",
            "type": "string"
        }]

    static getAttributeTypeMap() {
        return AddressCreate.attributeTypeMap
    }
}

export class ContactCreate {
    /**
    * 平台uid
    */
    'platformUid': string
    /**
    * 平台自定义id
    */
    'customID': string
    /**
    * 昵称
    */
    'nickname': string
    /**
    * 头像
    */
    'avatar': string
    /**
    * 性别
    */
    'gender': number
    /**
    * 国家
    */
    'country': string
    /**
    * 省份
    */
    'state': string
    /**
    * 城市
    */
    'city': string
    /**
    * 签名
    */
    'signature': string
    /**
    * 类型
    */
    'type': number
    /**
    * 服务id
    */
    'serviceID': number
    /**
    * 扩展字段
    */
    'extra': string
    /**
    * 标签
    */
    'tags': string

    static discriminator = undefined

    static attributeTypeMap: Array<{ name: string, baseName: string, type: string }> = [
        {
            "name": "platformUid",
            "baseName": "platformUid",
            "type": "string"
        },
        {
            "name": "customID",
            "baseName": "customID",
            "type": "string"
        },
        {
            "name": "nickname",
            "baseName": "nickname",
            "type": "string"
        },
        {
            "name": "avatar",
            "baseName": "avatar",
            "type": "string"
        },
        {
            "name": "gender",
            "baseName": "gender",
            "type": "number"
        },
        {
            "name": "country",
            "baseName": "country",
            "type": "string"
        },
        {
            "name": "state",
            "baseName": "state",
            "type": "string"
        },
        {
            "name": "city",
            "baseName": "city",
            "type": "string"
        },
        {
            "name": "signature",
            "baseName": "signature",
            "type": "string"
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "number"
        },
        {
            "name": "serviceID",
            "baseName": "serviceID",
            "type": "number"
        },
        {
            "name": "extra",
            "baseName": "extra",
            "type": "string"
        },
        {
            "name": "tags",
            "baseName": "tags",
            "type": "string"
        }]

    static getAttributeTypeMap() {
        return ContactCreate.attributeTypeMap
    }
}

export class ControlCreate {
    /**
    * 控制配置的内容
    */
    'value': string
    /**
    * 配置类型
    */
    'type': string
    /**
    * 服务ID
    */
    'serviceID': number

    static discriminator = undefined

    static attributeTypeMap: Array<{ name: string, baseName: string, type: string }> = [
        {
            "name": "value",
            "baseName": "value",
            "type": "string"
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "string"
        },
        {
            "name": "serviceID",
            "baseName": "serviceID",
            "type": "number"
        }]

    static getAttributeTypeMap() {
        return ControlCreate.attributeTypeMap
    }
}

export class DupContact {
    /**
    * 计数
    */
    'count': number
    'contact': PBIMContactDto

    static discriminator = undefined

    static attributeTypeMap: Array<{ name: string, baseName: string, type: string }> = [
        {
            "name": "count",
            "baseName": "count",
            "type": "number"
        },
        {
            "name": "contact",
            "baseName": "contact",
            "type": "PBIMContactDto"
        }]

    static getAttributeTypeMap() {
        return DupContact.attributeTypeMap
    }
}

export class DupProfile {
    /**
    * 计数
    */
    'count': number
    'profile': PBIMProfileDto

    static discriminator = undefined

    static attributeTypeMap: Array<{ name: string, baseName: string, type: string }> = [
        {
            "name": "count",
            "baseName": "count",
            "type": "number"
        },
        {
            "name": "profile",
            "baseName": "profile",
            "type": "PBIMProfileDto"
        }]

    static getAttributeTypeMap() {
        return DupProfile.attributeTypeMap
    }
}

export class Filter {
    /**
    * 字段名
    */
    'key': string
    /**
    * 值
    */
    'value': string
    /**
    * 搜索类型
    */
    'filterType': string

    static discriminator = undefined

    static attributeTypeMap: Array<{ name: string, baseName: string, type: string }> = [
        {
            "name": "key",
            "baseName": "key",
            "type": "string"
        },
        {
            "name": "value",
            "baseName": "value",
            "type": "string"
        },
        {
            "name": "filterType",
            "baseName": "filterType",
            "type": "string"
        }]

    static getAttributeTypeMap() {
        return Filter.attributeTypeMap
    }
}

export class FundCreate {
    /**
    * 运营号平台Uid
    */
    'profilePlatformUid': string
    /**
    * 运营号平台自定义ID
    */
    'profileCustomID': string
    /**
    * 平台Uid
    */
    'platformUid': string
    /**
    * 平台自定义ID
    */
    'customID': string
    /**
    * 平台群ID
    */
    'platformGid': string
    /**
    * 平台账单ID
    */
    'platformFundID': string
    /**
    * 转账类型
    */
    'type': number
    /**
    * 转账金额
    */
    'amount': number
    /**
    * 转账方向
    */
    'direction': number
    /**
    * 交易发起时间, e.g 发送者 转账发起时间
    */
    'sendTime': number
    /**
    * 交易确认时间, e.g 接收者 转账确认时间
    */
    'receiveTime': number
    /**
    * 快照
    */
    'snapshot': string
    /**
    * 服务id
    */
    'serviceID': number
    /**
    * 扩展字段
    */
    'extra': string
    /**
    * 标签
    */
    'tags': string

    static discriminator = undefined

    static attributeTypeMap: Array<{ name: string, baseName: string, type: string }> = [
        {
            "name": "profilePlatformUid",
            "baseName": "profilePlatformUid",
            "type": "string"
        },
        {
            "name": "profileCustomID",
            "baseName": "profileCustomID",
            "type": "string"
        },
        {
            "name": "platformUid",
            "baseName": "platformUid",
            "type": "string"
        },
        {
            "name": "customID",
            "baseName": "customID",
            "type": "string"
        },
        {
            "name": "platformGid",
            "baseName": "platformGid",
            "type": "string"
        },
        {
            "name": "platformFundID",
            "baseName": "platformFundID",
            "type": "string"
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "number"
        },
        {
            "name": "amount",
            "baseName": "amount",
            "type": "number"
        },
        {
            "name": "direction",
            "baseName": "direction",
            "type": "number"
        },
        {
            "name": "sendTime",
            "baseName": "sendTime",
            "type": "number"
        },
        {
            "name": "receiveTime",
            "baseName": "receiveTime",
            "type": "number"
        },
        {
            "name": "snapshot",
            "baseName": "snapshot",
            "type": "string"
        },
        {
            "name": "serviceID",
            "baseName": "serviceID",
            "type": "number"
        },
        {
            "name": "extra",
            "baseName": "extra",
            "type": "string"
        },
        {
            "name": "tags",
            "baseName": "tags",
            "type": "string"
        }]

    static getAttributeTypeMap() {
        return FundCreate.attributeTypeMap
    }
}

export class GroupCreate {
    /**
    * 群主平台ID
    */
    'ownerPlatformUid': string
    /**
    * 群主自定义ID
    */
    'ownerCustomID': string
    /**
    * 运营号平台Uid
    */
    'profilePlatformUid': string
    /**
    * 运营号平台自定义ID
    */
    'profileCustomID': string
    /**
    * 群ID
    */
    'platformGid': string
    /**
    * 群名称
    */
    'name': string
    /**
    * 群头像
    */
    'avatar': string
    /**
    * 群公告
    */
    'signature': string
    /**
    * 群二维码
    */
    'qrcode': string
    /**
    * 二维码生成时间
    */
    'qrcodeGenerateTime': number
    /**
    * 群成员数量
    */
    'memberCount': number
    /**
    * 服务id
    */
    'serviceID': number
    /**
    * 扩展字段
    */
    'extra': string
    /**
    * 标签
    */
    'tags': string

    static discriminator = undefined

    static attributeTypeMap: Array<{ name: string, baseName: string, type: string }> = [
        {
            "name": "ownerPlatformUid",
            "baseName": "ownerPlatformUid",
            "type": "string"
        },
        {
            "name": "ownerCustomID",
            "baseName": "ownerCustomID",
            "type": "string"
        },
        {
            "name": "profilePlatformUid",
            "baseName": "profilePlatformUid",
            "type": "string"
        },
        {
            "name": "profileCustomID",
            "baseName": "profileCustomID",
            "type": "string"
        },
        {
            "name": "platformGid",
            "baseName": "platformGid",
            "type": "string"
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "avatar",
            "baseName": "avatar",
            "type": "string"
        },
        {
            "name": "signature",
            "baseName": "signature",
            "type": "string"
        },
        {
            "name": "qrcode",
            "baseName": "qrcode",
            "type": "string"
        },
        {
            "name": "qrcodeGenerateTime",
            "baseName": "qrcodeGenerateTime",
            "type": "number"
        },
        {
            "name": "memberCount",
            "baseName": "memberCount",
            "type": "number"
        },
        {
            "name": "serviceID",
            "baseName": "serviceID",
            "type": "number"
        },
        {
            "name": "extra",
            "baseName": "extra",
            "type": "string"
        },
        {
            "name": "tags",
            "baseName": "tags",
            "type": "string"
        }]

    static getAttributeTypeMap() {
        return GroupCreate.attributeTypeMap
    }
}

export class GroupMemberCreate {
    /**
    * 平台uid
    */
    'platformUid': string
    /**
    * 平台自定义ID
    */
    'customID': string
    /**
    * 平台群ID
    */
    'platformGid': string
    /**
    * 成员别名
    */
    'alias': string
    /**
    * 成员来源
    */
    'soure': string
    /**
    * 服务id
    */
    'serviceID': number
    /**
    * 信息是否完整记录
    */
    'loaded': number
    /**
    * 扩展字段
    */
    'extra': string
    /**
    * 标签
    */
    'tags': string

    static discriminator = undefined

    static attributeTypeMap: Array<{ name: string, baseName: string, type: string }> = [
        {
            "name": "platformUid",
            "baseName": "platformUid",
            "type": "string"
        },
        {
            "name": "customID",
            "baseName": "customID",
            "type": "string"
        },
        {
            "name": "platformGid",
            "baseName": "platformGid",
            "type": "string"
        },
        {
            "name": "alias",
            "baseName": "alias",
            "type": "string"
        },
        {
            "name": "soure",
            "baseName": "soure",
            "type": "string"
        },
        {
            "name": "serviceID",
            "baseName": "serviceID",
            "type": "number"
        },
        {
            "name": "loaded",
            "baseName": "loaded",
            "type": "number"
        },
        {
            "name": "extra",
            "baseName": "extra",
            "type": "string"
        },
        {
            "name": "tags",
            "baseName": "tags",
            "type": "string"
        }]

    static getAttributeTypeMap() {
        return GroupMemberCreate.attributeTypeMap
    }
}

export class InlineResponse200 {
    'code': number
    'msg': string
    'data': string

    static discriminator = undefined

    static attributeTypeMap: Array<{ name: string, baseName: string, type: string }> = [
        {
            "name": "code",
            "baseName": "code",
            "type": "number"
        },
        {
            "name": "msg",
            "baseName": "msg",
            "type": "string"
        },
        {
            "name": "data",
            "baseName": "data",
            "type": "string"
        }]

    static getAttributeTypeMap() {
        return InlineResponse200.attributeTypeMap
    }
}

export class InlineResponse2001 {
    'code': number
    'msg': string
    'data': InlineResponse2001Data

    static discriminator = undefined

    static attributeTypeMap: Array<{ name: string, baseName: string, type: string }> = [
        {
            "name": "code",
            "baseName": "code",
            "type": "number"
        },
        {
            "name": "msg",
            "baseName": "msg",
            "type": "string"
        },
        {
            "name": "data",
            "baseName": "data",
            "type": "InlineResponse2001Data"
        }]

    static getAttributeTypeMap() {
        return InlineResponse2001.attributeTypeMap
    }
}

export class InlineResponse20010 {
    'code': number
    'msg': string
    'data': InlineResponse20010Data

    static discriminator = undefined

    static attributeTypeMap: Array<{ name: string, baseName: string, type: string }> = [
        {
            "name": "code",
            "baseName": "code",
            "type": "number"
        },
        {
            "name": "msg",
            "baseName": "msg",
            "type": "string"
        },
        {
            "name": "data",
            "baseName": "data",
            "type": "InlineResponse20010Data"
        }]

    static getAttributeTypeMap() {
        return InlineResponse20010.attributeTypeMap
    }
}

export class InlineResponse20010Data {
    'total': number
    'content': Array<DupContact>

    static discriminator = undefined

    static attributeTypeMap: Array<{ name: string, baseName: string, type: string }> = [
        {
            "name": "total",
            "baseName": "total",
            "type": "number"
        },
        {
            "name": "content",
            "baseName": "content",
            "type": "Array<DupContact>"
        }]

    static getAttributeTypeMap() {
        return InlineResponse20010Data.attributeTypeMap
    }
}

export class InlineResponse20011 {
    'code': number
    'msg': string
    'data': InlineResponse20011Data

    static discriminator = undefined

    static attributeTypeMap: Array<{ name: string, baseName: string, type: string }> = [
        {
            "name": "code",
            "baseName": "code",
            "type": "number"
        },
        {
            "name": "msg",
            "baseName": "msg",
            "type": "string"
        },
        {
            "name": "data",
            "baseName": "data",
            "type": "InlineResponse20011Data"
        }]

    static getAttributeTypeMap() {
        return InlineResponse20011.attributeTypeMap
    }
}

export class InlineResponse20011Data {
    'total': number
    'content': Array<PBIMContactDto>

    static discriminator = undefined

    static attributeTypeMap: Array<{ name: string, baseName: string, type: string }> = [
        {
            "name": "total",
            "baseName": "total",
            "type": "number"
        },
        {
            "name": "content",
            "baseName": "content",
            "type": "Array<PBIMContactDto>"
        }]

    static getAttributeTypeMap() {
        return InlineResponse20011Data.attributeTypeMap
    }
}

export class InlineResponse20012 {
    'code': number
    'msg': string
    'data': PBIMGroupDto

    static discriminator = undefined

    static attributeTypeMap: Array<{ name: string, baseName: string, type: string }> = [
        {
            "name": "code",
            "baseName": "code",
            "type": "number"
        },
        {
            "name": "msg",
            "baseName": "msg",
            "type": "string"
        },
        {
            "name": "data",
            "baseName": "data",
            "type": "PBIMGroupDto"
        }]

    static getAttributeTypeMap() {
        return InlineResponse20012.attributeTypeMap
    }
}

export class InlineResponse20013 {
    'code': number
    'msg': string
    'data': Array<PBIMGroupDto>

    static discriminator = undefined

    static attributeTypeMap: Array<{ name: string, baseName: string, type: string }> = [
        {
            "name": "code",
            "baseName": "code",
            "type": "number"
        },
        {
            "name": "msg",
            "baseName": "msg",
            "type": "string"
        },
        {
            "name": "data",
            "baseName": "data",
            "type": "Array<PBIMGroupDto>"
        }]

    static getAttributeTypeMap() {
        return InlineResponse20013.attributeTypeMap
    }
}

export class InlineResponse20014 {
    'code': number
    'msg': string
    'data': InlineResponse20014Data

    static discriminator = undefined

    static attributeTypeMap: Array<{ name: string, baseName: string, type: string }> = [
        {
            "name": "code",
            "baseName": "code",
            "type": "number"
        },
        {
            "name": "msg",
            "baseName": "msg",
            "type": "string"
        },
        {
            "name": "data",
            "baseName": "data",
            "type": "InlineResponse20014Data"
        }]

    static getAttributeTypeMap() {
        return InlineResponse20014.attributeTypeMap
    }
}

export class InlineResponse20014Data {
    'total': number
    'content': Array<PBIMGroupDto>

    static discriminator = undefined

    static attributeTypeMap: Array<{ name: string, baseName: string, type: string }> = [
        {
            "name": "total",
            "baseName": "total",
            "type": "number"
        },
        {
            "name": "content",
            "baseName": "content",
            "type": "Array<PBIMGroupDto>"
        }]

    static getAttributeTypeMap() {
        return InlineResponse20014Data.attributeTypeMap
    }
}

export class InlineResponse20015 {
    'code': number
    'msg': string
    'data': InlineResponse20015Data

    static discriminator = undefined

    static attributeTypeMap: Array<{ name: string, baseName: string, type: string }> = [
        {
            "name": "code",
            "baseName": "code",
            "type": "number"
        },
        {
            "name": "msg",
            "baseName": "msg",
            "type": "string"
        },
        {
            "name": "data",
            "baseName": "data",
            "type": "InlineResponse20015Data"
        }]

    static getAttributeTypeMap() {
        return InlineResponse20015.attributeTypeMap
    }
}

export class InlineResponse20015Data {
    'hasMore': boolean
    'content': Array<PBIMGroupDto>

    static discriminator = undefined

    static attributeTypeMap: Array<{ name: string, baseName: string, type: string }> = [
        {
            "name": "hasMore",
            "baseName": "hasMore",
            "type": "boolean"
        },
        {
            "name": "content",
            "baseName": "content",
            "type": "Array<PBIMGroupDto>"
        }]

    static getAttributeTypeMap() {
        return InlineResponse20015Data.attributeTypeMap
    }
}

export class InlineResponse20016 {
    'code': number
    'msg': string
    'data': InlineResponse20016Data

    static discriminator = undefined

    static attributeTypeMap: Array<{ name: string, baseName: string, type: string }> = [
        {
            "name": "code",
            "baseName": "code",
            "type": "number"
        },
        {
            "name": "msg",
            "baseName": "msg",
            "type": "string"
        },
        {
            "name": "data",
            "baseName": "data",
            "type": "InlineResponse20016Data"
        }]

    static getAttributeTypeMap() {
        return InlineResponse20016.attributeTypeMap
    }
}

export class InlineResponse20016Data {
    'total': number
    'content': Array<PBIMGroupMemberDto>

    static discriminator = undefined

    static attributeTypeMap: Array<{ name: string, baseName: string, type: string }> = [
        {
            "name": "total",
            "baseName": "total",
            "type": "number"
        },
        {
            "name": "content",
            "baseName": "content",
            "type": "Array<PBIMGroupMemberDto>"
        }]

    static getAttributeTypeMap() {
        return InlineResponse20016Data.attributeTypeMap
    }
}

export class InlineResponse20017 {
    'code': number
    'msg': string
    'data': PBIMGroupMemberDto

    static discriminator = undefined

    static attributeTypeMap: Array<{ name: string, baseName: string, type: string }> = [
        {
            "name": "code",
            "baseName": "code",
            "type": "number"
        },
        {
            "name": "msg",
            "baseName": "msg",
            "type": "string"
        },
        {
            "name": "data",
            "baseName": "data",
            "type": "PBIMGroupMemberDto"
        }]

    static getAttributeTypeMap() {
        return InlineResponse20017.attributeTypeMap
    }
}

export class InlineResponse20018 {
    'code': number
    'msg': string
    'data': InlineResponse20018Data

    static discriminator = undefined

    static attributeTypeMap: Array<{ name: string, baseName: string, type: string }> = [
        {
            "name": "code",
            "baseName": "code",
            "type": "number"
        },
        {
            "name": "msg",
            "baseName": "msg",
            "type": "string"
        },
        {
            "name": "data",
            "baseName": "data",
            "type": "InlineResponse20018Data"
        }]

    static getAttributeTypeMap() {
        return InlineResponse20018.attributeTypeMap
    }
}

export class InlineResponse20018Data {
    'hasMore': boolean
    'content': Array<PBIMGroupMemberDto>

    static discriminator = undefined

    static attributeTypeMap: Array<{ name: string, baseName: string, type: string }> = [
        {
            "name": "hasMore",
            "baseName": "hasMore",
            "type": "boolean"
        },
        {
            "name": "content",
            "baseName": "content",
            "type": "Array<PBIMGroupMemberDto>"
        }]

    static getAttributeTypeMap() {
        return InlineResponse20018Data.attributeTypeMap
    }
}

export class InlineResponse20019 {
    'code': number
    'msg': string
    'data': PBIMMessageDto

    static discriminator = undefined

    static attributeTypeMap: Array<{ name: string, baseName: string, type: string }> = [
        {
            "name": "code",
            "baseName": "code",
            "type": "number"
        },
        {
            "name": "msg",
            "baseName": "msg",
            "type": "string"
        },
        {
            "name": "data",
            "baseName": "data",
            "type": "PBIMMessageDto"
        }]

    static getAttributeTypeMap() {
        return InlineResponse20019.attributeTypeMap
    }
}

export class InlineResponse2001Data {
    'result': number
    'desc': string

    static discriminator = undefined

    static attributeTypeMap: Array<{ name: string, baseName: string, type: string }> = [
        {
            "name": "result",
            "baseName": "result",
            "type": "number"
        },
        {
            "name": "desc",
            "baseName": "desc",
            "type": "string"
        }]

    static getAttributeTypeMap() {
        return InlineResponse2001Data.attributeTypeMap
    }
}

export class InlineResponse2002 {
    'code': number
    'msg': string

    static discriminator = undefined

    static attributeTypeMap: Array<{ name: string, baseName: string, type: string }> = [
        {
            "name": "code",
            "baseName": "code",
            "type": "number"
        },
        {
            "name": "msg",
            "baseName": "msg",
            "type": "string"
        }]

    static getAttributeTypeMap() {
        return InlineResponse2002.attributeTypeMap
    }
}

export class InlineResponse20020 {
    'code': number
    'msg': string
    'data': InlineResponse20020Data

    static discriminator = undefined

    static attributeTypeMap: Array<{ name: string, baseName: string, type: string }> = [
        {
            "name": "code",
            "baseName": "code",
            "type": "number"
        },
        {
            "name": "msg",
            "baseName": "msg",
            "type": "string"
        },
        {
            "name": "data",
            "baseName": "data",
            "type": "InlineResponse20020Data"
        }]

    static getAttributeTypeMap() {
        return InlineResponse20020.attributeTypeMap
    }
}

export class InlineResponse20020Data {
    'hasMore': boolean
    'content': Array<PBIMMessageDto>

    static discriminator = undefined

    static attributeTypeMap: Array<{ name: string, baseName: string, type: string }> = [
        {
            "name": "hasMore",
            "baseName": "hasMore",
            "type": "boolean"
        },
        {
            "name": "content",
            "baseName": "content",
            "type": "Array<PBIMMessageDto>"
        }]

    static getAttributeTypeMap() {
        return InlineResponse20020Data.attributeTypeMap
    }
}

export class InlineResponse20021 {
    'code': number
    'msg': string
    'data': PBIMTemplateMessageDto

    static discriminator = undefined

    static attributeTypeMap: Array<{ name: string, baseName: string, type: string }> = [
        {
            "name": "code",
            "baseName": "code",
            "type": "number"
        },
        {
            "name": "msg",
            "baseName": "msg",
            "type": "string"
        },
        {
            "name": "data",
            "baseName": "data",
            "type": "PBIMTemplateMessageDto"
        }]

    static getAttributeTypeMap() {
        return InlineResponse20021.attributeTypeMap
    }
}

export class InlineResponse20022 {
    'code': number
    'msg': string
    'data': InlineResponse20022Data

    static discriminator = undefined

    static attributeTypeMap: Array<{ name: string, baseName: string, type: string }> = [
        {
            "name": "code",
            "baseName": "code",
            "type": "number"
        },
        {
            "name": "msg",
            "baseName": "msg",
            "type": "string"
        },
        {
            "name": "data",
            "baseName": "data",
            "type": "InlineResponse20022Data"
        }]

    static getAttributeTypeMap() {
        return InlineResponse20022.attributeTypeMap
    }
}

export class InlineResponse20022Data {
    'hasMore': boolean
    'content': Array<PBIMTemplateMessageDto>

    static discriminator = undefined

    static attributeTypeMap: Array<{ name: string, baseName: string, type: string }> = [
        {
            "name": "hasMore",
            "baseName": "hasMore",
            "type": "boolean"
        },
        {
            "name": "content",
            "baseName": "content",
            "type": "Array<PBIMTemplateMessageDto>"
        }]

    static getAttributeTypeMap() {
        return InlineResponse20022Data.attributeTypeMap
    }
}

export class InlineResponse20023 {
    'code': number
    'msg': string
    'data': PBIMProfileDto

    static discriminator = undefined

    static attributeTypeMap: Array<{ name: string, baseName: string, type: string }> = [
        {
            "name": "code",
            "baseName": "code",
            "type": "number"
        },
        {
            "name": "msg",
            "baseName": "msg",
            "type": "string"
        },
        {
            "name": "data",
            "baseName": "data",
            "type": "PBIMProfileDto"
        }]

    static getAttributeTypeMap() {
        return InlineResponse20023.attributeTypeMap
    }
}

export class InlineResponse20024 {
    'code': number
    'msg': string
    'data': Array<PBIMProfileDto>

    static discriminator = undefined

    static attributeTypeMap: Array<{ name: string, baseName: string, type: string }> = [
        {
            "name": "code",
            "baseName": "code",
            "type": "number"
        },
        {
            "name": "msg",
            "baseName": "msg",
            "type": "string"
        },
        {
            "name": "data",
            "baseName": "data",
            "type": "Array<PBIMProfileDto>"
        }]

    static getAttributeTypeMap() {
        return InlineResponse20024.attributeTypeMap
    }
}

export class InlineResponse20025 {
    'code': number
    'msg': string
    'data': InlineResponse20025Data

    static discriminator = undefined

    static attributeTypeMap: Array<{ name: string, baseName: string, type: string }> = [
        {
            "name": "code",
            "baseName": "code",
            "type": "number"
        },
        {
            "name": "msg",
            "baseName": "msg",
            "type": "string"
        },
        {
            "name": "data",
            "baseName": "data",
            "type": "InlineResponse20025Data"
        }]

    static getAttributeTypeMap() {
        return InlineResponse20025.attributeTypeMap
    }
}

export class InlineResponse20025Data {
    'total': number
    'content': Array<PBIMProfileDto>

    static discriminator = undefined

    static attributeTypeMap: Array<{ name: string, baseName: string, type: string }> = [
        {
            "name": "total",
            "baseName": "total",
            "type": "number"
        },
        {
            "name": "content",
            "baseName": "content",
            "type": "Array<PBIMProfileDto>"
        }]

    static getAttributeTypeMap() {
        return InlineResponse20025Data.attributeTypeMap
    }
}

export class InlineResponse20026 {
    'code': number
    'msg': string
    'data': InlineResponse20026Data

    static discriminator = undefined

    static attributeTypeMap: Array<{ name: string, baseName: string, type: string }> = [
        {
            "name": "code",
            "baseName": "code",
            "type": "number"
        },
        {
            "name": "msg",
            "baseName": "msg",
            "type": "string"
        },
        {
            "name": "data",
            "baseName": "data",
            "type": "InlineResponse20026Data"
        }]

    static getAttributeTypeMap() {
        return InlineResponse20026.attributeTypeMap
    }
}

export class InlineResponse20026Data {
    'hasMore': boolean
    'content': Array<PBIMProfileDto>

    static discriminator = undefined

    static attributeTypeMap: Array<{ name: string, baseName: string, type: string }> = [
        {
            "name": "hasMore",
            "baseName": "hasMore",
            "type": "boolean"
        },
        {
            "name": "content",
            "baseName": "content",
            "type": "Array<PBIMProfileDto>"
        }]

    static getAttributeTypeMap() {
        return InlineResponse20026Data.attributeTypeMap
    }
}

export class InlineResponse20027 {
    'code': number
    'msg': string
    'data': InlineResponse20027Data

    static discriminator = undefined

    static attributeTypeMap: Array<{ name: string, baseName: string, type: string }> = [
        {
            "name": "code",
            "baseName": "code",
            "type": "number"
        },
        {
            "name": "msg",
            "baseName": "msg",
            "type": "string"
        },
        {
            "name": "data",
            "baseName": "data",
            "type": "InlineResponse20027Data"
        }]

    static getAttributeTypeMap() {
        return InlineResponse20027.attributeTypeMap
    }
}

export class InlineResponse20027Data {
    'total': number
    'content': Array<DupProfile>

    static discriminator = undefined

    static attributeTypeMap: Array<{ name: string, baseName: string, type: string }> = [
        {
            "name": "total",
            "baseName": "total",
            "type": "number"
        },
        {
            "name": "content",
            "baseName": "content",
            "type": "Array<DupProfile>"
        }]

    static getAttributeTypeMap() {
        return InlineResponse20027Data.attributeTypeMap
    }
}

export class InlineResponse20028 {
    'code': number
    'msg': string
    'data': PBIMControlDto

    static discriminator = undefined

    static attributeTypeMap: Array<{ name: string, baseName: string, type: string }> = [
        {
            "name": "code",
            "baseName": "code",
            "type": "number"
        },
        {
            "name": "msg",
            "baseName": "msg",
            "type": "string"
        },
        {
            "name": "data",
            "baseName": "data",
            "type": "PBIMControlDto"
        }]

    static getAttributeTypeMap() {
        return InlineResponse20028.attributeTypeMap
    }
}

export class InlineResponse20029 {
    'code': number
    'msg': string
    'data': InlineResponse20029Data

    static discriminator = undefined

    static attributeTypeMap: Array<{ name: string, baseName: string, type: string }> = [
        {
            "name": "code",
            "baseName": "code",
            "type": "number"
        },
        {
            "name": "msg",
            "baseName": "msg",
            "type": "string"
        },
        {
            "name": "data",
            "baseName": "data",
            "type": "InlineResponse20029Data"
        }]

    static getAttributeTypeMap() {
        return InlineResponse20029.attributeTypeMap
    }
}

export class InlineResponse20029Data {
    'total': number
    'content': Array<PBIMControlDto>

    static discriminator = undefined

    static attributeTypeMap: Array<{ name: string, baseName: string, type: string }> = [
        {
            "name": "total",
            "baseName": "total",
            "type": "number"
        },
        {
            "name": "content",
            "baseName": "content",
            "type": "Array<PBIMControlDto>"
        }]

    static getAttributeTypeMap() {
        return InlineResponse20029Data.attributeTypeMap
    }
}

export class InlineResponse2003 {
    'code': number
    'msg': string
    'data': PBIMContactDto

    static discriminator = undefined

    static attributeTypeMap: Array<{ name: string, baseName: string, type: string }> = [
        {
            "name": "code",
            "baseName": "code",
            "type": "number"
        },
        {
            "name": "msg",
            "baseName": "msg",
            "type": "string"
        },
        {
            "name": "data",
            "baseName": "data",
            "type": "PBIMContactDto"
        }]

    static getAttributeTypeMap() {
        return InlineResponse2003.attributeTypeMap
    }
}

export class InlineResponse20030 {
    'code': number
    'msg': string
    'data': InlineResponse20030Data

    static discriminator = undefined

    static attributeTypeMap: Array<{ name: string, baseName: string, type: string }> = [
        {
            "name": "code",
            "baseName": "code",
            "type": "number"
        },
        {
            "name": "msg",
            "baseName": "msg",
            "type": "string"
        },
        {
            "name": "data",
            "baseName": "data",
            "type": "InlineResponse20030Data"
        }]

    static getAttributeTypeMap() {
        return InlineResponse20030.attributeTypeMap
    }
}

export class InlineResponse20030Data {
    'hasMore': boolean
    'content': Array<PBIMControlDto>

    static discriminator = undefined

    static attributeTypeMap: Array<{ name: string, baseName: string, type: string }> = [
        {
            "name": "hasMore",
            "baseName": "hasMore",
            "type": "boolean"
        },
        {
            "name": "content",
            "baseName": "content",
            "type": "Array<PBIMControlDto>"
        }]

    static getAttributeTypeMap() {
        return InlineResponse20030Data.attributeTypeMap
    }
}

export class InlineResponse20031 {
    'code': number
    'msg': string
    'data': PBIMActionDto

    static discriminator = undefined

    static attributeTypeMap: Array<{ name: string, baseName: string, type: string }> = [
        {
            "name": "code",
            "baseName": "code",
            "type": "number"
        },
        {
            "name": "msg",
            "baseName": "msg",
            "type": "string"
        },
        {
            "name": "data",
            "baseName": "data",
            "type": "PBIMActionDto"
        }]

    static getAttributeTypeMap() {
        return InlineResponse20031.attributeTypeMap
    }
}

export class InlineResponse20032 {
    'code': number
    'msg': string
    'data': InlineResponse20032Data

    static discriminator = undefined

    static attributeTypeMap: Array<{ name: string, baseName: string, type: string }> = [
        {
            "name": "code",
            "baseName": "code",
            "type": "number"
        },
        {
            "name": "msg",
            "baseName": "msg",
            "type": "string"
        },
        {
            "name": "data",
            "baseName": "data",
            "type": "InlineResponse20032Data"
        }]

    static getAttributeTypeMap() {
        return InlineResponse20032.attributeTypeMap
    }
}

export class InlineResponse20032Data {
    'total': number
    'content': Array<PBIMActionDto>

    static discriminator = undefined

    static attributeTypeMap: Array<{ name: string, baseName: string, type: string }> = [
        {
            "name": "total",
            "baseName": "total",
            "type": "number"
        },
        {
            "name": "content",
            "baseName": "content",
            "type": "Array<PBIMActionDto>"
        }]

    static getAttributeTypeMap() {
        return InlineResponse20032Data.attributeTypeMap
    }
}

export class InlineResponse20033 {
    'code': number
    'msg': string
    'data': InlineResponse20033Data

    static discriminator = undefined

    static attributeTypeMap: Array<{ name: string, baseName: string, type: string }> = [
        {
            "name": "code",
            "baseName": "code",
            "type": "number"
        },
        {
            "name": "msg",
            "baseName": "msg",
            "type": "string"
        },
        {
            "name": "data",
            "baseName": "data",
            "type": "InlineResponse20033Data"
        }]

    static getAttributeTypeMap() {
        return InlineResponse20033.attributeTypeMap
    }
}

export class InlineResponse20033Data {
    'hasMore': boolean
    'content': Array<PBIMActionDto>

    static discriminator = undefined

    static attributeTypeMap: Array<{ name: string, baseName: string, type: string }> = [
        {
            "name": "hasMore",
            "baseName": "hasMore",
            "type": "boolean"
        },
        {
            "name": "content",
            "baseName": "content",
            "type": "Array<PBIMActionDto>"
        }]

    static getAttributeTypeMap() {
        return InlineResponse20033Data.attributeTypeMap
    }
}

export class InlineResponse20034 {
    'code': number
    'msg': string
    'data': PBIMTimelineDto

    static discriminator = undefined

    static attributeTypeMap: Array<{ name: string, baseName: string, type: string }> = [
        {
            "name": "code",
            "baseName": "code",
            "type": "number"
        },
        {
            "name": "msg",
            "baseName": "msg",
            "type": "string"
        },
        {
            "name": "data",
            "baseName": "data",
            "type": "PBIMTimelineDto"
        }]

    static getAttributeTypeMap() {
        return InlineResponse20034.attributeTypeMap
    }
}

export class InlineResponse20035 {
    'code': number
    'msg': string
    'data': InlineResponse20035Data

    static discriminator = undefined

    static attributeTypeMap: Array<{ name: string, baseName: string, type: string }> = [
        {
            "name": "code",
            "baseName": "code",
            "type": "number"
        },
        {
            "name": "msg",
            "baseName": "msg",
            "type": "string"
        },
        {
            "name": "data",
            "baseName": "data",
            "type": "InlineResponse20035Data"
        }]

    static getAttributeTypeMap() {
        return InlineResponse20035.attributeTypeMap
    }
}

export class InlineResponse20035Data {
    'total': number
    'content': Array<PBIMTimelineDto>

    static discriminator = undefined

    static attributeTypeMap: Array<{ name: string, baseName: string, type: string }> = [
        {
            "name": "total",
            "baseName": "total",
            "type": "number"
        },
        {
            "name": "content",
            "baseName": "content",
            "type": "Array<PBIMTimelineDto>"
        }]

    static getAttributeTypeMap() {
        return InlineResponse20035Data.attributeTypeMap
    }
}

export class InlineResponse20036 {
    'code': number
    'msg': string
    'data': InlineResponse20036Data

    static discriminator = undefined

    static attributeTypeMap: Array<{ name: string, baseName: string, type: string }> = [
        {
            "name": "code",
            "baseName": "code",
            "type": "number"
        },
        {
            "name": "msg",
            "baseName": "msg",
            "type": "string"
        },
        {
            "name": "data",
            "baseName": "data",
            "type": "InlineResponse20036Data"
        }]

    static getAttributeTypeMap() {
        return InlineResponse20036.attributeTypeMap
    }
}

export class InlineResponse20036Data {
    'hasMore': boolean
    'content': Array<PBIMTimelineDto>

    static discriminator = undefined

    static attributeTypeMap: Array<{ name: string, baseName: string, type: string }> = [
        {
            "name": "hasMore",
            "baseName": "hasMore",
            "type": "boolean"
        },
        {
            "name": "content",
            "baseName": "content",
            "type": "Array<PBIMTimelineDto>"
        }]

    static getAttributeTypeMap() {
        return InlineResponse20036Data.attributeTypeMap
    }
}

export class InlineResponse20037 {
    'code': number
    'msg': string
    'data': PBIMFundDto

    static discriminator = undefined

    static attributeTypeMap: Array<{ name: string, baseName: string, type: string }> = [
        {
            "name": "code",
            "baseName": "code",
            "type": "number"
        },
        {
            "name": "msg",
            "baseName": "msg",
            "type": "string"
        },
        {
            "name": "data",
            "baseName": "data",
            "type": "PBIMFundDto"
        }]

    static getAttributeTypeMap() {
        return InlineResponse20037.attributeTypeMap
    }
}

export class InlineResponse20038 {
    'code': number
    'msg': string
    'data': InlineResponse20038Data

    static discriminator = undefined

    static attributeTypeMap: Array<{ name: string, baseName: string, type: string }> = [
        {
            "name": "code",
            "baseName": "code",
            "type": "number"
        },
        {
            "name": "msg",
            "baseName": "msg",
            "type": "string"
        },
        {
            "name": "data",
            "baseName": "data",
            "type": "InlineResponse20038Data"
        }]

    static getAttributeTypeMap() {
        return InlineResponse20038.attributeTypeMap
    }
}

export class InlineResponse20038Data {
    'total': number
    'content': Array<PBIMFundDto>

    static discriminator = undefined

    static attributeTypeMap: Array<{ name: string, baseName: string, type: string }> = [
        {
            "name": "total",
            "baseName": "total",
            "type": "number"
        },
        {
            "name": "content",
            "baseName": "content",
            "type": "Array<PBIMFundDto>"
        }]

    static getAttributeTypeMap() {
        return InlineResponse20038Data.attributeTypeMap
    }
}

export class InlineResponse20039 {
    'code': number
    'msg': string
    'data': InlineResponse20039Data

    static discriminator = undefined

    static attributeTypeMap: Array<{ name: string, baseName: string, type: string }> = [
        {
            "name": "code",
            "baseName": "code",
            "type": "number"
        },
        {
            "name": "msg",
            "baseName": "msg",
            "type": "string"
        },
        {
            "name": "data",
            "baseName": "data",
            "type": "InlineResponse20039Data"
        }]

    static getAttributeTypeMap() {
        return InlineResponse20039.attributeTypeMap
    }
}

export class InlineResponse20039Data {
    'hasMore': boolean
    'content': Array<PBIMFundDto>

    static discriminator = undefined

    static attributeTypeMap: Array<{ name: string, baseName: string, type: string }> = [
        {
            "name": "hasMore",
            "baseName": "hasMore",
            "type": "boolean"
        },
        {
            "name": "content",
            "baseName": "content",
            "type": "Array<PBIMFundDto>"
        }]

    static getAttributeTypeMap() {
        return InlineResponse20039Data.attributeTypeMap
    }
}

export class InlineResponse2004 {
    'code': number
    'msg': string
    'data': Array<PBIMContactDto>

    static discriminator = undefined

    static attributeTypeMap: Array<{ name: string, baseName: string, type: string }> = [
        {
            "name": "code",
            "baseName": "code",
            "type": "number"
        },
        {
            "name": "msg",
            "baseName": "msg",
            "type": "string"
        },
        {
            "name": "data",
            "baseName": "data",
            "type": "Array<PBIMContactDto>"
        }]

    static getAttributeTypeMap() {
        return InlineResponse2004.attributeTypeMap
    }
}

export class InlineResponse2005 {
    'code': number
    'msg': string
    'data': PBIMAddressDto

    static discriminator = undefined

    static attributeTypeMap: Array<{ name: string, baseName: string, type: string }> = [
        {
            "name": "code",
            "baseName": "code",
            "type": "number"
        },
        {
            "name": "msg",
            "baseName": "msg",
            "type": "string"
        },
        {
            "name": "data",
            "baseName": "data",
            "type": "PBIMAddressDto"
        }]

    static getAttributeTypeMap() {
        return InlineResponse2005.attributeTypeMap
    }
}

export class InlineResponse2006 {
    'code': number
    'msg': string
    'data': InlineResponse2006Data

    static discriminator = undefined

    static attributeTypeMap: Array<{ name: string, baseName: string, type: string }> = [
        {
            "name": "code",
            "baseName": "code",
            "type": "number"
        },
        {
            "name": "msg",
            "baseName": "msg",
            "type": "string"
        },
        {
            "name": "data",
            "baseName": "data",
            "type": "InlineResponse2006Data"
        }]

    static getAttributeTypeMap() {
        return InlineResponse2006.attributeTypeMap
    }
}

export class InlineResponse2006Data {
    'total': number
    'content': Array<PBIMAddressDto>

    static discriminator = undefined

    static attributeTypeMap: Array<{ name: string, baseName: string, type: string }> = [
        {
            "name": "total",
            "baseName": "total",
            "type": "number"
        },
        {
            "name": "content",
            "baseName": "content",
            "type": "Array<PBIMAddressDto>"
        }]

    static getAttributeTypeMap() {
        return InlineResponse2006Data.attributeTypeMap
    }
}

export class InlineResponse2007 {
    'code': number
    'msg': string
    'data': PBIMRelationDto

    static discriminator = undefined

    static attributeTypeMap: Array<{ name: string, baseName: string, type: string }> = [
        {
            "name": "code",
            "baseName": "code",
            "type": "number"
        },
        {
            "name": "msg",
            "baseName": "msg",
            "type": "string"
        },
        {
            "name": "data",
            "baseName": "data",
            "type": "PBIMRelationDto"
        }]

    static getAttributeTypeMap() {
        return InlineResponse2007.attributeTypeMap
    }
}

export class InlineResponse2008 {
    'code': number
    'msg': string
    'data': InlineResponse2008Data

    static discriminator = undefined

    static attributeTypeMap: Array<{ name: string, baseName: string, type: string }> = [
        {
            "name": "code",
            "baseName": "code",
            "type": "number"
        },
        {
            "name": "msg",
            "baseName": "msg",
            "type": "string"
        },
        {
            "name": "data",
            "baseName": "data",
            "type": "InlineResponse2008Data"
        }]

    static getAttributeTypeMap() {
        return InlineResponse2008.attributeTypeMap
    }
}

export class InlineResponse2008Data {
    'total': number
    'content': Array<PBIMRelationDto>

    static discriminator = undefined

    static attributeTypeMap: Array<{ name: string, baseName: string, type: string }> = [
        {
            "name": "total",
            "baseName": "total",
            "type": "number"
        },
        {
            "name": "content",
            "baseName": "content",
            "type": "Array<PBIMRelationDto>"
        }]

    static getAttributeTypeMap() {
        return InlineResponse2008Data.attributeTypeMap
    }
}

export class InlineResponse2009 {
    'code': number
    'msg': string
    'data': InlineResponse2009Data

    static discriminator = undefined

    static attributeTypeMap: Array<{ name: string, baseName: string, type: string }> = [
        {
            "name": "code",
            "baseName": "code",
            "type": "number"
        },
        {
            "name": "msg",
            "baseName": "msg",
            "type": "string"
        },
        {
            "name": "data",
            "baseName": "data",
            "type": "InlineResponse2009Data"
        }]

    static getAttributeTypeMap() {
        return InlineResponse2009.attributeTypeMap
    }
}

export class InlineResponse2009Data {
    'hasMore': boolean
    'content': Array<PBIMRelationDto>

    static discriminator = undefined

    static attributeTypeMap: Array<{ name: string, baseName: string, type: string }> = [
        {
            "name": "hasMore",
            "baseName": "hasMore",
            "type": "boolean"
        },
        {
            "name": "content",
            "baseName": "content",
            "type": "Array<PBIMRelationDto>"
        }]

    static getAttributeTypeMap() {
        return InlineResponse2009Data.attributeTypeMap
    }
}

export class MessageCreate {
    /**
    * 运营号平台Uid
    */
    'profilePlatformUid': string
    /**
    * 运营号平台自定义ID
    */
    'profileCustomID': string
    /**
    * 联系人平台Uid
    */
    'platformUid': string
    /**
    * 联系人平台自定义ID
    */
    'customID': string
    /**
    * 平台群ID
    */
    'platformGid': string
    /**
    * 方向,相对于运营号 1 收到， 2 发出
    */
    'direction': number
    /**
    * 消息类型
    */
    'messageType': number
    /**
    * 平台消息类型
    */
    'platformMsgType': number
    /**
    * 会话类型 P2P, G2G
    */
    'sessionType': number
    /**
    * 内容
    */
    'content': string
    /**
    * 是否撤销
    */
    'revoke': number
    /**
    * 消息实际发送时间
    */
    'sendTime': number
    /**
    * 快照
    */
    'snapshot': string
    /**
    * 服务ID
    */
    'serviceID': number
    /**
    * 扩展字段
    */
    'extra': string
    /**
    * 标签
    */
    'tags': string

    static discriminator = undefined

    static attributeTypeMap: Array<{ name: string, baseName: string, type: string }> = [
        {
            "name": "profilePlatformUid",
            "baseName": "profilePlatformUid",
            "type": "string"
        },
        {
            "name": "profileCustomID",
            "baseName": "profileCustomID",
            "type": "string"
        },
        {
            "name": "platformUid",
            "baseName": "platformUid",
            "type": "string"
        },
        {
            "name": "customID",
            "baseName": "customID",
            "type": "string"
        },
        {
            "name": "platformGid",
            "baseName": "platformGid",
            "type": "string"
        },
        {
            "name": "direction",
            "baseName": "direction",
            "type": "number"
        },
        {
            "name": "messageType",
            "baseName": "messageType",
            "type": "number"
        },
        {
            "name": "platformMsgType",
            "baseName": "platformMsgType",
            "type": "number"
        },
        {
            "name": "sessionType",
            "baseName": "sessionType",
            "type": "number"
        },
        {
            "name": "content",
            "baseName": "content",
            "type": "string"
        },
        {
            "name": "revoke",
            "baseName": "revoke",
            "type": "number"
        },
        {
            "name": "sendTime",
            "baseName": "sendTime",
            "type": "number"
        },
        {
            "name": "snapshot",
            "baseName": "snapshot",
            "type": "string"
        },
        {
            "name": "serviceID",
            "baseName": "serviceID",
            "type": "number"
        },
        {
            "name": "extra",
            "baseName": "extra",
            "type": "string"
        },
        {
            "name": "tags",
            "baseName": "tags",
            "type": "string"
        }]

    static getAttributeTypeMap() {
        return MessageCreate.attributeTypeMap
    }
}

export class PBIMActionDto {
    /**
    * 系统分配ID
    */
    'id': number
    /**
    * 服务id
    */
    'serviceID': number
    /**
    * 运营号平台Uid
    */
    'profilePlatformUid': string
    /**
    * 联系人平台Uid
    */
    'contactPlatformUid': string
    /**
    * 操作类型
    */
    'type': string
    /**
    * 操作时间
    */
    'actionTime': number
    /**
    * 内容
    */
    'content': string
    /**
    * 扩展字段
    */
    'extra': string
    /**
    * 数据库记录创建时间
    */
    'ctime': number

    static discriminator = undefined

    static attributeTypeMap: Array<{ name: string, baseName: string, type: string }> = [
        {
            "name": "id",
            "baseName": "id",
            "type": "number"
        },
        {
            "name": "serviceID",
            "baseName": "serviceID",
            "type": "number"
        },
        {
            "name": "profilePlatformUid",
            "baseName": "profilePlatformUid",
            "type": "string"
        },
        {
            "name": "contactPlatformUid",
            "baseName": "contactPlatformUid",
            "type": "string"
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "string"
        },
        {
            "name": "actionTime",
            "baseName": "actionTime",
            "type": "number"
        },
        {
            "name": "content",
            "baseName": "content",
            "type": "string"
        },
        {
            "name": "extra",
            "baseName": "extra",
            "type": "string"
        },
        {
            "name": "ctime",
            "baseName": "ctime",
            "type": "number"
        }]

    static getAttributeTypeMap() {
        return PBIMActionDto.attributeTypeMap
    }
}

export class PBIMAddFriendReq {
    /**
    * 服务ID
    */
    'serviceID': number
    /**
    * 运营号平台自定义ID
    */
    'profileCustomID': string
    /**
    * 申请人平台Uid
    */
    'platformUid': string

    static discriminator = undefined

    static attributeTypeMap: Array<{ name: string, baseName: string, type: string }> = [
        {
            "name": "serviceID",
            "baseName": "serviceID",
            "type": "number"
        },
        {
            "name": "profileCustomID",
            "baseName": "profileCustomID",
            "type": "string"
        },
        {
            "name": "platformUid",
            "baseName": "platformUid",
            "type": "string"
        }]

    static getAttributeTypeMap() {
        return PBIMAddFriendReq.attributeTypeMap
    }
}

export class PBIMAddGroupMembersReq {
    /**
    * 服务ID
    */
    'serviceID': number
    /**
    * 平台自定义ID
    */
    'customID': string
    /**
    * 平台群ID
    */
    'platformGid': string
    /**
    * 群成员customID
    */
    'memberCustomIDs': Array<string>

    static discriminator = undefined

    static attributeTypeMap: Array<{ name: string, baseName: string, type: string }> = [
        {
            "name": "serviceID",
            "baseName": "serviceID",
            "type": "number"
        },
        {
            "name": "customID",
            "baseName": "customID",
            "type": "string"
        },
        {
            "name": "platformGid",
            "baseName": "platformGid",
            "type": "string"
        },
        {
            "name": "memberCustomIDs",
            "baseName": "memberCustomIDs",
            "type": "Array<string>"
        }]

    static getAttributeTypeMap() {
        return PBIMAddGroupMembersReq.attributeTypeMap
    }
}

export class PBIMAddressDto {
    /**
    * 系统分配ID
    */
    'id': number
    /**
    * 联系人ID
    */
    'contactID': number
    /**
    * 服务id
    */
    'serviceID': number
    /**
    * 平台uid
    */
    'platformUid': string
    /**
    * 平台自定义id
    */
    'customID': string
    /**
    * 收货人姓名
    */
    'name': string
    /**
    * 收货人联系方式
    */
    'mobilephone': string
    /**
    * 国家
    */
    'country': string
    /**
    * 省份
    */
    'state': string
    /**
    * 城市
    */
    'city': string
    /**
    * 区
    */
    'district': string
    /**
    * 详细地址
    */
    'addr': string
    /**
    * 扩展字段
    */
    'extra': string
    /**
    * 标签
    */
    'tags': string
    /**
    * 备注说明
    */
    'desc': string
    /**
    * 记录数据库时间
    */
    'ctime': number

    static discriminator = undefined

    static attributeTypeMap: Array<{ name: string, baseName: string, type: string }> = [
        {
            "name": "id",
            "baseName": "id",
            "type": "number"
        },
        {
            "name": "contactID",
            "baseName": "contactID",
            "type": "number"
        },
        {
            "name": "serviceID",
            "baseName": "serviceID",
            "type": "number"
        },
        {
            "name": "platformUid",
            "baseName": "platformUid",
            "type": "string"
        },
        {
            "name": "customID",
            "baseName": "customID",
            "type": "string"
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "mobilephone",
            "baseName": "mobilephone",
            "type": "string"
        },
        {
            "name": "country",
            "baseName": "country",
            "type": "string"
        },
        {
            "name": "state",
            "baseName": "state",
            "type": "string"
        },
        {
            "name": "city",
            "baseName": "city",
            "type": "string"
        },
        {
            "name": "district",
            "baseName": "district",
            "type": "string"
        },
        {
            "name": "addr",
            "baseName": "addr",
            "type": "string"
        },
        {
            "name": "extra",
            "baseName": "extra",
            "type": "string"
        },
        {
            "name": "tags",
            "baseName": "tags",
            "type": "string"
        },
        {
            "name": "desc",
            "baseName": "desc",
            "type": "string"
        },
        {
            "name": "ctime",
            "baseName": "ctime",
            "type": "number"
        }]

    static getAttributeTypeMap() {
        return PBIMAddressDto.attributeTypeMap
    }
}

export class PBIMApproveAllFriendReq {
    /**
    * 服务ID
    */
    'serviceID': number
    /**
    * 平台自定义ID
    */
    'customID': string

    static discriminator = undefined

    static attributeTypeMap: Array<{ name: string, baseName: string, type: string }> = [
        {
            "name": "serviceID",
            "baseName": "serviceID",
            "type": "number"
        },
        {
            "name": "customID",
            "baseName": "customID",
            "type": "string"
        }]

    static getAttributeTypeMap() {
        return PBIMApproveAllFriendReq.attributeTypeMap
    }
}

export class PBIMContactDto {
    /**
    * 系统分配联系人ID
    */
    'id': number
    /**
    * 平台uid
    */
    'platformUid': string
    /**
    * 平台自定义id
    */
    'customID': string
    /**
    * 昵称
    */
    'nickname': string
    /**
    * 头像
    */
    'avatar': string
    /**
    * 性别
    */
    'gender': number
    /**
    * 国家
    */
    'country': string
    /**
    * 省份
    */
    'state': string
    /**
    * 城市
    */
    'city': string
    /**
    * 签名
    */
    'signature': string
    /**
    * 类型
    */
    'type': number
    /**
    * 服务id
    */
    'serviceID': number
    /**
    * 扩展字段
    */
    'extra': string
    /**
    * 标签
    */
    'tags': string
    /**
    * 记录数据库时间
    */
    'ctime': number

    static discriminator = undefined

    static attributeTypeMap: Array<{ name: string, baseName: string, type: string }> = [
        {
            "name": "id",
            "baseName": "id",
            "type": "number"
        },
        {
            "name": "platformUid",
            "baseName": "platformUid",
            "type": "string"
        },
        {
            "name": "customID",
            "baseName": "customID",
            "type": "string"
        },
        {
            "name": "nickname",
            "baseName": "nickname",
            "type": "string"
        },
        {
            "name": "avatar",
            "baseName": "avatar",
            "type": "string"
        },
        {
            "name": "gender",
            "baseName": "gender",
            "type": "number"
        },
        {
            "name": "country",
            "baseName": "country",
            "type": "string"
        },
        {
            "name": "state",
            "baseName": "state",
            "type": "string"
        },
        {
            "name": "city",
            "baseName": "city",
            "type": "string"
        },
        {
            "name": "signature",
            "baseName": "signature",
            "type": "string"
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "number"
        },
        {
            "name": "serviceID",
            "baseName": "serviceID",
            "type": "number"
        },
        {
            "name": "extra",
            "baseName": "extra",
            "type": "string"
        },
        {
            "name": "tags",
            "baseName": "tags",
            "type": "string"
        },
        {
            "name": "ctime",
            "baseName": "ctime",
            "type": "number"
        }]

    static getAttributeTypeMap() {
        return PBIMContactDto.attributeTypeMap
    }
}

export class PBIMControlDto {
    /**
    * 系统分配ID
    */
    'id': number
    /**
    * 控制配置的内容
    */
    'value': string
    /**
    * 配置类型
    */
    'type': string
    /**
    * 创建时间
    */
    'ctime': number
    /**
    * 服务ID
    */
    'serviceID': number
    /**
    * 扩展字段
    */
    'extra': string

    static discriminator = undefined

    static attributeTypeMap: Array<{ name: string, baseName: string, type: string }> = [
        {
            "name": "id",
            "baseName": "id",
            "type": "number"
        },
        {
            "name": "value",
            "baseName": "value",
            "type": "string"
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "string"
        },
        {
            "name": "ctime",
            "baseName": "ctime",
            "type": "number"
        },
        {
            "name": "serviceID",
            "baseName": "serviceID",
            "type": "number"
        },
        {
            "name": "extra",
            "baseName": "extra",
            "type": "string"
        }]

    static getAttributeTypeMap() {
        return PBIMControlDto.attributeTypeMap
    }
}

export class PBIMCreateGroupReq {
    /**
    * 服务ID
    */
    'serviceID': number
    /**
    * 平台自定义ID
    */
    'customID': string
    /**
    * 平台群ID
    */
    'groupName': string
    /**
    * 群成员customID
    */
    'memberCustomIDs': Array<string>

    static discriminator = undefined

    static attributeTypeMap: Array<{ name: string, baseName: string, type: string }> = [
        {
            "name": "serviceID",
            "baseName": "serviceID",
            "type": "number"
        },
        {
            "name": "customID",
            "baseName": "customID",
            "type": "string"
        },
        {
            "name": "groupName",
            "baseName": "groupName",
            "type": "string"
        },
        {
            "name": "memberCustomIDs",
            "baseName": "memberCustomIDs",
            "type": "Array<string>"
        }]

    static getAttributeTypeMap() {
        return PBIMCreateGroupReq.attributeTypeMap
    }
}

export class PBIMDeleteGroupMembersReq {
    /**
    * 服务ID
    */
    'serviceID': number
    /**
    * 平台自定义ID
    */
    'customID': string
    /**
    * 平台群ID
    */
    'platformGid': string
    /**
    * 群成员customID
    */
    'memberCustomIDs': Array<string>

    static discriminator = undefined

    static attributeTypeMap: Array<{ name: string, baseName: string, type: string }> = [
        {
            "name": "serviceID",
            "baseName": "serviceID",
            "type": "number"
        },
        {
            "name": "customID",
            "baseName": "customID",
            "type": "string"
        },
        {
            "name": "platformGid",
            "baseName": "platformGid",
            "type": "string"
        },
        {
            "name": "memberCustomIDs",
            "baseName": "memberCustomIDs",
            "type": "Array<string>"
        }]

    static getAttributeTypeMap() {
        return PBIMDeleteGroupMembersReq.attributeTypeMap
    }
}

export class PBIMFundDto {
    /**
    * 系统分配ID
    */
    'id': number
    /**
    * 运营号联系人ID
    */
    'profileContactID': number
    /**
    * 运营号平台Uid
    */
    'profilePlatformUid': string
    /**
    * 运营号平台自定义ID
    */
    'profileCustomID': string
    /**
    * 联系人ID
    */
    'contactID': number
    /**
    * 平台Uid
    */
    'platformUid': string
    /**
    * 平台自定义ID
    */
    'customID': string
    /**
    * 平台群ID
    */
    'platformGid': string
    /**
    * 平台账单ID
    */
    'platformFundID': string
    /**
    * 转账类型
    */
    'type': number
    /**
    * 转账金额
    */
    'amount': number
    /**
    * 转账方向
    */
    'direction': number
    /**
    * 交易发起时间, e.g 发送者 转账发起时间
    */
    'sendTime': number
    /**
    * 交易确认时间, e.g 接收者 转账确认时间
    */
    'receiveTime': number
    /**
    * 数据库记录创建时间
    */
    'ctime': number
    /**
    * 快照
    */
    'snapshot': string
    /**
    * 服务id
    */
    'serviceID': number
    /**
    * 扩展字段
    */
    'extra': string
    /**
    * 标签
    */
    'tags': string

    static discriminator = undefined

    static attributeTypeMap: Array<{ name: string, baseName: string, type: string }> = [
        {
            "name": "id",
            "baseName": "id",
            "type": "number"
        },
        {
            "name": "profileContactID",
            "baseName": "profileContactID",
            "type": "number"
        },
        {
            "name": "profilePlatformUid",
            "baseName": "profilePlatformUid",
            "type": "string"
        },
        {
            "name": "profileCustomID",
            "baseName": "profileCustomID",
            "type": "string"
        },
        {
            "name": "contactID",
            "baseName": "contactID",
            "type": "number"
        },
        {
            "name": "platformUid",
            "baseName": "platformUid",
            "type": "string"
        },
        {
            "name": "customID",
            "baseName": "customID",
            "type": "string"
        },
        {
            "name": "platformGid",
            "baseName": "platformGid",
            "type": "string"
        },
        {
            "name": "platformFundID",
            "baseName": "platformFundID",
            "type": "string"
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "number"
        },
        {
            "name": "amount",
            "baseName": "amount",
            "type": "number"
        },
        {
            "name": "direction",
            "baseName": "direction",
            "type": "number"
        },
        {
            "name": "sendTime",
            "baseName": "sendTime",
            "type": "number"
        },
        {
            "name": "receiveTime",
            "baseName": "receiveTime",
            "type": "number"
        },
        {
            "name": "ctime",
            "baseName": "ctime",
            "type": "number"
        },
        {
            "name": "snapshot",
            "baseName": "snapshot",
            "type": "string"
        },
        {
            "name": "serviceID",
            "baseName": "serviceID",
            "type": "number"
        },
        {
            "name": "extra",
            "baseName": "extra",
            "type": "string"
        },
        {
            "name": "tags",
            "baseName": "tags",
            "type": "string"
        }]

    static getAttributeTypeMap() {
        return PBIMFundDto.attributeTypeMap
    }
}

export class PBIMGeoTag {
    /**
    * 纬度
    */
    'latitude': number
    /**
    * 经度
    */
    'longitude': number
    /**
    * 海拔
    */
    'altitude': number
    /**
    * 精确度
    */
    'accuracy': number
    /**
    * 位置名称
    */
    'placeName': string
    /**
    * 城市
    */
    'city': string
    /**
    * 地标
    */
    'poiName': string
    /**
    * 地标地址
    */
    'poiAddress': string

    static discriminator = undefined

    static attributeTypeMap: Array<{ name: string, baseName: string, type: string }> = [
        {
            "name": "latitude",
            "baseName": "latitude",
            "type": "number"
        },
        {
            "name": "longitude",
            "baseName": "longitude",
            "type": "number"
        },
        {
            "name": "altitude",
            "baseName": "altitude",
            "type": "number"
        },
        {
            "name": "accuracy",
            "baseName": "accuracy",
            "type": "number"
        },
        {
            "name": "placeName",
            "baseName": "placeName",
            "type": "string"
        },
        {
            "name": "city",
            "baseName": "city",
            "type": "string"
        },
        {
            "name": "poiName",
            "baseName": "poiName",
            "type": "string"
        },
        {
            "name": "poiAddress",
            "baseName": "poiAddress",
            "type": "string"
        }]

    static getAttributeTypeMap() {
        return PBIMGeoTag.attributeTypeMap
    }
}

export class PBIMGroupDto {
    /**
    * 系统分配群ID
    */
    'id': number
    /**
    * 系统分配群主联系人ID
    */
    'ownerContactID': number
    /**
    * 群主平台ID
    */
    'ownerPlatformUid': string
    /**
    * 群主自定义ID
    */
    'ownerCustomID': string
    /**
    * 运营号系统分配联系人ID
    */
    'profileContactID': number
    /**
    * 运营号平台Uid
    */
    'profilePlatformUid': string
    /**
    * 运营号平台自定义ID
    */
    'profileCustomID': string
    /**
    * 群ID
    */
    'platformGid': string
    /**
    * 群名称
    */
    'name': string
    /**
    * 群头像
    */
    'avatar': string
    /**
    * 群公告
    */
    'signature': string
    /**
    * 群二维码
    */
    'qrcode': string
    /**
    * 二维码生成时间
    */
    'qrcodeGenerateTime': number
    /**
    * 录入系统时间
    */
    'ctime': number
    /**
    * 群成员数量
    */
    'memberCount': number
    /**
    * 服务id
    */
    'serviceID': number
    /**
    * 扩展字段
    */
    'extra': string
    /**
    * 标签
    */
    'tags': string

    static discriminator = undefined

    static attributeTypeMap: Array<{ name: string, baseName: string, type: string }> = [
        {
            "name": "id",
            "baseName": "id",
            "type": "number"
        },
        {
            "name": "ownerContactID",
            "baseName": "ownerContactID",
            "type": "number"
        },
        {
            "name": "ownerPlatformUid",
            "baseName": "ownerPlatformUid",
            "type": "string"
        },
        {
            "name": "ownerCustomID",
            "baseName": "ownerCustomID",
            "type": "string"
        },
        {
            "name": "profileContactID",
            "baseName": "profileContactID",
            "type": "number"
        },
        {
            "name": "profilePlatformUid",
            "baseName": "profilePlatformUid",
            "type": "string"
        },
        {
            "name": "profileCustomID",
            "baseName": "profileCustomID",
            "type": "string"
        },
        {
            "name": "platformGid",
            "baseName": "platformGid",
            "type": "string"
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "avatar",
            "baseName": "avatar",
            "type": "string"
        },
        {
            "name": "signature",
            "baseName": "signature",
            "type": "string"
        },
        {
            "name": "qrcode",
            "baseName": "qrcode",
            "type": "string"
        },
        {
            "name": "qrcodeGenerateTime",
            "baseName": "qrcodeGenerateTime",
            "type": "number"
        },
        {
            "name": "ctime",
            "baseName": "ctime",
            "type": "number"
        },
        {
            "name": "memberCount",
            "baseName": "memberCount",
            "type": "number"
        },
        {
            "name": "serviceID",
            "baseName": "serviceID",
            "type": "number"
        },
        {
            "name": "extra",
            "baseName": "extra",
            "type": "string"
        },
        {
            "name": "tags",
            "baseName": "tags",
            "type": "string"
        }]

    static getAttributeTypeMap() {
        return PBIMGroupDto.attributeTypeMap
    }
}

export class PBIMGroupMemberDto {
    /**
    * 系统分配ID
    */
    'id': number
    /**
    * 系统分配联系人ID
    */
    'contactID': number
    /**
    * 平台uid
    */
    'platformUid': string
    /**
    * 平台自定义ID
    */
    'customID': string
    /**
    * 系统分配群ID
    */
    'gid': number
    /**
    * 平台群ID
    */
    'platformGid': string
    /**
    * 成员别名
    */
    'alias': string
    /**
    * 成员来源
    */
    'source': string
    /**
    * 服务id
    */
    'serviceID': number
    /**
    * 信息是否完整记录
    */
    'loaded': number
    /**
    * 扩展字段
    */
    'extra': string
    /**
    * 标签
    */
    'tags': string
    /**
    * 数据库记录创建时间
    */
    'ctime': number

    static discriminator = undefined

    static attributeTypeMap: Array<{ name: string, baseName: string, type: string }> = [
        {
            "name": "id",
            "baseName": "id",
            "type": "number"
        },
        {
            "name": "contactID",
            "baseName": "contactID",
            "type": "number"
        },
        {
            "name": "platformUid",
            "baseName": "platformUid",
            "type": "string"
        },
        {
            "name": "customID",
            "baseName": "customID",
            "type": "string"
        },
        {
            "name": "gid",
            "baseName": "gid",
            "type": "number"
        },
        {
            "name": "platformGid",
            "baseName": "platformGid",
            "type": "string"
        },
        {
            "name": "alias",
            "baseName": "alias",
            "type": "string"
        },
        {
            "name": "source",
            "baseName": "source",
            "type": "string"
        },
        {
            "name": "serviceID",
            "baseName": "serviceID",
            "type": "number"
        },
        {
            "name": "loaded",
            "baseName": "loaded",
            "type": "number"
        },
        {
            "name": "extra",
            "baseName": "extra",
            "type": "string"
        },
        {
            "name": "tags",
            "baseName": "tags",
            "type": "string"
        },
        {
            "name": "ctime",
            "baseName": "ctime",
            "type": "number"
        }]

    static getAttributeTypeMap() {
        return PBIMGroupMemberDto.attributeTypeMap
    }
}

export class PBIMJoinGroupByInviteReq {
    /**
    * 服务ID
    */
    'serviceID': number
    /**
    * 平台自定义ID
    */
    'customID': string
    /**
    * 邀请者平台Uid
    */
    'inviterPlatformUid': string
    /**
    * 邀请消息的平台ID
    */
    'platformMsgID': string

    static discriminator = undefined

    static attributeTypeMap: Array<{ name: string, baseName: string, type: string }> = [
        {
            "name": "serviceID",
            "baseName": "serviceID",
            "type": "number"
        },
        {
            "name": "customID",
            "baseName": "customID",
            "type": "string"
        },
        {
            "name": "inviterPlatformUid",
            "baseName": "inviterPlatformUid",
            "type": "string"
        },
        {
            "name": "platformMsgID",
            "baseName": "platformMsgID",
            "type": "string"
        }]

    static getAttributeTypeMap() {
        return PBIMJoinGroupByInviteReq.attributeTypeMap
    }
}

export class PBIMMediaItem {
    /**
    * 类型, e.g 图片, 视频, 链接
    */
    'mIMEType': string
    /**
    * url 链接
    */
    'url': string

    static discriminator = undefined

    static attributeTypeMap: Array<{ name: string, baseName: string, type: string }> = [
        {
            "name": "mIMEType",
            "baseName": "MIMEType",
            "type": "string"
        },
        {
            "name": "url",
            "baseName": "url",
            "type": "string"
        }]

    static getAttributeTypeMap() {
        return PBIMMediaItem.attributeTypeMap
    }
}

export class PBIMMessageDto {
    /**
    * 系统分配ID
    */
    'id': number
    /**
    * 运营号联系人ID
    */
    'profileContactID': number
    /**
    * 运营号平台Uid
    */
    'profilePlatformUid': string
    /**
    * 运营号平台自定义ID
    */
    'profileCustomID': string
    /**
    * 联系人ID
    */
    'contactID': number
    /**
    * 联系人平台Uid
    */
    'platformUid': string
    /**
    * 联系人平台自定义ID
    */
    'customID': string
    /**
    * 联系人昵称
    */
    'nickname': string
    /**
    * 系统分配群ID
    */
    'gid': number
    /**
    * 平台群ID
    */
    'platformGid': string
    /**
    * 方向,相对于运营号 1 收到， 2 发出
    */
    'direction': number
    /**
    * 消息类型 文本, 1 语音, 2 图片, 3 视频, 4 名片, 5 链接, 6 红包, 7 转账, 8 地址, 11 好友请求, 12 动画, 13 语音聊天, 14 视频聊天, 15 通知, 10000 
    */
    'messageType': number
    /**
    * 平台消息ID
    */
    'platformMsgID': string
    /**
    * 平台消息类型
    */
    'platformMsgType': number
    /**
    * 会话类型 P2P, G2G
    */
    'sessionType': number
    /**
    * 内容
    */
    'content': string
    /**
    * 是否撤销
    */
    'revoke': number
    /**
    * 数据库记录创建时间
    */
    'ctime': number
    /**
    * 消息实际发送时间
    */
    'sendTime': number
    /**
    * 快照
    */
    'snapshot': string
    /**
    * 服务ID
    */
    'serviceID': number
    /**
    * 扩展字段
    */
    'extra': string
    /**
    * 标签
    */
    'tags': string

    static discriminator = undefined

    static attributeTypeMap: Array<{ name: string, baseName: string, type: string }> = [
        {
            "name": "id",
            "baseName": "id",
            "type": "number"
        },
        {
            "name": "profileContactID",
            "baseName": "profileContactID",
            "type": "number"
        },
        {
            "name": "profilePlatformUid",
            "baseName": "profilePlatformUid",
            "type": "string"
        },
        {
            "name": "profileCustomID",
            "baseName": "profileCustomID",
            "type": "string"
        },
        {
            "name": "contactID",
            "baseName": "contactID",
            "type": "number"
        },
        {
            "name": "platformUid",
            "baseName": "platformUid",
            "type": "string"
        },
        {
            "name": "customID",
            "baseName": "customID",
            "type": "string"
        },
        {
            "name": "nickname",
            "baseName": "nickname",
            "type": "string"
        },
        {
            "name": "gid",
            "baseName": "gid",
            "type": "number"
        },
        {
            "name": "platformGid",
            "baseName": "platformGid",
            "type": "string"
        },
        {
            "name": "direction",
            "baseName": "direction",
            "type": "number"
        },
        {
            "name": "messageType",
            "baseName": "messageType",
            "type": "number"
        },
        {
            "name": "platformMsgID",
            "baseName": "platformMsgID",
            "type": "string"
        },
        {
            "name": "platformMsgType",
            "baseName": "platformMsgType",
            "type": "number"
        },
        {
            "name": "sessionType",
            "baseName": "sessionType",
            "type": "number"
        },
        {
            "name": "content",
            "baseName": "content",
            "type": "string"
        },
        {
            "name": "revoke",
            "baseName": "revoke",
            "type": "number"
        },
        {
            "name": "ctime",
            "baseName": "ctime",
            "type": "number"
        },
        {
            "name": "sendTime",
            "baseName": "sendTime",
            "type": "number"
        },
        {
            "name": "snapshot",
            "baseName": "snapshot",
            "type": "string"
        },
        {
            "name": "serviceID",
            "baseName": "serviceID",
            "type": "number"
        },
        {
            "name": "extra",
            "baseName": "extra",
            "type": "string"
        },
        {
            "name": "tags",
            "baseName": "tags",
            "type": "string"
        }]

    static getAttributeTypeMap() {
        return PBIMMessageDto.attributeTypeMap
    }
}

export class PBIMProfileDto {
    /**
    * 系统分配运营号ID
    */
    'id': number
    /**
    * 联系人ID
    */
    'contactID': number
    /**
    * 平台uid
    */
    'platformUid': string
    /**
    * 平台整型uid
    */
    'platformUid2': number
    /**
    * 平台自定义id
    */
    'customID': string
    /**
    * 昵称
    */
    'nickname': string
    /**
    * 头像
    */
    'avatar': string
    /**
    * 性别
    */
    'gender': number
    /**
    * 国家
    */
    'country': string
    /**
    * /省份
    */
    'state': string
    /**
    * 城市
    */
    'city': string
    /**
    * 签名
    */
    'signature': string
    /**
    * 绑定手机号
    */
    'mobilephone': string
    /**
    * 服务id
    */
    'serviceID': number
    /**
    * 设备唯一ID e.g UDID IMEI
    */
    'deviceID': string
    /**
    * 在线状态
    */
    'online': number
    /**
    * IM(微信)版本
    */
    'appVersion': string
    /**
    * 余额
    */
    'balance': number
    /**
    * 二维码
    */
    'qrcode': string
    /**
    * 好友数量
    */
    'contactCount': number
    /**
    * 扩展字段
    */
    'extra': string
    /**
    * 标签
    */
    'tags': string
    /**
    * 记录数据库时间
    */
    'ctime': number

    static discriminator = undefined

    static attributeTypeMap: Array<{ name: string, baseName: string, type: string }> = [
        {
            "name": "id",
            "baseName": "id",
            "type": "number"
        },
        {
            "name": "contactID",
            "baseName": "contactID",
            "type": "number"
        },
        {
            "name": "platformUid",
            "baseName": "platformUid",
            "type": "string"
        },
        {
            "name": "platformUid2",
            "baseName": "platformUid2",
            "type": "number"
        },
        {
            "name": "customID",
            "baseName": "customID",
            "type": "string"
        },
        {
            "name": "nickname",
            "baseName": "nickname",
            "type": "string"
        },
        {
            "name": "avatar",
            "baseName": "avatar",
            "type": "string"
        },
        {
            "name": "gender",
            "baseName": "gender",
            "type": "number"
        },
        {
            "name": "country",
            "baseName": "country",
            "type": "string"
        },
        {
            "name": "state",
            "baseName": "state",
            "type": "string"
        },
        {
            "name": "city",
            "baseName": "city",
            "type": "string"
        },
        {
            "name": "signature",
            "baseName": "signature",
            "type": "string"
        },
        {
            "name": "mobilephone",
            "baseName": "mobilephone",
            "type": "string"
        },
        {
            "name": "serviceID",
            "baseName": "serviceID",
            "type": "number"
        },
        {
            "name": "deviceID",
            "baseName": "deviceID",
            "type": "string"
        },
        {
            "name": "online",
            "baseName": "online",
            "type": "number"
        },
        {
            "name": "appVersion",
            "baseName": "appVersion",
            "type": "string"
        },
        {
            "name": "balance",
            "baseName": "balance",
            "type": "number"
        },
        {
            "name": "qrcode",
            "baseName": "qrcode",
            "type": "string"
        },
        {
            "name": "contactCount",
            "baseName": "contactCount",
            "type": "number"
        },
        {
            "name": "extra",
            "baseName": "extra",
            "type": "string"
        },
        {
            "name": "tags",
            "baseName": "tags",
            "type": "string"
        },
        {
            "name": "ctime",
            "baseName": "ctime",
            "type": "number"
        }]

    static getAttributeTypeMap() {
        return PBIMProfileDto.attributeTypeMap
    }
}

export class PBIMRelationDto {
    /**
    * 系统分配关系ID
    */
    'id': number
    /**
    * 运营号联系人ID
    */
    'profileContactID': number
    /**
    * 运营号平台Uid
    */
    'profilePlatformUid': string
    /**
    * 运营号平台自定义ID
    */
    'profileCustomID': string
    /**
    * 联系人ID
    */
    'contactID': number
    /**
    * 平台uid
    */
    'platformUid': string
    /**
    * 联系人平台自定义ID
    */
    'customID': string
    /**
    * 关系类型
    */
    'type': number
    /**
    * 关系方向
    */
    'direction': number
    /**
    * 请求好友时间
    */
    'requestTime': number
    /**
    * 请求方向
    */
    'requestBy': number
    /**
    * 通过好友时间
    */
    'approvedTime': number
    /**
    * 拒绝好友时间
    */
    'rejectedTime': number
    /**
    * 删除方向
    */
    'removedBy': number
    /**
    * 好友状态
    */
    'status': number
    /**
    * 手机号列表
    */
    'mobilephones': Array<string>
    /**
    * 备注
    */
    'alias': string
    /**
    * 标星
    */
    'favorite': number
    /**
    * 删除提示
    */
    'warnDelete': number
    /**
    * 拉黑名单提示
    */
    'warnBlacklist': number
    /**
    * 朋友圈是否可见
    */
    'timelineBlockByAccount': number
    /**
    * 拉黑
    */
    'timelineBlockByContact': number
    /**
    * 被拉黑
    */
    'blacklistByAccount': number
    /**
    * 添加好友方式、e.g 扫一扫、推荐
    */
    'blacklistByContact': number
    /**
    * 好友来源
    */
    'addSource': string
    /**
    * 来源类型
    */
    'sourceType': number
    /**
    * 服务ID
    */
    'serviceID': number
    /**
    * 扩展字段
    */
    'extra': string
    /**
    * 标签
    */
    'tags': string
    /**
    * 已定义描述
    */
    'customDescription': string
    /**
    * 数据库记录创建时间
    */
    'ctime': number

    static discriminator = undefined

    static attributeTypeMap: Array<{ name: string, baseName: string, type: string }> = [
        {
            "name": "id",
            "baseName": "id",
            "type": "number"
        },
        {
            "name": "profileContactID",
            "baseName": "profileContactID",
            "type": "number"
        },
        {
            "name": "profilePlatformUid",
            "baseName": "profilePlatformUid",
            "type": "string"
        },
        {
            "name": "profileCustomID",
            "baseName": "profileCustomID",
            "type": "string"
        },
        {
            "name": "contactID",
            "baseName": "contactID",
            "type": "number"
        },
        {
            "name": "platformUid",
            "baseName": "platformUid",
            "type": "string"
        },
        {
            "name": "customID",
            "baseName": "customID",
            "type": "string"
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "number"
        },
        {
            "name": "direction",
            "baseName": "direction",
            "type": "number"
        },
        {
            "name": "requestTime",
            "baseName": "requestTime",
            "type": "number"
        },
        {
            "name": "requestBy",
            "baseName": "requestBy",
            "type": "number"
        },
        {
            "name": "approvedTime",
            "baseName": "approvedTime",
            "type": "number"
        },
        {
            "name": "rejectedTime",
            "baseName": "rejectedTime",
            "type": "number"
        },
        {
            "name": "removedBy",
            "baseName": "removedBy",
            "type": "number"
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "number"
        },
        {
            "name": "mobilephones",
            "baseName": "mobilephones",
            "type": "Array<string>"
        },
        {
            "name": "alias",
            "baseName": "alias",
            "type": "string"
        },
        {
            "name": "favorite",
            "baseName": "favorite",
            "type": "number"
        },
        {
            "name": "warnDelete",
            "baseName": "warnDelete",
            "type": "number"
        },
        {
            "name": "warnBlacklist",
            "baseName": "warnBlacklist",
            "type": "number"
        },
        {
            "name": "timelineBlockByAccount",
            "baseName": "timelineBlockByAccount",
            "type": "number"
        },
        {
            "name": "timelineBlockByContact",
            "baseName": "timelineBlockByContact",
            "type": "number"
        },
        {
            "name": "blacklistByAccount",
            "baseName": "blacklistByAccount",
            "type": "number"
        },
        {
            "name": "blacklistByContact",
            "baseName": "blacklistByContact",
            "type": "number"
        },
        {
            "name": "addSource",
            "baseName": "addSource",
            "type": "string"
        },
        {
            "name": "sourceType",
            "baseName": "sourceType",
            "type": "number"
        },
        {
            "name": "serviceID",
            "baseName": "serviceID",
            "type": "number"
        },
        {
            "name": "extra",
            "baseName": "extra",
            "type": "string"
        },
        {
            "name": "tags",
            "baseName": "tags",
            "type": "string"
        },
        {
            "name": "customDescription",
            "baseName": "customDescription",
            "type": "string"
        },
        {
            "name": "ctime",
            "baseName": "ctime",
            "type": "number"
        }]

    static getAttributeTypeMap() {
        return PBIMRelationDto.attributeTypeMap
    }
}

export class PBIMSendBatchMessageReq {
    /**
    * 服务ID
    */
    'serviceID': number
    /**
    * 发送者平台自定义ID
    */
    'fromCustomID': string
    /**
    * 批量接收者平台自定义ID
    */
    'toCustomIDs': Array<string>
    /**
    * 消息类型 文本, 1 语音, 2 图片, 3 视频, 4 名片, 5 链接, 6 红包, 7 转账, 8 地址, 11 好友请求, 12 动画, 13 语音聊天, 14 视频聊天, 15 模板消息, 18 通知, 10000 
    */
    'type': number
    /**
    * 消息内容
    */
    'content': string
    /**
    * 群组消息@的人ID列表
    */
    'atMembers': Array<string>
    /**
    * 会话类型 1 P2P 2 群组
    */
    'sessionType': number

    static discriminator = undefined

    static attributeTypeMap: Array<{ name: string, baseName: string, type: string }> = [
        {
            "name": "serviceID",
            "baseName": "serviceID",
            "type": "number"
        },
        {
            "name": "fromCustomID",
            "baseName": "fromCustomID",
            "type": "string"
        },
        {
            "name": "toCustomIDs",
            "baseName": "toCustomIDs",
            "type": "Array<string>"
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "number"
        },
        {
            "name": "content",
            "baseName": "content",
            "type": "string"
        },
        {
            "name": "atMembers",
            "baseName": "atMembers",
            "type": "Array<string>"
        },
        {
            "name": "sessionType",
            "baseName": "sessionType",
            "type": "number"
        }]

    static getAttributeTypeMap() {
        return PBIMSendBatchMessageReq.attributeTypeMap
    }
}

export class PBIMSendMessageReq {
    /**
    * 服务ID
    */
    'serviceID': number
    /**
    * 发送者平台自定义ID
    */
    'fromCustomID': string
    /**
    * 接收者平台自定义ID
    */
    'toCustomID': string
    /**
    * 消息类型 文本, 1 语音, 2 图片, 3 视频, 4 名片, 5 链接, 6 红包, 7 转账, 8 地址, 11 好友请求, 12 动画, 13 语音聊天, 14 视频聊天, 15 模板消息, 18 通知, 10000 
    */
    'type': number
    /**
    * 消息内容
    */
    'content': string
    /**
    * 群组消息@的人ID列表
    */
    'atMembers': Array<string>
    /**
    * 会话类型 1 P2P 2 群组
    */
    'sessionType': number

    static discriminator = undefined

    static attributeTypeMap: Array<{ name: string, baseName: string, type: string }> = [
        {
            "name": "serviceID",
            "baseName": "serviceID",
            "type": "number"
        },
        {
            "name": "fromCustomID",
            "baseName": "fromCustomID",
            "type": "string"
        },
        {
            "name": "toCustomID",
            "baseName": "toCustomID",
            "type": "string"
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "number"
        },
        {
            "name": "content",
            "baseName": "content",
            "type": "string"
        },
        {
            "name": "atMembers",
            "baseName": "atMembers",
            "type": "Array<string>"
        },
        {
            "name": "sessionType",
            "baseName": "sessionType",
            "type": "number"
        }]

    static getAttributeTypeMap() {
        return PBIMSendMessageReq.attributeTypeMap
    }
}

export class PBIMSendTemplateMessageReq {
    /**
    * 服务ID
    */
    'serviceID': number
    /**
    * 发送者平台自定义ID
    */
    'fromCustomID': string
    /**
    * 批量接收者平台自定义ID
    */
    'toCustomIDs': Array<string>
    /**
    * 群组消息@的人ID列表
    */
    'atMembers': Array<string>
    /**
    * 会话类型 1 P2P 2 群组
    */
    'sessionType': number
    /**
    * 模板消息
    */
    'templateMsgID': number

    static discriminator = undefined

    static attributeTypeMap: Array<{ name: string, baseName: string, type: string }> = [
        {
            "name": "serviceID",
            "baseName": "serviceID",
            "type": "number"
        },
        {
            "name": "fromCustomID",
            "baseName": "fromCustomID",
            "type": "string"
        },
        {
            "name": "toCustomIDs",
            "baseName": "toCustomIDs",
            "type": "Array<string>"
        },
        {
            "name": "atMembers",
            "baseName": "atMembers",
            "type": "Array<string>"
        },
        {
            "name": "sessionType",
            "baseName": "sessionType",
            "type": "number"
        },
        {
            "name": "templateMsgID",
            "baseName": "templateMsgID",
            "type": "number"
        }]

    static getAttributeTypeMap() {
        return PBIMSendTemplateMessageReq.attributeTypeMap
    }
}

export class PBIMSendTimelineReq {
    /**
    * 服务ID
    */
    'serviceID': number
    /**
    * 平台自定义ID
    */
    'customID': string
    /**
    * 消息类型 纯文字, 1 图片+文件, 2 视频+文件, 3 
    */
    'type': number
    /**
    * timeline内容
    */
    'content': string
    /**
    * 相关链接
    */
    'urls': Array<string>

    static discriminator = undefined

    static attributeTypeMap: Array<{ name: string, baseName: string, type: string }> = [
        {
            "name": "serviceID",
            "baseName": "serviceID",
            "type": "number"
        },
        {
            "name": "customID",
            "baseName": "customID",
            "type": "string"
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "number"
        },
        {
            "name": "content",
            "baseName": "content",
            "type": "string"
        },
        {
            "name": "urls",
            "baseName": "urls",
            "type": "Array<string>"
        }]

    static getAttributeTypeMap() {
        return PBIMSendTimelineReq.attributeTypeMap
    }
}

export class PBIMSetGroupDescReq {
    /**
    * 服务ID
    */
    'serviceID': number
    /**
    * 平台自定义ID
    */
    'customID': string
    /**
    * 平台群ID
    */
    'platformGid': string
    /**
    * 群备注
    */
    'groupDesc': string

    static discriminator = undefined

    static attributeTypeMap: Array<{ name: string, baseName: string, type: string }> = [
        {
            "name": "serviceID",
            "baseName": "serviceID",
            "type": "number"
        },
        {
            "name": "customID",
            "baseName": "customID",
            "type": "string"
        },
        {
            "name": "platformGid",
            "baseName": "platformGid",
            "type": "string"
        },
        {
            "name": "groupDesc",
            "baseName": "groupDesc",
            "type": "string"
        }]

    static getAttributeTypeMap() {
        return PBIMSetGroupDescReq.attributeTypeMap
    }
}

export class PBIMSetGroupNameReq {
    /**
    * 服务ID
    */
    'serviceID': number
    /**
    * 平台自定义ID
    */
    'customID': string
    /**
    * 平台群ID
    */
    'platformGid': string
    /**
    * 群名称
    */
    'groupName': string

    static discriminator = undefined

    static attributeTypeMap: Array<{ name: string, baseName: string, type: string }> = [
        {
            "name": "serviceID",
            "baseName": "serviceID",
            "type": "number"
        },
        {
            "name": "customID",
            "baseName": "customID",
            "type": "string"
        },
        {
            "name": "platformGid",
            "baseName": "platformGid",
            "type": "string"
        },
        {
            "name": "groupName",
            "baseName": "groupName",
            "type": "string"
        }]

    static getAttributeTypeMap() {
        return PBIMSetGroupNameReq.attributeTypeMap
    }
}

export class PBIMSystemDto {
    /**
    * 系统分配ID
    */
    'id': number
    /**
    * 控制配置的内容
    */
    'value': string
    /**
    * 配置类型
    */
    'type': string
    /**
    * 创建时间
    */
    'ctime': number
    /**
    * 服务ID
    */
    'serviceID': number
    /**
    * 扩展字段
    */
    'extra': string

    static discriminator = undefined

    static attributeTypeMap: Array<{ name: string, baseName: string, type: string }> = [
        {
            "name": "id",
            "baseName": "id",
            "type": "number"
        },
        {
            "name": "value",
            "baseName": "value",
            "type": "string"
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "string"
        },
        {
            "name": "ctime",
            "baseName": "ctime",
            "type": "number"
        },
        {
            "name": "serviceID",
            "baseName": "serviceID",
            "type": "number"
        },
        {
            "name": "extra",
            "baseName": "extra",
            "type": "string"
        }]

    static getAttributeTypeMap() {
        return PBIMSystemDto.attributeTypeMap
    }
}

export class PBIMTemplateMessageDto {
    /**
    * 系统分配ID
    */
    'id': number
    /**
    * 消息类型 文本, 1 语音, 2 图片, 3 视频, 4 名片, 5 链接, 6 红包, 7 转账, 8 地址, 11 好友请求, 12 动画, 13 语音聊天, 14 视频聊天, 15 通知, 10000 
    */
    'messageType': number
    /**
    * 平台消息类型
    */
    'platformMsgType': number
    /**
    * 内容
    */
    'content': string
    /**
    * 数据库记录创建时间
    */
    'ctime': number
    /**
    * 服务ID
    */
    'serviceID': number
    /**
    * 扩展字段
    */
    'extra': string
    /**
    * 标签
    */
    'tags': string
    /**
    * 备注
    */
    'desc': string

    static discriminator = undefined

    static attributeTypeMap: Array<{ name: string, baseName: string, type: string }> = [
        {
            "name": "id",
            "baseName": "id",
            "type": "number"
        },
        {
            "name": "messageType",
            "baseName": "messageType",
            "type": "number"
        },
        {
            "name": "platformMsgType",
            "baseName": "platformMsgType",
            "type": "number"
        },
        {
            "name": "content",
            "baseName": "content",
            "type": "string"
        },
        {
            "name": "ctime",
            "baseName": "ctime",
            "type": "number"
        },
        {
            "name": "serviceID",
            "baseName": "serviceID",
            "type": "number"
        },
        {
            "name": "extra",
            "baseName": "extra",
            "type": "string"
        },
        {
            "name": "tags",
            "baseName": "tags",
            "type": "string"
        },
        {
            "name": "desc",
            "baseName": "desc",
            "type": "string"
        }]

    static getAttributeTypeMap() {
        return PBIMTemplateMessageDto.attributeTypeMap
    }
}

export class PBIMTimelineComment {
    /**
    * 平台Uid
    */
    'platformUid': string
    /**
    * 平台自定义ID
    */
    'customID': string
    /**
    * 评论人昵称
    */
    'nickname': string
    /**
    * 评论内容
    */
    'content': string
    /**
    * 评论时间
    */
    'commentTime': number
    /**
    * 评论ID
    */
    'commentID': string
    /**
    * 回复的评论ID
    */
    'refCommentID': string

    static discriminator = undefined

    static attributeTypeMap: Array<{ name: string, baseName: string, type: string }> = [
        {
            "name": "platformUid",
            "baseName": "platformUid",
            "type": "string"
        },
        {
            "name": "customID",
            "baseName": "customID",
            "type": "string"
        },
        {
            "name": "nickname",
            "baseName": "nickname",
            "type": "string"
        },
        {
            "name": "content",
            "baseName": "content",
            "type": "string"
        },
        {
            "name": "commentTime",
            "baseName": "commentTime",
            "type": "number"
        },
        {
            "name": "commentID",
            "baseName": "commentID",
            "type": "string"
        },
        {
            "name": "refCommentID",
            "baseName": "refCommentID",
            "type": "string"
        }]

    static getAttributeTypeMap() {
        return PBIMTimelineComment.attributeTypeMap
    }
}

export class PBIMTimelineDto {
    /**
    * timeline ID
    */
    'id': number
    /**
    * 联系人ID
    */
    'contactID': number
    /**
    * 平台uid
    */
    'platformUid': string
    /**
    * 平台自定义ID
    */
    'customID': string
    /**
    * 联系人昵称
    */
    'nickname': string
    /**
    * platform timeline  ID
    */
    'platformTid': string
    /**
    * 运营号ID
    */
    'profileContactID': number
    /**
    * 运营号平台UID
    */
    'profilePlatformUid': string
    /**
    * 运营号平台自定义ID
    */
    'profileCustomID': string
    /**
    * 位置
    */
    'location': PBIMGeoTag
    /**
    * 类型, e.g 文本 图片 视频
    */
    'type': number
    /**
    * 是否私密
    */
    'isPrivate': number
    /**
    * 是否运营号
    */
    'isProfile': number
    /**
    * 内容
    */
    'content': string
    /**
    * 发布时间
    */
    'publishTime': number
    /**
    * 数据库记录创建时间
    */
    'ctime': number
    /**
    * 修改时间
    */
    'mtime': number
    /**
    * 图片等
    */
    'mediaItems': Array<PBIMMediaItem>
    /**
    * 点赞人
    */
    'likeUsers': Array<PBIMTimelineLike>
    /**
    * 评论数据
    */
    'comments': Array<PBIMTimelineComment>
    /**
    * 服务id
    */
    'serviceID': number
    /**
    * 服务id
    */
    'extra': string
    /**
    * 标签
    */
    'tags': string

    static discriminator = undefined

    static attributeTypeMap: Array<{ name: string, baseName: string, type: string }> = [
        {
            "name": "id",
            "baseName": "id",
            "type": "number"
        },
        {
            "name": "contactID",
            "baseName": "contactID",
            "type": "number"
        },
        {
            "name": "platformUid",
            "baseName": "platformUid",
            "type": "string"
        },
        {
            "name": "customID",
            "baseName": "customID",
            "type": "string"
        },
        {
            "name": "nickname",
            "baseName": "nickname",
            "type": "string"
        },
        {
            "name": "platformTid",
            "baseName": "platformTid",
            "type": "string"
        },
        {
            "name": "profileContactID",
            "baseName": "profileContactID",
            "type": "number"
        },
        {
            "name": "profilePlatformUid",
            "baseName": "profilePlatformUid",
            "type": "string"
        },
        {
            "name": "profileCustomID",
            "baseName": "profileCustomID",
            "type": "string"
        },
        {
            "name": "location",
            "baseName": "location",
            "type": "PBIMGeoTag"
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "number"
        },
        {
            "name": "isPrivate",
            "baseName": "isPrivate",
            "type": "number"
        },
        {
            "name": "isProfile",
            "baseName": "isProfile",
            "type": "number"
        },
        {
            "name": "content",
            "baseName": "content",
            "type": "string"
        },
        {
            "name": "publishTime",
            "baseName": "publishTime",
            "type": "number"
        },
        {
            "name": "ctime",
            "baseName": "ctime",
            "type": "number"
        },
        {
            "name": "mtime",
            "baseName": "mtime",
            "type": "number"
        },
        {
            "name": "mediaItems",
            "baseName": "mediaItems",
            "type": "Array<PBIMMediaItem>"
        },
        {
            "name": "likeUsers",
            "baseName": "likeUsers",
            "type": "Array<PBIMTimelineLike>"
        },
        {
            "name": "comments",
            "baseName": "comments",
            "type": "Array<PBIMTimelineComment>"
        },
        {
            "name": "serviceID",
            "baseName": "serviceID",
            "type": "number"
        },
        {
            "name": "extra",
            "baseName": "extra",
            "type": "string"
        },
        {
            "name": "tags",
            "baseName": "tags",
            "type": "string"
        }]

    static getAttributeTypeMap() {
        return PBIMTimelineDto.attributeTypeMap
    }
}

export class PBIMTimelineLike {
    /**
    * 平台Uid
    */
    'platformUid': string
    /**
    * 平台自定义ID
    */
    'customID': string
    /**
    * 点赞人昵称
    */
    'nickname': string
    /**
    * 点赞时间
    */
    'likeTime': number

    static discriminator = undefined

    static attributeTypeMap: Array<{ name: string, baseName: string, type: string }> = [
        {
            "name": "platformUid",
            "baseName": "platformUid",
            "type": "string"
        },
        {
            "name": "customID",
            "baseName": "customID",
            "type": "string"
        },
        {
            "name": "nickname",
            "baseName": "nickname",
            "type": "string"
        },
        {
            "name": "likeTime",
            "baseName": "likeTime",
            "type": "number"
        }]

    static getAttributeTypeMap() {
        return PBIMTimelineLike.attributeTypeMap
    }
}

export class PBIMUpdateGroupExtraReq {
    /**
    * 服务ID
    */
    'serviceID': number
    /**
    * 平台群ID
    */
    'platformGid': string
    /**
    * 运营号平台Uid
    */
    'profilePlatformUid': string
    /**
    * 设置的项
    */
    'key': string
    /**
    * 对应项的值 json
    */
    'value': string

    static discriminator = undefined

    static attributeTypeMap: Array<{ name: string, baseName: string, type: string }> = [
        {
            "name": "serviceID",
            "baseName": "serviceID",
            "type": "number"
        },
        {
            "name": "platformGid",
            "baseName": "platformGid",
            "type": "string"
        },
        {
            "name": "profilePlatformUid",
            "baseName": "profilePlatformUid",
            "type": "string"
        },
        {
            "name": "key",
            "baseName": "key",
            "type": "string"
        },
        {
            "name": "value",
            "baseName": "value",
            "type": "string"
        }]

    static getAttributeTypeMap() {
        return PBIMUpdateGroupExtraReq.attributeTypeMap
    }
}

export class PBIMUpdateProfileExtraReq {
    /**
    * 服务ID
    */
    'serviceID': number
    /**
    * 运营号联系人ID
    */
    'profileContactID': number
    /**
    * 运营号平台Uid
    */
    'profilePlatformUid': string
    /**
    * 设置的项
    */
    'key': string
    /**
    * 对应项的值 json
    */
    'value': string

    static discriminator = undefined

    static attributeTypeMap: Array<{ name: string, baseName: string, type: string }> = [
        {
            "name": "serviceID",
            "baseName": "serviceID",
            "type": "number"
        },
        {
            "name": "profileContactID",
            "baseName": "profileContactID",
            "type": "number"
        },
        {
            "name": "profilePlatformUid",
            "baseName": "profilePlatformUid",
            "type": "string"
        },
        {
            "name": "key",
            "baseName": "key",
            "type": "string"
        },
        {
            "name": "value",
            "baseName": "value",
            "type": "string"
        }]

    static getAttributeTypeMap() {
        return PBIMUpdateProfileExtraReq.attributeTypeMap
    }
}

export class PageQuery {
    /**
    * 查询条件列表
    */
    'filters': Array<Filter>
    /**
    * 页码，从0开始
    */
    'pageNo': number
    /**
    * 每页记录数
    */
    'pageSize': number
    /**
    * 对ctime排序，>= 0 升序， <0 降序
    */
    'direction': number

    static discriminator = undefined

    static attributeTypeMap: Array<{ name: string, baseName: string, type: string }> = [
        {
            "name": "filters",
            "baseName": "filters",
            "type": "Array<Filter>"
        },
        {
            "name": "pageNo",
            "baseName": "pageNo",
            "type": "number"
        },
        {
            "name": "pageSize",
            "baseName": "pageSize",
            "type": "number"
        },
        {
            "name": "direction",
            "baseName": "direction",
            "type": "number"
        }]

    static getAttributeTypeMap() {
        return PageQuery.attributeTypeMap
    }
}

export class ProfileCreate {
    /**
    * 平台uid
    */
    'platformUid': string
    /**
    * 平台整型uid
    */
    'platformUid2': number
    /**
    * 平台自定义id
    */
    'customID': string
    /**
    * 昵称
    */
    'nickname': string
    /**
    * 头像
    */
    'avatar': string
    /**
    * 性别
    */
    'gender': number
    /**
    * 国家
    */
    'country': string
    /**
    * /省份
    */
    'state': string
    /**
    * 城市
    */
    'city': string
    /**
    * 签名
    */
    'signature': string
    /**
    * 绑定手机号
    */
    'mobilephone': string
    /**
    * 服务id
    */
    'serviceID': number
    /**
    * 设备唯一ID e.g UDID IMEI
    */
    'deviceID': string
    /**
    * 在线状态
    */
    'online': number
    /**
    * IM(微信)版本
    */
    'appVersion': string
    /**
    * 余额
    */
    'balance': number
    /**
    * 二维码
    */
    'qrcode': string
    /**
    * 好友数量
    */
    'contactCount': number
    /**
    * 扩展字段
    */
    'extra': string
    /**
    * 标签
    */
    'tags': string

    static discriminator = undefined

    static attributeTypeMap: Array<{ name: string, baseName: string, type: string }> = [
        {
            "name": "platformUid",
            "baseName": "platformUid",
            "type": "string"
        },
        {
            "name": "platformUid2",
            "baseName": "platformUid2",
            "type": "number"
        },
        {
            "name": "customID",
            "baseName": "customID",
            "type": "string"
        },
        {
            "name": "nickname",
            "baseName": "nickname",
            "type": "string"
        },
        {
            "name": "avatar",
            "baseName": "avatar",
            "type": "string"
        },
        {
            "name": "gender",
            "baseName": "gender",
            "type": "number"
        },
        {
            "name": "country",
            "baseName": "country",
            "type": "string"
        },
        {
            "name": "state",
            "baseName": "state",
            "type": "string"
        },
        {
            "name": "city",
            "baseName": "city",
            "type": "string"
        },
        {
            "name": "signature",
            "baseName": "signature",
            "type": "string"
        },
        {
            "name": "mobilephone",
            "baseName": "mobilephone",
            "type": "string"
        },
        {
            "name": "serviceID",
            "baseName": "serviceID",
            "type": "number"
        },
        {
            "name": "deviceID",
            "baseName": "deviceID",
            "type": "string"
        },
        {
            "name": "online",
            "baseName": "online",
            "type": "number"
        },
        {
            "name": "appVersion",
            "baseName": "appVersion",
            "type": "string"
        },
        {
            "name": "balance",
            "baseName": "balance",
            "type": "number"
        },
        {
            "name": "qrcode",
            "baseName": "qrcode",
            "type": "string"
        },
        {
            "name": "contactCount",
            "baseName": "contactCount",
            "type": "number"
        },
        {
            "name": "extra",
            "baseName": "extra",
            "type": "string"
        },
        {
            "name": "tags",
            "baseName": "tags",
            "type": "string"
        }]

    static getAttributeTypeMap() {
        return ProfileCreate.attributeTypeMap
    }
}

export class RelationCreate {
    /**
    * 运营号平台Uid
    */
    'profilePlatformUid': string
    /**
    * 运营号平台自定义ID
    */
    'profileCustomID': string
    /**
    * 平台uid
    */
    'platformUid': string
    /**
    * 联系人平台自定义ID
    */
    'customID': string
    /**
    * 关系类型
    */
    'type': number
    /**
    * 关系方向
    */
    'direction': number
    /**
    * 请求好友时间
    */
    'requestTime': number
    /**
    * 请求方向
    */
    'requestBy': number
    /**
    * 通过好友时间
    */
    'approvedTime': number
    /**
    * 拒绝好友时间
    */
    'rejectedTime': number
    /**
    * 删除方向
    */
    'removedBy': number
    /**
    * 好友状态
    */
    'status': number
    /**
    * 手机号列表
    */
    'mobilephones': Array<string>
    /**
    * 备注
    */
    'alias': string
    /**
    * 标星
    */
    'favorite': number
    /**
    * 删除提示
    */
    'warnDelete': number
    /**
    * 拉黑名单提示
    */
    'warnBlacklist': number
    /**
    * 朋友圈是否可见
    */
    'timelineBlockByAccount': number
    /**
    * 拉黑
    */
    'timelineBlockByContact': number
    /**
    * 被拉黑
    */
    'blacklistByAccount': number
    /**
    * 添加好友方式、e.g 扫一扫、推荐
    */
    'blacklistByContact': number
    /**
    * 好友来源
    */
    'addSource': string
    /**
    * 来源类型
    */
    'sourceType': number
    /**
    * 服务ID
    */
    'serviceID': number
    /**
    * 扩展字段
    */
    'extra': string
    /**
    * 标签
    */
    'tags': string
    /**
    * 自定义描述
    */
    'customDescription': string

    static discriminator = undefined

    static attributeTypeMap: Array<{ name: string, baseName: string, type: string }> = [
        {
            "name": "profilePlatformUid",
            "baseName": "profilePlatformUid",
            "type": "string"
        },
        {
            "name": "profileCustomID",
            "baseName": "profileCustomID",
            "type": "string"
        },
        {
            "name": "platformUid",
            "baseName": "platformUid",
            "type": "string"
        },
        {
            "name": "customID",
            "baseName": "customID",
            "type": "string"
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "number"
        },
        {
            "name": "direction",
            "baseName": "direction",
            "type": "number"
        },
        {
            "name": "requestTime",
            "baseName": "requestTime",
            "type": "number"
        },
        {
            "name": "requestBy",
            "baseName": "requestBy",
            "type": "number"
        },
        {
            "name": "approvedTime",
            "baseName": "approvedTime",
            "type": "number"
        },
        {
            "name": "rejectedTime",
            "baseName": "rejectedTime",
            "type": "number"
        },
        {
            "name": "removedBy",
            "baseName": "removedBy",
            "type": "number"
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "number"
        },
        {
            "name": "mobilephones",
            "baseName": "mobilephones",
            "type": "Array<string>"
        },
        {
            "name": "alias",
            "baseName": "alias",
            "type": "string"
        },
        {
            "name": "favorite",
            "baseName": "favorite",
            "type": "number"
        },
        {
            "name": "warnDelete",
            "baseName": "warnDelete",
            "type": "number"
        },
        {
            "name": "warnBlacklist",
            "baseName": "warnBlacklist",
            "type": "number"
        },
        {
            "name": "timelineBlockByAccount",
            "baseName": "timelineBlockByAccount",
            "type": "number"
        },
        {
            "name": "timelineBlockByContact",
            "baseName": "timelineBlockByContact",
            "type": "number"
        },
        {
            "name": "blacklistByAccount",
            "baseName": "blacklistByAccount",
            "type": "number"
        },
        {
            "name": "blacklistByContact",
            "baseName": "blacklistByContact",
            "type": "number"
        },
        {
            "name": "addSource",
            "baseName": "addSource",
            "type": "string"
        },
        {
            "name": "sourceType",
            "baseName": "sourceType",
            "type": "number"
        },
        {
            "name": "serviceID",
            "baseName": "serviceID",
            "type": "number"
        },
        {
            "name": "extra",
            "baseName": "extra",
            "type": "string"
        },
        {
            "name": "tags",
            "baseName": "tags",
            "type": "string"
        },
        {
            "name": "customDescription",
            "baseName": "customDescription",
            "type": "string"
        }]

    static getAttributeTypeMap() {
        return RelationCreate.attributeTypeMap
    }
}

export class SystemCreate {
    /**
    * 控制配置的内容
    */
    'value': string
    /**
    * 配置类型
    */
    'type': string

    static discriminator = undefined

    static attributeTypeMap: Array<{ name: string, baseName: string, type: string }> = [
        {
            "name": "value",
            "baseName": "value",
            "type": "string"
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "string"
        }]

    static getAttributeTypeMap() {
        return SystemCreate.attributeTypeMap
    }
}

export class TemplateMessageCreate {
    /**
    * 消息类型 文本, 1 语音, 2 图片, 3 视频, 4 名片, 5 链接, 6 红包, 7 转账, 8 地址, 11 好友请求, 12 动画, 13 语音聊天, 14 视频聊天, 15 通知, 10000 
    */
    'messageType': number
    /**
    * 平台消息类型
    */
    'platformMsgType': number
    /**
    * 内容
    */
    'content': string
    /**
    * 服务ID
    */
    'serviceID': number
    /**
    * 扩展字段
    */
    'extra': string
    /**
    * 标签
    */
    'tags': string
    /**
    * 备注
    */
    'desc': string

    static discriminator = undefined

    static attributeTypeMap: Array<{ name: string, baseName: string, type: string }> = [
        {
            "name": "messageType",
            "baseName": "messageType",
            "type": "number"
        },
        {
            "name": "platformMsgType",
            "baseName": "platformMsgType",
            "type": "number"
        },
        {
            "name": "content",
            "baseName": "content",
            "type": "string"
        },
        {
            "name": "serviceID",
            "baseName": "serviceID",
            "type": "number"
        },
        {
            "name": "extra",
            "baseName": "extra",
            "type": "string"
        },
        {
            "name": "tags",
            "baseName": "tags",
            "type": "string"
        },
        {
            "name": "desc",
            "baseName": "desc",
            "type": "string"
        }]

    static getAttributeTypeMap() {
        return TemplateMessageCreate.attributeTypeMap
    }
}

export class TimelineCreate {
    /**
    * 平台uid
    */
    'platformUid': string
    /**
    * 平台自定义ID
    */
    'customID': string
    /**
    * platform timeline  ID
    */
    'platformTid': string
    /**
    * 运营号平台UID
    */
    'profilePlatformUid': string
    /**
    * 运营号平台自定义ID
    */
    'profileCustomID': string
    /**
    * 位置
    */
    'location': PBIMGeoTag
    /**
    * 类型, e.g 文本 图片 视频
    */
    'type': number
    /**
    * 是否私密
    */
    'isPrivate': number
    /**
    * 是否运营号
    */
    'isProfile': number
    /**
    * 内容
    */
    'content': string
    /**
    * 发布时间
    */
    'publishTime': number
    /**
    * 图片等
    */
    'mediaItems': Array<PBIMMediaItem>
    /**
    * 点赞人
    */
    'likeUsers': Array<PBIMTimelineLike>
    /**
    * 评论数据
    */
    'comments': Array<PBIMTimelineComment>
    /**
    * 服务id
    */
    'serviceID': number
    /**
    * 服务id
    */
    'extra': string
    /**
    * 标签
    */
    'tags': string

    static discriminator = undefined

    static attributeTypeMap: Array<{ name: string, baseName: string, type: string }> = [
        {
            "name": "platformUid",
            "baseName": "platformUid",
            "type": "string"
        },
        {
            "name": "customID",
            "baseName": "customID",
            "type": "string"
        },
        {
            "name": "platformTid",
            "baseName": "platformTid",
            "type": "string"
        },
        {
            "name": "profilePlatformUid",
            "baseName": "profilePlatformUid",
            "type": "string"
        },
        {
            "name": "profileCustomID",
            "baseName": "profileCustomID",
            "type": "string"
        },
        {
            "name": "location",
            "baseName": "location",
            "type": "PBIMGeoTag"
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "number"
        },
        {
            "name": "isPrivate",
            "baseName": "isPrivate",
            "type": "number"
        },
        {
            "name": "isProfile",
            "baseName": "isProfile",
            "type": "number"
        },
        {
            "name": "content",
            "baseName": "content",
            "type": "string"
        },
        {
            "name": "publishTime",
            "baseName": "publishTime",
            "type": "number"
        },
        {
            "name": "mediaItems",
            "baseName": "mediaItems",
            "type": "Array<PBIMMediaItem>"
        },
        {
            "name": "likeUsers",
            "baseName": "likeUsers",
            "type": "Array<PBIMTimelineLike>"
        },
        {
            "name": "comments",
            "baseName": "comments",
            "type": "Array<PBIMTimelineComment>"
        },
        {
            "name": "serviceID",
            "baseName": "serviceID",
            "type": "number"
        },
        {
            "name": "extra",
            "baseName": "extra",
            "type": "string"
        },
        {
            "name": "tags",
            "baseName": "tags",
            "type": "string"
        }]

    static getAttributeTypeMap() {
        return TimelineCreate.attributeTypeMap
    }
}


let enumsMap: { [index: string]: any } = {
}

let typeMap: { [index: string]: any } = {
    "ActionCreate": ActionCreate,
    "AddressCreate": AddressCreate,
    "ContactCreate": ContactCreate,
    "ControlCreate": ControlCreate,
    "DupContact": DupContact,
    "DupProfile": DupProfile,
    "Filter": Filter,
    "FundCreate": FundCreate,
    "GroupCreate": GroupCreate,
    "GroupMemberCreate": GroupMemberCreate,
    "InlineResponse200": InlineResponse200,
    "InlineResponse2001": InlineResponse2001,
    "InlineResponse20010": InlineResponse20010,
    "InlineResponse20010Data": InlineResponse20010Data,
    "InlineResponse20011": InlineResponse20011,
    "InlineResponse20011Data": InlineResponse20011Data,
    "InlineResponse20012": InlineResponse20012,
    "InlineResponse20013": InlineResponse20013,
    "InlineResponse20014": InlineResponse20014,
    "InlineResponse20014Data": InlineResponse20014Data,
    "InlineResponse20015": InlineResponse20015,
    "InlineResponse20015Data": InlineResponse20015Data,
    "InlineResponse20016": InlineResponse20016,
    "InlineResponse20016Data": InlineResponse20016Data,
    "InlineResponse20017": InlineResponse20017,
    "InlineResponse20018": InlineResponse20018,
    "InlineResponse20018Data": InlineResponse20018Data,
    "InlineResponse20019": InlineResponse20019,
    "InlineResponse2001Data": InlineResponse2001Data,
    "InlineResponse2002": InlineResponse2002,
    "InlineResponse20020": InlineResponse20020,
    "InlineResponse20020Data": InlineResponse20020Data,
    "InlineResponse20021": InlineResponse20021,
    "InlineResponse20022": InlineResponse20022,
    "InlineResponse20022Data": InlineResponse20022Data,
    "InlineResponse20023": InlineResponse20023,
    "InlineResponse20024": InlineResponse20024,
    "InlineResponse20025": InlineResponse20025,
    "InlineResponse20025Data": InlineResponse20025Data,
    "InlineResponse20026": InlineResponse20026,
    "InlineResponse20026Data": InlineResponse20026Data,
    "InlineResponse20027": InlineResponse20027,
    "InlineResponse20027Data": InlineResponse20027Data,
    "InlineResponse20028": InlineResponse20028,
    "InlineResponse20029": InlineResponse20029,
    "InlineResponse20029Data": InlineResponse20029Data,
    "InlineResponse2003": InlineResponse2003,
    "InlineResponse20030": InlineResponse20030,
    "InlineResponse20030Data": InlineResponse20030Data,
    "InlineResponse20031": InlineResponse20031,
    "InlineResponse20032": InlineResponse20032,
    "InlineResponse20032Data": InlineResponse20032Data,
    "InlineResponse20033": InlineResponse20033,
    "InlineResponse20033Data": InlineResponse20033Data,
    "InlineResponse20034": InlineResponse20034,
    "InlineResponse20035": InlineResponse20035,
    "InlineResponse20035Data": InlineResponse20035Data,
    "InlineResponse20036": InlineResponse20036,
    "InlineResponse20036Data": InlineResponse20036Data,
    "InlineResponse20037": InlineResponse20037,
    "InlineResponse20038": InlineResponse20038,
    "InlineResponse20038Data": InlineResponse20038Data,
    "InlineResponse20039": InlineResponse20039,
    "InlineResponse20039Data": InlineResponse20039Data,
    "InlineResponse2004": InlineResponse2004,
    "InlineResponse2005": InlineResponse2005,
    "InlineResponse2006": InlineResponse2006,
    "InlineResponse2006Data": InlineResponse2006Data,
    "InlineResponse2007": InlineResponse2007,
    "InlineResponse2008": InlineResponse2008,
    "InlineResponse2008Data": InlineResponse2008Data,
    "InlineResponse2009": InlineResponse2009,
    "InlineResponse2009Data": InlineResponse2009Data,
    "MessageCreate": MessageCreate,
    "PBIMActionDto": PBIMActionDto,
    "PBIMAddFriendReq": PBIMAddFriendReq,
    "PBIMAddGroupMembersReq": PBIMAddGroupMembersReq,
    "PBIMAddressDto": PBIMAddressDto,
    "PBIMApproveAllFriendReq": PBIMApproveAllFriendReq,
    "PBIMContactDto": PBIMContactDto,
    "PBIMControlDto": PBIMControlDto,
    "PBIMCreateGroupReq": PBIMCreateGroupReq,
    "PBIMDeleteGroupMembersReq": PBIMDeleteGroupMembersReq,
    "PBIMFundDto": PBIMFundDto,
    "PBIMGeoTag": PBIMGeoTag,
    "PBIMGroupDto": PBIMGroupDto,
    "PBIMGroupMemberDto": PBIMGroupMemberDto,
    "PBIMJoinGroupByInviteReq": PBIMJoinGroupByInviteReq,
    "PBIMMediaItem": PBIMMediaItem,
    "PBIMMessageDto": PBIMMessageDto,
    "PBIMProfileDto": PBIMProfileDto,
    "PBIMRelationDto": PBIMRelationDto,
    "PBIMSendBatchMessageReq": PBIMSendBatchMessageReq,
    "PBIMSendMessageReq": PBIMSendMessageReq,
    "PBIMSendTemplateMessageReq": PBIMSendTemplateMessageReq,
    "PBIMSendTimelineReq": PBIMSendTimelineReq,
    "PBIMSetGroupDescReq": PBIMSetGroupDescReq,
    "PBIMSetGroupNameReq": PBIMSetGroupNameReq,
    "PBIMSystemDto": PBIMSystemDto,
    "PBIMTemplateMessageDto": PBIMTemplateMessageDto,
    "PBIMTimelineComment": PBIMTimelineComment,
    "PBIMTimelineDto": PBIMTimelineDto,
    "PBIMTimelineLike": PBIMTimelineLike,
    "PBIMUpdateGroupExtraReq": PBIMUpdateGroupExtraReq,
    "PBIMUpdateProfileExtraReq": PBIMUpdateProfileExtraReq,
    "PageQuery": PageQuery,
    "ProfileCreate": ProfileCreate,
    "RelationCreate": RelationCreate,
    "SystemCreate": SystemCreate,
    "TemplateMessageCreate": TemplateMessageCreate,
    "TimelineCreate": TimelineCreate,
}

export interface Authentication {
    /**
    * Apply authentication settings to header and query params.
    */
    applyToRequest(requestOptions: localVarRequest.Options): void
}

export class HttpBasicAuth implements Authentication {
    public username: string
    public password: string
    applyToRequest(requestOptions: localVarRequest.Options): void {
        requestOptions.auth = {
            username: this.username, password: this.password
        }
    }
}

export class ApiKeyAuth implements Authentication {
    public apiKey: string

    constructor(private location: string, private paramName: string) {
    }

    applyToRequest(requestOptions: localVarRequest.Options): void {
        if (this.location == "query") {
            (<any>requestOptions.qs)[this.paramName] = this.apiKey
        } else if (this.location == "header" && requestOptions && requestOptions.headers) {
            requestOptions.headers[this.paramName] = this.apiKey
        }
    }
}

export class OAuth implements Authentication {
    public accessToken: string

    applyToRequest(requestOptions: localVarRequest.Options): void {
        if (requestOptions && requestOptions.headers) {
            requestOptions.headers["Authorization"] = "Bearer " + this.accessToken
        }
    }
}

export class VoidAuth implements Authentication {
    public username: string
    public password: string
    applyToRequest(_: localVarRequest.Options): void {
        // Do nothing
    }
}

export enum ApiApiApiKeys {
}

export class ApiApi {
    protected _basePath = defaultBasePath
    protected defaultHeaders: any = {}
    protected _useQuerystring: boolean = false

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
    }

    constructor(basePath?: string)
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value
    }

    set basePath(basePath: string) {
        this._basePath = basePath
    }

    get basePath() {
        return this._basePath
    }

    public setDefaultAuthentication(auth: Authentication) {
        this.authentications.default = auth
    }

    public setApiKey(key: ApiApiApiKeys, value: string) {
        (this.authentications as any)[ApiApiApiKeys[key]].apiKey = value
    }
    /**
     * 处理添加好友请求
     * @summary 处理添加好友请求
     * @param pBIMAddFriendReq 参数
     */
    public imApiAddFriendPost(pBIMAddFriendReq: PBIMAddFriendReq): Promise<{ response: http.ClientResponse, body: InlineResponse2002 }> {
        const localVarPath = this.basePath + '/im/api/addFriend'
        let localVarQueryParameters: any = {}
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders)
        let localVarFormParams: any = {}

        // verify required parameter 'pBIMAddFriendReq' is not null or undefined
        if (pBIMAddFriendReq === null || pBIMAddFriendReq === undefined) {
            throw new Error('Required parameter pBIMAddFriendReq was null or undefined when calling imApiAddFriendPost.')
        }


        let localVarUseFormData = false

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(pBIMAddFriendReq, "PBIMAddFriendReq")
        }

        this.authentications.default.applyToRequest(localVarRequestOptions)

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams
            } else {
                localVarRequestOptions.form = localVarFormParams
            }
        }
        return new Promise<{ response: http.ClientResponse, body: InlineResponse2002 }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error)
                } else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse2002")
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body })
                    } else {
                        reject({ response: response, body: body })
                    }
                }
            })
        })
    }
    /**
     * 添加群成员
     * @summary 添加群成员
     * @param pBIMAddGroupMembersReq 参数
     */
    public imApiAddGroupMembersPost(pBIMAddGroupMembersReq: PBIMAddGroupMembersReq): Promise<{ response: http.ClientResponse, body: InlineResponse2002 }> {
        const localVarPath = this.basePath + '/im/api/addGroupMembers'
        let localVarQueryParameters: any = {}
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders)
        let localVarFormParams: any = {}

        // verify required parameter 'pBIMAddGroupMembersReq' is not null or undefined
        if (pBIMAddGroupMembersReq === null || pBIMAddGroupMembersReq === undefined) {
            throw new Error('Required parameter pBIMAddGroupMembersReq was null or undefined when calling imApiAddGroupMembersPost.')
        }


        let localVarUseFormData = false

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(pBIMAddGroupMembersReq, "PBIMAddGroupMembersReq")
        }

        this.authentications.default.applyToRequest(localVarRequestOptions)

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams
            } else {
                localVarRequestOptions.form = localVarFormParams
            }
        }
        return new Promise<{ response: http.ClientResponse, body: InlineResponse2002 }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error)
                } else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse2002")
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body })
                    } else {
                        reject({ response: response, body: body })
                    }
                }
            })
        })
    }
    /**
     * 同意所有好友请求
     * @summary 同意所有好友请求
     * @param pBIMApproveAllFriendReq 参数
     */
    public imApiApproveAllFriendPost(pBIMApproveAllFriendReq: PBIMApproveAllFriendReq): Promise<{ response: http.ClientResponse, body: InlineResponse2002 }> {
        const localVarPath = this.basePath + '/im/api/approveAllFriend'
        let localVarQueryParameters: any = {}
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders)
        let localVarFormParams: any = {}

        // verify required parameter 'pBIMApproveAllFriendReq' is not null or undefined
        if (pBIMApproveAllFriendReq === null || pBIMApproveAllFriendReq === undefined) {
            throw new Error('Required parameter pBIMApproveAllFriendReq was null or undefined when calling imApiApproveAllFriendPost.')
        }


        let localVarUseFormData = false

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(pBIMApproveAllFriendReq, "PBIMApproveAllFriendReq")
        }

        this.authentications.default.applyToRequest(localVarRequestOptions)

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams
            } else {
                localVarRequestOptions.form = localVarFormParams
            }
        }
        return new Promise<{ response: http.ClientResponse, body: InlineResponse2002 }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error)
                } else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse2002")
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body })
                    } else {
                        reject({ response: response, body: body })
                    }
                }
            })
        })
    }
    /**
     * 运营号移动端获取配置信息，permissionConfig、groupConfig
     * @summary 运营号移动端获取配置信息，permissionConfig、groupConfig
     * @param serviceID 服务ID
     * @param platformUid 运营号ID
     */
    public imApiConfigGet(serviceID?: number, platformUid?: string): Promise<{ response: http.ClientResponse, body: InlineResponse200 }> {
        const localVarPath = this.basePath + '/im/api/config'
        let localVarQueryParameters: any = {}
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders)
        let localVarFormParams: any = {}

        if (serviceID !== undefined) {
            localVarQueryParameters['serviceID'] = ObjectSerializer.serialize(serviceID, "number")
        }

        if (platformUid !== undefined) {
            localVarQueryParameters['platformUid'] = ObjectSerializer.serialize(platformUid, "string")
        }


        let localVarUseFormData = false

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        }

        this.authentications.default.applyToRequest(localVarRequestOptions)

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams
            } else {
                localVarRequestOptions.form = localVarFormParams
            }
        }
        return new Promise<{ response: http.ClientResponse, body: InlineResponse200 }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error)
                } else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse200")
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body })
                    } else {
                        reject({ response: response, body: body })
                    }
                }
            })
        })
    }
    /**
     * 联系人摘要
     * @summary 联系人摘要
     * @param serviceID 服务ID
     * @param platformUid 平台Uid
     */
    public imApiContactMD5sGet(serviceID?: number, platformUid?: string): Promise<{ response: http.ClientResponse, body: InlineResponse200 }> {
        const localVarPath = this.basePath + '/im/api/contactMD5s'
        let localVarQueryParameters: any = {}
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders)
        let localVarFormParams: any = {}

        if (serviceID !== undefined) {
            localVarQueryParameters['serviceID'] = ObjectSerializer.serialize(serviceID, "number")
        }

        if (platformUid !== undefined) {
            localVarQueryParameters['platformUid'] = ObjectSerializer.serialize(platformUid, "string")
        }


        let localVarUseFormData = false

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        }

        this.authentications.default.applyToRequest(localVarRequestOptions)

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams
            } else {
                localVarRequestOptions.form = localVarFormParams
            }
        }
        return new Promise<{ response: http.ClientResponse, body: InlineResponse200 }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error)
                } else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse200")
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body })
                    } else {
                        reject({ response: response, body: body })
                    }
                }
            })
        })
    }
    /**
     * 是否能添加好友
     * @summary 是否能添加好友
     * @param serviceID 服务ID
     * @param profilePlatformUid 运营号平台Uid
     * @param platformUid 平台Uid
     */
    public imApiContactedGet(serviceID?: number, profilePlatformUid?: string, platformUid?: string): Promise<{ response: http.ClientResponse, body: InlineResponse2001 }> {
        const localVarPath = this.basePath + '/im/api/contacted'
        let localVarQueryParameters: any = {}
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders)
        let localVarFormParams: any = {}

        if (serviceID !== undefined) {
            localVarQueryParameters['serviceID'] = ObjectSerializer.serialize(serviceID, "number")
        }

        if (profilePlatformUid !== undefined) {
            localVarQueryParameters['profilePlatformUid'] = ObjectSerializer.serialize(profilePlatformUid, "string")
        }

        if (platformUid !== undefined) {
            localVarQueryParameters['platformUid'] = ObjectSerializer.serialize(platformUid, "string")
        }


        let localVarUseFormData = false

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        }

        this.authentications.default.applyToRequest(localVarRequestOptions)

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams
            } else {
                localVarRequestOptions.form = localVarFormParams
            }
        }
        return new Promise<{ response: http.ClientResponse, body: InlineResponse2001 }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error)
                } else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse2001")
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body })
                    } else {
                        reject({ response: response, body: body })
                    }
                }
            })
        })
    }
    /**
     * 创建群命令
     * @summary 创建群命令
     * @param pBIMCreateGroupReq 参数
     */
    public imApiCreateGroupPost(pBIMCreateGroupReq: PBIMCreateGroupReq): Promise<{ response: http.ClientResponse, body: InlineResponse2002 }> {
        const localVarPath = this.basePath + '/im/api/createGroup'
        let localVarQueryParameters: any = {}
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders)
        let localVarFormParams: any = {}

        // verify required parameter 'pBIMCreateGroupReq' is not null or undefined
        if (pBIMCreateGroupReq === null || pBIMCreateGroupReq === undefined) {
            throw new Error('Required parameter pBIMCreateGroupReq was null or undefined when calling imApiCreateGroupPost.')
        }


        let localVarUseFormData = false

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(pBIMCreateGroupReq, "PBIMCreateGroupReq")
        }

        this.authentications.default.applyToRequest(localVarRequestOptions)

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams
            } else {
                localVarRequestOptions.form = localVarFormParams
            }
        }
        return new Promise<{ response: http.ClientResponse, body: InlineResponse2002 }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error)
                } else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse2002")
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body })
                    } else {
                        reject({ response: response, body: body })
                    }
                }
            })
        })
    }
    /**
     * 删除群成员
     * @summary 删除群成员
     * @param pBIMDeleteGroupMembersReq 参数
     */
    public imApiDeleteGroupMembersPost(pBIMDeleteGroupMembersReq: PBIMDeleteGroupMembersReq): Promise<{ response: http.ClientResponse, body: InlineResponse2002 }> {
        const localVarPath = this.basePath + '/im/api/deleteGroupMembers'
        let localVarQueryParameters: any = {}
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders)
        let localVarFormParams: any = {}

        // verify required parameter 'pBIMDeleteGroupMembersReq' is not null or undefined
        if (pBIMDeleteGroupMembersReq === null || pBIMDeleteGroupMembersReq === undefined) {
            throw new Error('Required parameter pBIMDeleteGroupMembersReq was null or undefined when calling imApiDeleteGroupMembersPost.')
        }


        let localVarUseFormData = false

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(pBIMDeleteGroupMembersReq, "PBIMDeleteGroupMembersReq")
        }

        this.authentications.default.applyToRequest(localVarRequestOptions)

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams
            } else {
                localVarRequestOptions.form = localVarFormParams
            }
        }
        return new Promise<{ response: http.ClientResponse, body: InlineResponse2002 }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error)
                } else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse2002")
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body })
                    } else {
                        reject({ response: response, body: body })
                    }
                }
            })
        })
    }
    /**
     * 运营号移动端获取群成员上报状态
     * @summary 运营号移动端获取群成员上报状态
     * @param serviceID 服务ID
     * @param platformGid 平台群ID
     */
    public imApiGroupMemberLoadStatusGet(serviceID?: number, platformGid?: string): Promise<{ response: http.ClientResponse, body: InlineResponse200 }> {
        const localVarPath = this.basePath + '/im/api/groupMemberLoadStatus'
        let localVarQueryParameters: any = {}
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders)
        let localVarFormParams: any = {}

        if (serviceID !== undefined) {
            localVarQueryParameters['serviceID'] = ObjectSerializer.serialize(serviceID, "number")
        }

        if (platformGid !== undefined) {
            localVarQueryParameters['platformGid'] = ObjectSerializer.serialize(platformGid, "string")
        }


        let localVarUseFormData = false

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        }

        this.authentications.default.applyToRequest(localVarRequestOptions)

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams
            } else {
                localVarRequestOptions.form = localVarFormParams
            }
        }
        return new Promise<{ response: http.ClientResponse, body: InlineResponse200 }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error)
                } else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse200")
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body })
                    } else {
                        reject({ response: response, body: body })
                    }
                }
            })
        })
    }
    /**
     * 群二维码生成时间
     * @summary 群二维码生成时间
     * @param serviceID 服务ID
     * @param platformGids 群id列表
     */
    public imApiGroupQRCodeDateGet(serviceID?: number, platformGids?: Array<string>): Promise<{ response: http.ClientResponse, body: InlineResponse200 }> {
        const localVarPath = this.basePath + '/im/api/groupQRCodeDate'
        let localVarQueryParameters: any = {}
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders)
        let localVarFormParams: any = {}

        if (serviceID !== undefined) {
            localVarQueryParameters['serviceID'] = ObjectSerializer.serialize(serviceID, "number")
        }

        if (platformGids !== undefined) {
            localVarQueryParameters['platformGids'] = ObjectSerializer.serialize(platformGids, "Array<string>")
        }


        let localVarUseFormData = false

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        }

        this.authentications.default.applyToRequest(localVarRequestOptions)

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams
            } else {
                localVarRequestOptions.form = localVarFormParams
            }
        }
        return new Promise<{ response: http.ClientResponse, body: InlineResponse200 }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error)
                } else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse200")
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body })
                    } else {
                        reject({ response: response, body: body })
                    }
                }
            })
        })
    }
    /**
     * 接受邀请入群
     * @summary 接受邀请入群
     * @param pBIMJoinGroupByInviteReq 参数
     */
    public imApiJoinGroupByInvitePost(pBIMJoinGroupByInviteReq: PBIMJoinGroupByInviteReq): Promise<{ response: http.ClientResponse, body: InlineResponse2002 }> {
        const localVarPath = this.basePath + '/im/api/joinGroupByInvite'
        let localVarQueryParameters: any = {}
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders)
        let localVarFormParams: any = {}

        // verify required parameter 'pBIMJoinGroupByInviteReq' is not null or undefined
        if (pBIMJoinGroupByInviteReq === null || pBIMJoinGroupByInviteReq === undefined) {
            throw new Error('Required parameter pBIMJoinGroupByInviteReq was null or undefined when calling imApiJoinGroupByInvitePost.')
        }


        let localVarUseFormData = false

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(pBIMJoinGroupByInviteReq, "PBIMJoinGroupByInviteReq")
        }

        this.authentications.default.applyToRequest(localVarRequestOptions)

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams
            } else {
                localVarRequestOptions.form = localVarFormParams
            }
        }
        return new Promise<{ response: http.ClientResponse, body: InlineResponse2002 }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error)
                } else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse2002")
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body })
                    } else {
                        reject({ response: response, body: body })
                    }
                }
            })
        })
    }
    /**
     * 多对象批量发送消息命令
     * @summary 多对象批量发送消息命令
     * @param pBIMSendBatchMessageReq 参数
     */
    public imApiSendBatchMessagePost(pBIMSendBatchMessageReq: PBIMSendBatchMessageReq): Promise<{ response: http.ClientResponse, body: InlineResponse2002 }> {
        const localVarPath = this.basePath + '/im/api/sendBatchMessage'
        let localVarQueryParameters: any = {}
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders)
        let localVarFormParams: any = {}

        // verify required parameter 'pBIMSendBatchMessageReq' is not null or undefined
        if (pBIMSendBatchMessageReq === null || pBIMSendBatchMessageReq === undefined) {
            throw new Error('Required parameter pBIMSendBatchMessageReq was null or undefined when calling imApiSendBatchMessagePost.')
        }


        let localVarUseFormData = false

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(pBIMSendBatchMessageReq, "PBIMSendBatchMessageReq")
        }

        this.authentications.default.applyToRequest(localVarRequestOptions)

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams
            } else {
                localVarRequestOptions.form = localVarFormParams
            }
        }
        return new Promise<{ response: http.ClientResponse, body: InlineResponse2002 }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error)
                } else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse2002")
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body })
                    } else {
                        reject({ response: response, body: body })
                    }
                }
            })
        })
    }
    /**
     * 发送消息命令
     * @summary 发送消息命令
     * @param pBIMSendMessageReq 参数
     */
    public imApiSendMessagePost(pBIMSendMessageReq: PBIMSendMessageReq): Promise<{ response: http.ClientResponse, body: InlineResponse2002 }> {
        const localVarPath = this.basePath + '/im/api/sendMessage'
        let localVarQueryParameters: any = {}
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders)
        let localVarFormParams: any = {}

        // verify required parameter 'pBIMSendMessageReq' is not null or undefined
        if (pBIMSendMessageReq === null || pBIMSendMessageReq === undefined) {
            throw new Error('Required parameter pBIMSendMessageReq was null or undefined when calling imApiSendMessagePost.')
        }


        let localVarUseFormData = false

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(pBIMSendMessageReq, "PBIMSendMessageReq")
        }

        this.authentications.default.applyToRequest(localVarRequestOptions)

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams
            } else {
                localVarRequestOptions.form = localVarFormParams
            }
        }
        return new Promise<{ response: http.ClientResponse, body: InlineResponse2002 }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error)
                } else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse2002")
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body })
                    } else {
                        reject({ response: response, body: body })
                    }
                }
            })
        })
    }
    /**
     * 发送模板消息命令
     * @summary 发送模板消息命令
     * @param pBIMSendTemplateMessageReq 参数
     */
    public imApiSendTemplateMessagePost(pBIMSendTemplateMessageReq: PBIMSendTemplateMessageReq): Promise<{ response: http.ClientResponse, body: InlineResponse2002 }> {
        const localVarPath = this.basePath + '/im/api/sendTemplateMessage'
        let localVarQueryParameters: any = {}
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders)
        let localVarFormParams: any = {}

        // verify required parameter 'pBIMSendTemplateMessageReq' is not null or undefined
        if (pBIMSendTemplateMessageReq === null || pBIMSendTemplateMessageReq === undefined) {
            throw new Error('Required parameter pBIMSendTemplateMessageReq was null or undefined when calling imApiSendTemplateMessagePost.')
        }


        let localVarUseFormData = false

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(pBIMSendTemplateMessageReq, "PBIMSendTemplateMessageReq")
        }

        this.authentications.default.applyToRequest(localVarRequestOptions)

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams
            } else {
                localVarRequestOptions.form = localVarFormParams
            }
        }
        return new Promise<{ response: http.ClientResponse, body: InlineResponse2002 }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error)
                } else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse2002")
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body })
                    } else {
                        reject({ response: response, body: body })
                    }
                }
            })
        })
    }
    /**
     * 发送timeline命令
     * @summary 发送timeline命令
     * @param pBIMSendTimelineReq 参数
     */
    public imApiSendTimelinePost(pBIMSendTimelineReq: PBIMSendTimelineReq): Promise<{ response: http.ClientResponse, body: InlineResponse2002 }> {
        const localVarPath = this.basePath + '/im/api/sendTimeline'
        let localVarQueryParameters: any = {}
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders)
        let localVarFormParams: any = {}

        // verify required parameter 'pBIMSendTimelineReq' is not null or undefined
        if (pBIMSendTimelineReq === null || pBIMSendTimelineReq === undefined) {
            throw new Error('Required parameter pBIMSendTimelineReq was null or undefined when calling imApiSendTimelinePost.')
        }


        let localVarUseFormData = false

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(pBIMSendTimelineReq, "PBIMSendTimelineReq")
        }

        this.authentications.default.applyToRequest(localVarRequestOptions)

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams
            } else {
                localVarRequestOptions.form = localVarFormParams
            }
        }
        return new Promise<{ response: http.ClientResponse, body: InlineResponse2002 }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error)
                } else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse2002")
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body })
                    } else {
                        reject({ response: response, body: body })
                    }
                }
            })
        })
    }
    /**
     * 设置群备注
     * @summary 设置群备注
     * @param pBIMSetGroupDescReq 参数
     */
    public imApiSetGroupDescPost(pBIMSetGroupDescReq: PBIMSetGroupDescReq): Promise<{ response: http.ClientResponse, body: InlineResponse2002 }> {
        const localVarPath = this.basePath + '/im/api/setGroupDesc'
        let localVarQueryParameters: any = {}
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders)
        let localVarFormParams: any = {}

        // verify required parameter 'pBIMSetGroupDescReq' is not null or undefined
        if (pBIMSetGroupDescReq === null || pBIMSetGroupDescReq === undefined) {
            throw new Error('Required parameter pBIMSetGroupDescReq was null or undefined when calling imApiSetGroupDescPost.')
        }


        let localVarUseFormData = false

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(pBIMSetGroupDescReq, "PBIMSetGroupDescReq")
        }

        this.authentications.default.applyToRequest(localVarRequestOptions)

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams
            } else {
                localVarRequestOptions.form = localVarFormParams
            }
        }
        return new Promise<{ response: http.ClientResponse, body: InlineResponse2002 }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error)
                } else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse2002")
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body })
                    } else {
                        reject({ response: response, body: body })
                    }
                }
            })
        })
    }
    /**
     * 设置群名称
     * @summary 设置群名称
     * @param pBIMSetGroupNameReq 参数
     */
    public imApiSetGroupNamePost(pBIMSetGroupNameReq: PBIMSetGroupNameReq): Promise<{ response: http.ClientResponse, body: InlineResponse2002 }> {
        const localVarPath = this.basePath + '/im/api/setGroupName'
        let localVarQueryParameters: any = {}
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders)
        let localVarFormParams: any = {}

        // verify required parameter 'pBIMSetGroupNameReq' is not null or undefined
        if (pBIMSetGroupNameReq === null || pBIMSetGroupNameReq === undefined) {
            throw new Error('Required parameter pBIMSetGroupNameReq was null or undefined when calling imApiSetGroupNamePost.')
        }


        let localVarUseFormData = false

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(pBIMSetGroupNameReq, "PBIMSetGroupNameReq")
        }

        this.authentications.default.applyToRequest(localVarRequestOptions)

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams
            } else {
                localVarRequestOptions.form = localVarFormParams
            }
        }
        return new Promise<{ response: http.ClientResponse, body: InlineResponse2002 }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error)
                } else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse2002")
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body })
                    } else {
                        reject({ response: response, body: body })
                    }
                }
            })
        })
    }
}
export enum ContactApiApiKeys {
}

export class ContactApi {
    protected _basePath = defaultBasePath
    protected defaultHeaders: any = {}
    protected _useQuerystring: boolean = false

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
    }

    constructor(basePath?: string)
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value
    }

    set basePath(basePath: string) {
        this._basePath = basePath
    }

    get basePath() {
        return this._basePath
    }

    public setDefaultAuthentication(auth: Authentication) {
        this.authentications.default = auth
    }

    public setApiKey(key: ContactApiApiKeys, value: string) {
        (this.authentications as any)[ContactApiApiKeys[key]].apiKey = value
    }
    /**
     * 联系人地址
     * @summary 添加联系人地址
     * @param pBIMAddressDto 参数
     */
    public imContactCreateAddrPost(pBIMAddressDto: AddressCreate): Promise<{ response: http.ClientResponse, body: InlineResponse2002 }> {
        const localVarPath = this.basePath + '/im/contact/createAddr'
        let localVarQueryParameters: any = {}
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders)
        let localVarFormParams: any = {}

        // verify required parameter 'pBIMAddressDto' is not null or undefined
        if (pBIMAddressDto === null || pBIMAddressDto === undefined) {
            throw new Error('Required parameter pBIMAddressDto was null or undefined when calling imContactCreateAddrPost.')
        }


        let localVarUseFormData = false

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(pBIMAddressDto, "AddressCreate")
        }

        this.authentications.default.applyToRequest(localVarRequestOptions)

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams
            } else {
                localVarRequestOptions.form = localVarFormParams
            }
        }
        return new Promise<{ response: http.ClientResponse, body: InlineResponse2002 }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error)
                } else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse2002")
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body })
                    } else {
                        reject({ response: response, body: body })
                    }
                }
            })
        })
    }
    /**
     * 创建联系人
     * @summary 创建联系人
     * @param pBIMContactDto 参数
     */
    public imContactCreatePost(pBIMContactDto: ContactCreate): Promise<{ response: http.ClientResponse, body: InlineResponse2002 }> {
        const localVarPath = this.basePath + '/im/contact/create'
        let localVarQueryParameters: any = {}
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders)
        let localVarFormParams: any = {}

        // verify required parameter 'pBIMContactDto' is not null or undefined
        if (pBIMContactDto === null || pBIMContactDto === undefined) {
            throw new Error('Required parameter pBIMContactDto was null or undefined when calling imContactCreatePost.')
        }


        let localVarUseFormData = false

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(pBIMContactDto, "ContactCreate")
        }

        this.authentications.default.applyToRequest(localVarRequestOptions)

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams
            } else {
                localVarRequestOptions.form = localVarFormParams
            }
        }
        return new Promise<{ response: http.ClientResponse, body: InlineResponse2002 }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error)
                } else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse2002")
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body })
                    } else {
                        reject({ response: response, body: body })
                    }
                }
            })
        })
    }
    /**
     * 删除联系人地址
     * @summary 删除联系人地址
     * @param pBIMAddressDto 参数
     */
    public imContactDeleteAddrPost(pBIMAddressDto: PBIMAddressDto): Promise<{ response: http.ClientResponse, body: InlineResponse2002 }> {
        const localVarPath = this.basePath + '/im/contact/deleteAddr'
        let localVarQueryParameters: any = {}
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders)
        let localVarFormParams: any = {}

        // verify required parameter 'pBIMAddressDto' is not null or undefined
        if (pBIMAddressDto === null || pBIMAddressDto === undefined) {
            throw new Error('Required parameter pBIMAddressDto was null or undefined when calling imContactDeleteAddrPost.')
        }


        let localVarUseFormData = false

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(pBIMAddressDto, "PBIMAddressDto")
        }

        this.authentications.default.applyToRequest(localVarRequestOptions)

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams
            } else {
                localVarRequestOptions.form = localVarFormParams
            }
        }
        return new Promise<{ response: http.ClientResponse, body: InlineResponse2002 }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error)
                } else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse2002")
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body })
                    } else {
                        reject({ response: response, body: body })
                    }
                }
            })
        })
    }
    /**
     * 删除联系人
     * @summary 删除联系人
     * @param pBIMContactDto 参数
     */
    public imContactDeletePost(pBIMContactDto: PBIMContactDto): Promise<{ response: http.ClientResponse, body: InlineResponse2002 }> {
        const localVarPath = this.basePath + '/im/contact/delete'
        let localVarQueryParameters: any = {}
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders)
        let localVarFormParams: any = {}

        // verify required parameter 'pBIMContactDto' is not null or undefined
        if (pBIMContactDto === null || pBIMContactDto === undefined) {
            throw new Error('Required parameter pBIMContactDto was null or undefined when calling imContactDeletePost.')
        }


        let localVarUseFormData = false

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(pBIMContactDto, "PBIMContactDto")
        }

        this.authentications.default.applyToRequest(localVarRequestOptions)

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams
            } else {
                localVarRequestOptions.form = localVarFormParams
            }
        }
        return new Promise<{ response: http.ClientResponse, body: InlineResponse2002 }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error)
                } else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse2002")
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body })
                    } else {
                        reject({ response: response, body: body })
                    }
                }
            })
        })
    }
    /**
     * 分页获取关系信息
     * @summary 分页获取关系信息
     * @param serviceID 服务ID
     * @param platformUid 联系人平台Uid
     * @param customID 联系人平台自定义ID
     * @param startAt 起始时间戳
     * @param pageNo 页码
     * @param pageSize 每页条数限制
     * @param direction 查询方向 &gt&#x3D0 升序； &lt0 降序
     */
    public imContactPageAddrGet(serviceID?: number, platformUid?: string, customID?: string, startAt?: number, pageNo?: number, pageSize?: number, direction?: number): Promise<{ response: http.ClientResponse, body: InlineResponse2006 }> {
        const localVarPath = this.basePath + '/im/contact/pageAddr'
        let localVarQueryParameters: any = {}
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders)
        let localVarFormParams: any = {}

        if (serviceID !== undefined) {
            localVarQueryParameters['serviceID'] = ObjectSerializer.serialize(serviceID, "number")
        }

        if (platformUid !== undefined) {
            localVarQueryParameters['platformUid'] = ObjectSerializer.serialize(platformUid, "string")
        }

        if (customID !== undefined) {
            localVarQueryParameters['customID'] = ObjectSerializer.serialize(customID, "string")
        }

        if (startAt !== undefined) {
            localVarQueryParameters['startAt'] = ObjectSerializer.serialize(startAt, "number")
        }

        if (pageNo !== undefined) {
            localVarQueryParameters['pageNo'] = ObjectSerializer.serialize(pageNo, "number")
        }

        if (pageSize !== undefined) {
            localVarQueryParameters['pageSize'] = ObjectSerializer.serialize(pageSize, "number")
        }

        if (direction !== undefined) {
            localVarQueryParameters['direction'] = ObjectSerializer.serialize(direction, "number")
        }


        let localVarUseFormData = false

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        }

        this.authentications.default.applyToRequest(localVarRequestOptions)

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams
            } else {
                localVarRequestOptions.form = localVarFormParams
            }
        }
        return new Promise<{ response: http.ClientResponse, body: InlineResponse2006 }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error)
                } else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse2006")
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body })
                    } else {
                        reject({ response: response, body: body })
                    }
                }
            })
        })
    }
    /**
     * 检索联系人地址
     * @summary 检索联系人地址
     * @param id 地址ID
     */
    public imContactRetrieveAddrGet(id?: number): Promise<{ response: http.ClientResponse, body: InlineResponse2005 }> {
        const localVarPath = this.basePath + '/im/contact/retrieveAddr'
        let localVarQueryParameters: any = {}
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders)
        let localVarFormParams: any = {}

        if (id !== undefined) {
            localVarQueryParameters['id'] = ObjectSerializer.serialize(id, "number")
        }


        let localVarUseFormData = false

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        }

        this.authentications.default.applyToRequest(localVarRequestOptions)

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams
            } else {
                localVarRequestOptions.form = localVarFormParams
            }
        }
        return new Promise<{ response: http.ClientResponse, body: InlineResponse2005 }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error)
                } else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse2005")
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body })
                    } else {
                        reject({ response: response, body: body })
                    }
                }
            })
        })
    }
    /**
     * 检索联系人信息
     * @summary 检索联系人信息
     * @param serviceID 服务ID
     * @param customID 联系人自定义ID
     */
    public imContactRetrieveByCustomIDGet(serviceID?: number, customID?: string): Promise<{ response: http.ClientResponse, body: InlineResponse2003 }> {
        const localVarPath = this.basePath + '/im/contact/retrieveByCustomID'
        let localVarQueryParameters: any = {}
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders)
        let localVarFormParams: any = {}

        if (serviceID !== undefined) {
            localVarQueryParameters['serviceID'] = ObjectSerializer.serialize(serviceID, "number")
        }

        if (customID !== undefined) {
            localVarQueryParameters['customID'] = ObjectSerializer.serialize(customID, "string")
        }


        let localVarUseFormData = false

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        }

        this.authentications.default.applyToRequest(localVarRequestOptions)

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams
            } else {
                localVarRequestOptions.form = localVarFormParams
            }
        }
        return new Promise<{ response: http.ClientResponse, body: InlineResponse2003 }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error)
                } else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse2003")
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body })
                    } else {
                        reject({ response: response, body: body })
                    }
                }
            })
        })
    }
    /**
     * 根据ID列表获取详情
     * @summary 根据ID列表获取详情
     * @param ids ID列表
     */
    public imContactRetrieveByIDsGet(ids?: Array<number>): Promise<{ response: http.ClientResponse, body: InlineResponse2004 }> {
        const localVarPath = this.basePath + '/im/contact/retrieveByIDs'
        let localVarQueryParameters: any = {}
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders)
        let localVarFormParams: any = {}

        if (ids !== undefined) {
            localVarQueryParameters['ids'] = ObjectSerializer.serialize(ids, "Array<number>")
        }


        let localVarUseFormData = false

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        }

        this.authentications.default.applyToRequest(localVarRequestOptions)

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams
            } else {
                localVarRequestOptions.form = localVarFormParams
            }
        }
        return new Promise<{ response: http.ClientResponse, body: InlineResponse2004 }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error)
                } else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse2004")
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body })
                    } else {
                        reject({ response: response, body: body })
                    }
                }
            })
        })
    }
    /**
     * 检索联系人信息
     * @summary 检索联系人信息
     * @param serviceID 服务ID
     * @param platformUid 联系人平台Uid
     */
    public imContactRetrieveByPlatformUidGet(serviceID?: number, platformUid?: string): Promise<{ response: http.ClientResponse, body: InlineResponse2003 }> {
        const localVarPath = this.basePath + '/im/contact/retrieveByPlatformUid'
        let localVarQueryParameters: any = {}
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders)
        let localVarFormParams: any = {}

        if (serviceID !== undefined) {
            localVarQueryParameters['serviceID'] = ObjectSerializer.serialize(serviceID, "number")
        }

        if (platformUid !== undefined) {
            localVarQueryParameters['platformUid'] = ObjectSerializer.serialize(platformUid, "string")
        }


        let localVarUseFormData = false

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        }

        this.authentications.default.applyToRequest(localVarRequestOptions)

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams
            } else {
                localVarRequestOptions.form = localVarFormParams
            }
        }
        return new Promise<{ response: http.ClientResponse, body: InlineResponse2003 }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error)
                } else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse2003")
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body })
                    } else {
                        reject({ response: response, body: body })
                    }
                }
            })
        })
    }
    /**
     * 检索联系人信息，根据ID或组合条件
     * @summary 检索联系人信息，根据ID或组合条件
     * @param id 联系人ID
     */
    public imContactRetrieveGet(id?: number): Promise<{ response: http.ClientResponse, body: InlineResponse2003 }> {
        const localVarPath = this.basePath + '/im/contact/retrieve'
        let localVarQueryParameters: any = {}
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders)
        let localVarFormParams: any = {}

        if (id !== undefined) {
            localVarQueryParameters['id'] = ObjectSerializer.serialize(id, "number")
        }


        let localVarUseFormData = false

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        }

        this.authentications.default.applyToRequest(localVarRequestOptions)

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams
            } else {
                localVarRequestOptions.form = localVarFormParams
            }
        }
        return new Promise<{ response: http.ClientResponse, body: InlineResponse2003 }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error)
                } else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse2003")
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body })
                    } else {
                        reject({ response: response, body: body })
                    }
                }
            })
        })
    }
    /**
     * 更新联系人地址
     * @summary 更新联系人地址
     * @param pBIMAddressDto 参数
     */
    public imContactUpdateAddrPost(pBIMAddressDto: PBIMAddressDto): Promise<{ response: http.ClientResponse, body: InlineResponse2002 }> {
        const localVarPath = this.basePath + '/im/contact/updateAddr'
        let localVarQueryParameters: any = {}
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders)
        let localVarFormParams: any = {}

        // verify required parameter 'pBIMAddressDto' is not null or undefined
        if (pBIMAddressDto === null || pBIMAddressDto === undefined) {
            throw new Error('Required parameter pBIMAddressDto was null or undefined when calling imContactUpdateAddrPost.')
        }


        let localVarUseFormData = false

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(pBIMAddressDto, "PBIMAddressDto")
        }

        this.authentications.default.applyToRequest(localVarRequestOptions)

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams
            } else {
                localVarRequestOptions.form = localVarFormParams
            }
        }
        return new Promise<{ response: http.ClientResponse, body: InlineResponse2002 }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error)
                } else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse2002")
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body })
                    } else {
                        reject({ response: response, body: body })
                    }
                }
            })
        })
    }
    /**
     * 更新联系人
     * @summary 更新联系人
     * @param pBIMContactDto 参数
     */
    public imContactUpdatePost(pBIMContactDto: PBIMContactDto): Promise<{ response: http.ClientResponse, body: InlineResponse2002 }> {
        const localVarPath = this.basePath + '/im/contact/update'
        let localVarQueryParameters: any = {}
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders)
        let localVarFormParams: any = {}

        // verify required parameter 'pBIMContactDto' is not null or undefined
        if (pBIMContactDto === null || pBIMContactDto === undefined) {
            throw new Error('Required parameter pBIMContactDto was null or undefined when calling imContactUpdatePost.')
        }


        let localVarUseFormData = false

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(pBIMContactDto, "PBIMContactDto")
        }

        this.authentications.default.applyToRequest(localVarRequestOptions)

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams
            } else {
                localVarRequestOptions.form = localVarFormParams
            }
        }
        return new Promise<{ response: http.ClientResponse, body: InlineResponse2002 }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error)
                } else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse2002")
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body })
                    } else {
                        reject({ response: response, body: body })
                    }
                }
            })
        })
    }
}
export enum FundApiApiKeys {
}

export class FundApi {
    protected _basePath = defaultBasePath
    protected defaultHeaders: any = {}
    protected _useQuerystring: boolean = false

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
    }

    constructor(basePath?: string)
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value
    }

    set basePath(basePath: string) {
        this._basePath = basePath
    }

    get basePath() {
        return this._basePath
    }

    public setDefaultAuthentication(auth: Authentication) {
        this.authentications.default = auth
    }

    public setApiKey(key: FundApiApiKeys, value: string) {
        (this.authentications as any)[FundApiApiKeys[key]].apiKey = value
    }
    /**
     * 添加转账信息
     * @summary 添加转账信息
     * @param pBIMFundDto 参数
     */
    public imFundCreatePost(pBIMFundDto: FundCreate): Promise<{ response: http.ClientResponse, body: InlineResponse2002 }> {
        const localVarPath = this.basePath + '/im/fund/create'
        let localVarQueryParameters: any = {}
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders)
        let localVarFormParams: any = {}

        // verify required parameter 'pBIMFundDto' is not null or undefined
        if (pBIMFundDto === null || pBIMFundDto === undefined) {
            throw new Error('Required parameter pBIMFundDto was null or undefined when calling imFundCreatePost.')
        }


        let localVarUseFormData = false

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(pBIMFundDto, "FundCreate")
        }

        this.authentications.default.applyToRequest(localVarRequestOptions)

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams
            } else {
                localVarRequestOptions.form = localVarFormParams
            }
        }
        return new Promise<{ response: http.ClientResponse, body: InlineResponse2002 }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error)
                } else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse2002")
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body })
                    } else {
                        reject({ response: response, body: body })
                    }
                }
            })
        })
    }
    /**
     * 删除转账信息
     * @summary 删除转账信息
     * @param pBIMFundDto 参数
     */
    public imFundDeletePost(pBIMFundDto: PBIMFundDto): Promise<{ response: http.ClientResponse, body: InlineResponse2002 }> {
        const localVarPath = this.basePath + '/im/fund/delete'
        let localVarQueryParameters: any = {}
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders)
        let localVarFormParams: any = {}

        // verify required parameter 'pBIMFundDto' is not null or undefined
        if (pBIMFundDto === null || pBIMFundDto === undefined) {
            throw new Error('Required parameter pBIMFundDto was null or undefined when calling imFundDeletePost.')
        }


        let localVarUseFormData = false

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(pBIMFundDto, "PBIMFundDto")
        }

        this.authentications.default.applyToRequest(localVarRequestOptions)

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams
            } else {
                localVarRequestOptions.form = localVarFormParams
            }
        }
        return new Promise<{ response: http.ClientResponse, body: InlineResponse2002 }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error)
                } else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse2002")
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body })
                    } else {
                        reject({ response: response, body: body })
                    }
                }
            })
        })
    }
    /**
     * 拉取timeline信息
     * @summary 拉取timeline信息
     * @param serviceID 服务ID
     * @param profilePlatformUid 运营号平台Uid
     * @param platformUid 联系人平台Uid
     * @param startAt 起始时间戳
     * @param offset 偏移量
     * @param direction 查询方向 &gt&#x3D0 升序； &lt0 降序
     * @param limit 每页条数限制
     */
    public imFundListGet(serviceID?: number, profilePlatformUid?: string, platformUid?: string, startAt?: number, offset?: number, direction?: number, limit?: number): Promise<{ response: http.ClientResponse, body: InlineResponse20039 }> {
        const localVarPath = this.basePath + '/im/fund/list'
        let localVarQueryParameters: any = {}
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders)
        let localVarFormParams: any = {}

        if (serviceID !== undefined) {
            localVarQueryParameters['serviceID'] = ObjectSerializer.serialize(serviceID, "number")
        }

        if (profilePlatformUid !== undefined) {
            localVarQueryParameters['profilePlatformUid'] = ObjectSerializer.serialize(profilePlatformUid, "string")
        }

        if (platformUid !== undefined) {
            localVarQueryParameters['platformUid'] = ObjectSerializer.serialize(platformUid, "string")
        }

        if (startAt !== undefined) {
            localVarQueryParameters['startAt'] = ObjectSerializer.serialize(startAt, "number")
        }

        if (offset !== undefined) {
            localVarQueryParameters['offset'] = ObjectSerializer.serialize(offset, "number")
        }

        if (direction !== undefined) {
            localVarQueryParameters['direction'] = ObjectSerializer.serialize(direction, "number")
        }

        if (limit !== undefined) {
            localVarQueryParameters['limit'] = ObjectSerializer.serialize(limit, "number")
        }


        let localVarUseFormData = false

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        }

        this.authentications.default.applyToRequest(localVarRequestOptions)

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams
            } else {
                localVarRequestOptions.form = localVarFormParams
            }
        }
        return new Promise<{ response: http.ClientResponse, body: InlineResponse20039 }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error)
                } else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse20039")
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body })
                    } else {
                        reject({ response: response, body: body })
                    }
                }
            })
        })
    }
    /**
     * 分页获取转账信息
     * @summary 分页获取转账信息
     * @param serviceID 服务ID
     * @param profilePlatformUid 运营号平台Uid
     * @param platformUid 联系人平台Uid
     * @param startAt 起始时间戳
     * @param pageNo 页码
     * @param pageSize 每页条数限制
     * @param direction 查询方向 &gt&#x3D0 升序； &lt0 降序
     */
    public imFundPageGet(serviceID?: number, profilePlatformUid?: string, platformUid?: string, startAt?: number, pageNo?: number, pageSize?: number, direction?: number): Promise<{ response: http.ClientResponse, body: InlineResponse20038 }> {
        const localVarPath = this.basePath + '/im/fund/page'
        let localVarQueryParameters: any = {}
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders)
        let localVarFormParams: any = {}

        if (serviceID !== undefined) {
            localVarQueryParameters['serviceID'] = ObjectSerializer.serialize(serviceID, "number")
        }

        if (profilePlatformUid !== undefined) {
            localVarQueryParameters['profilePlatformUid'] = ObjectSerializer.serialize(profilePlatformUid, "string")
        }

        if (platformUid !== undefined) {
            localVarQueryParameters['platformUid'] = ObjectSerializer.serialize(platformUid, "string")
        }

        if (startAt !== undefined) {
            localVarQueryParameters['startAt'] = ObjectSerializer.serialize(startAt, "number")
        }

        if (pageNo !== undefined) {
            localVarQueryParameters['pageNo'] = ObjectSerializer.serialize(pageNo, "number")
        }

        if (pageSize !== undefined) {
            localVarQueryParameters['pageSize'] = ObjectSerializer.serialize(pageSize, "number")
        }

        if (direction !== undefined) {
            localVarQueryParameters['direction'] = ObjectSerializer.serialize(direction, "number")
        }


        let localVarUseFormData = false

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        }

        this.authentications.default.applyToRequest(localVarRequestOptions)

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams
            } else {
                localVarRequestOptions.form = localVarFormParams
            }
        }
        return new Promise<{ response: http.ClientResponse, body: InlineResponse20038 }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error)
                } else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse20038")
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body })
                    } else {
                        reject({ response: response, body: body })
                    }
                }
            })
        })
    }
    /**
     * 检索转账信息
     * @summary 检索转账记录信息
     * @param id fund ID
     */
    public imFundRetrieveGet(id?: number): Promise<{ response: http.ClientResponse, body: InlineResponse20037 }> {
        const localVarPath = this.basePath + '/im/fund/retrieve'
        let localVarQueryParameters: any = {}
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders)
        let localVarFormParams: any = {}

        if (id !== undefined) {
            localVarQueryParameters['id'] = ObjectSerializer.serialize(id, "number")
        }


        let localVarUseFormData = false

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        }

        this.authentications.default.applyToRequest(localVarRequestOptions)

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams
            } else {
                localVarRequestOptions.form = localVarFormParams
            }
        }
        return new Promise<{ response: http.ClientResponse, body: InlineResponse20037 }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error)
                } else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse20037")
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body })
                    } else {
                        reject({ response: response, body: body })
                    }
                }
            })
        })
    }
    /**
     * 更新转账信息
     * @summary 更新转账信息
     * @param pBIMFundDto 参数
     */
    public imFundUpdatePost(pBIMFundDto: PBIMFundDto): Promise<{ response: http.ClientResponse, body: InlineResponse2002 }> {
        const localVarPath = this.basePath + '/im/fund/update'
        let localVarQueryParameters: any = {}
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders)
        let localVarFormParams: any = {}

        // verify required parameter 'pBIMFundDto' is not null or undefined
        if (pBIMFundDto === null || pBIMFundDto === undefined) {
            throw new Error('Required parameter pBIMFundDto was null or undefined when calling imFundUpdatePost.')
        }


        let localVarUseFormData = false

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(pBIMFundDto, "PBIMFundDto")
        }

        this.authentications.default.applyToRequest(localVarRequestOptions)

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams
            } else {
                localVarRequestOptions.form = localVarFormParams
            }
        }
        return new Promise<{ response: http.ClientResponse, body: InlineResponse2002 }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error)
                } else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse2002")
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body })
                    } else {
                        reject({ response: response, body: body })
                    }
                }
            })
        })
    }
}
export enum GroupApiApiKeys {
}

export class GroupApi {
    protected _basePath = defaultBasePath
    protected defaultHeaders: any = {}
    protected _useQuerystring: boolean = false

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
    }

    constructor(basePath?: string)
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value
    }

    set basePath(basePath: string) {
        this._basePath = basePath
    }

    get basePath() {
        return this._basePath
    }

    public setDefaultAuthentication(auth: Authentication) {
        this.authentications.default = auth
    }

    public setApiKey(key: GroupApiApiKeys, value: string) {
        (this.authentications as any)[GroupApiApiKeys[key]].apiKey = value
    }
    /**
     * 创建群信息
     * @summary 创建群信息
     * @param pBIMGroupDto 参数
     */
    public imGroupCreateGroupPost(pBIMGroupDto: PBIMGroupDto): Promise<{ response: http.ClientResponse, body: InlineResponse2002 }> {
        const localVarPath = this.basePath + '/im/group/createGroup'
        let localVarQueryParameters: any = {}
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders)
        let localVarFormParams: any = {}

        // verify required parameter 'pBIMGroupDto' is not null or undefined
        if (pBIMGroupDto === null || pBIMGroupDto === undefined) {
            throw new Error('Required parameter pBIMGroupDto was null or undefined when calling imGroupCreateGroupPost.')
        }


        let localVarUseFormData = false

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(pBIMGroupDto, "PBIMGroupDto")
        }

        this.authentications.default.applyToRequest(localVarRequestOptions)

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams
            } else {
                localVarRequestOptions.form = localVarFormParams
            }
        }
        return new Promise<{ response: http.ClientResponse, body: InlineResponse2002 }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error)
                } else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse2002")
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body })
                    } else {
                        reject({ response: response, body: body })
                    }
                }
            })
        })
    }
    /**
     * 删除群信息
     * @summary 删除群信息
     * @param pBIMGroupDto 参数
     */
    public imGroupDeleteGroupPost(pBIMGroupDto: PBIMGroupDto): Promise<{ response: http.ClientResponse, body: InlineResponse2002 }> {
        const localVarPath = this.basePath + '/im/group/deleteGroup'
        let localVarQueryParameters: any = {}
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders)
        let localVarFormParams: any = {}

        // verify required parameter 'pBIMGroupDto' is not null or undefined
        if (pBIMGroupDto === null || pBIMGroupDto === undefined) {
            throw new Error('Required parameter pBIMGroupDto was null or undefined when calling imGroupDeleteGroupPost.')
        }


        let localVarUseFormData = false

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(pBIMGroupDto, "PBIMGroupDto")
        }

        this.authentications.default.applyToRequest(localVarRequestOptions)

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams
            } else {
                localVarRequestOptions.form = localVarFormParams
            }
        }
        return new Promise<{ response: http.ClientResponse, body: InlineResponse2002 }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error)
                } else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse2002")
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body })
                    } else {
                        reject({ response: response, body: body })
                    }
                }
            })
        })
    }
    /**
     * 拉取群信息列表
     * @summary 拉取群信息列表
     * @param serviceID 服务ID
     * @param profilePlatformUid 运营号平台Uid
     * @param profileCustomID 运营号自定义ID
     * @param startAt 起始时间戳
     * @param offset 偏移量
     * @param direction 查询方向 &gt&#x3D0 升序； &lt0 降序
     * @param limit 每页条数限制
     */
    public imGroupListGroupGet(serviceID?: number, profilePlatformUid?: string, profileCustomID?: string, startAt?: number, offset?: number, direction?: number, limit?: number): Promise<{ response: http.ClientResponse, body: InlineResponse20015 }> {
        const localVarPath = this.basePath + '/im/group/listGroup'
        let localVarQueryParameters: any = {}
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders)
        let localVarFormParams: any = {}

        if (serviceID !== undefined) {
            localVarQueryParameters['serviceID'] = ObjectSerializer.serialize(serviceID, "number")
        }

        if (profilePlatformUid !== undefined) {
            localVarQueryParameters['profilePlatformUid'] = ObjectSerializer.serialize(profilePlatformUid, "string")
        }

        if (profileCustomID !== undefined) {
            localVarQueryParameters['profileCustomID'] = ObjectSerializer.serialize(profileCustomID, "string")
        }

        if (startAt !== undefined) {
            localVarQueryParameters['startAt'] = ObjectSerializer.serialize(startAt, "number")
        }

        if (offset !== undefined) {
            localVarQueryParameters['offset'] = ObjectSerializer.serialize(offset, "number")
        }

        if (direction !== undefined) {
            localVarQueryParameters['direction'] = ObjectSerializer.serialize(direction, "number")
        }

        if (limit !== undefined) {
            localVarQueryParameters['limit'] = ObjectSerializer.serialize(limit, "number")
        }


        let localVarUseFormData = false

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        }

        this.authentications.default.applyToRequest(localVarRequestOptions)

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams
            } else {
                localVarRequestOptions.form = localVarFormParams
            }
        }
        return new Promise<{ response: http.ClientResponse, body: InlineResponse20015 }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error)
                } else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse20015")
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body })
                    } else {
                        reject({ response: response, body: body })
                    }
                }
            })
        })
    }
    /**
     * 分页获取群信息
     * @summary 分页获取群信息
     * @param serviceID 服务ID
     * @param profilePlatformUid 运营号平台Uid
     * @param profileCustomID 运营号自定义ID
     * @param startAt 起始时间戳
     * @param pageNo 页码
     * @param pageSize 每页条数限制
     * @param direction 查询方向 &gt&#x3D0 升序； &lt0 降序
     */
    public imGroupPageGroupGet(serviceID?: number, profilePlatformUid?: string, profileCustomID?: string, startAt?: number, pageNo?: number, pageSize?: number, direction?: number): Promise<{ response: http.ClientResponse, body: InlineResponse20014 }> {
        const localVarPath = this.basePath + '/im/group/pageGroup'
        let localVarQueryParameters: any = {}
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders)
        let localVarFormParams: any = {}

        if (serviceID !== undefined) {
            localVarQueryParameters['serviceID'] = ObjectSerializer.serialize(serviceID, "number")
        }

        if (profilePlatformUid !== undefined) {
            localVarQueryParameters['profilePlatformUid'] = ObjectSerializer.serialize(profilePlatformUid, "string")
        }

        if (profileCustomID !== undefined) {
            localVarQueryParameters['profileCustomID'] = ObjectSerializer.serialize(profileCustomID, "string")
        }

        if (startAt !== undefined) {
            localVarQueryParameters['startAt'] = ObjectSerializer.serialize(startAt, "number")
        }

        if (pageNo !== undefined) {
            localVarQueryParameters['pageNo'] = ObjectSerializer.serialize(pageNo, "number")
        }

        if (pageSize !== undefined) {
            localVarQueryParameters['pageSize'] = ObjectSerializer.serialize(pageSize, "number")
        }

        if (direction !== undefined) {
            localVarQueryParameters['direction'] = ObjectSerializer.serialize(direction, "number")
        }


        let localVarUseFormData = false

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        }

        this.authentications.default.applyToRequest(localVarRequestOptions)

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams
            } else {
                localVarRequestOptions.form = localVarFormParams
            }
        }
        return new Promise<{ response: http.ClientResponse, body: InlineResponse20014 }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error)
                } else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse20014")
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body })
                    } else {
                        reject({ response: response, body: body })
                    }
                }
            })
        })
    }
    /**
     * 拉取群信息列表
     * @summary 拉取群信息列表
     * @param serviceID 服务ID
     * @param platformGid 平台群ID
     */
    public imGroupRetrieveExtraGet(serviceID?: number, platformGid?: string): Promise<{ response: http.ClientResponse, body: InlineResponse200 }> {
        const localVarPath = this.basePath + '/im/group/retrieveExtra'
        let localVarQueryParameters: any = {}
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders)
        let localVarFormParams: any = {}

        if (serviceID !== undefined) {
            localVarQueryParameters['serviceID'] = ObjectSerializer.serialize(serviceID, "number")
        }

        if (platformGid !== undefined) {
            localVarQueryParameters['platformGid'] = ObjectSerializer.serialize(platformGid, "string")
        }


        let localVarUseFormData = false

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        }

        this.authentications.default.applyToRequest(localVarRequestOptions)

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams
            } else {
                localVarRequestOptions.form = localVarFormParams
            }
        }
        return new Promise<{ response: http.ClientResponse, body: InlineResponse200 }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error)
                } else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse200")
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body })
                    } else {
                        reject({ response: response, body: body })
                    }
                }
            })
        })
    }
    /**
     * 根据ID或平台群ID条件检索群信息
     * @summary 根据ID或平台群ID条件检索群信息
     * @param id ID
     * @param serviceID 服务ID
     * @param platformGid 平台群ID
     */
    public imGroupRetrieveGroupGet(id?: number, serviceID?: number, platformGid?: string): Promise<{ response: http.ClientResponse, body: InlineResponse20012 }> {
        const localVarPath = this.basePath + '/im/group/retrieveGroup'
        let localVarQueryParameters: any = {}
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders)
        let localVarFormParams: any = {}

        if (id !== undefined) {
            localVarQueryParameters['id'] = ObjectSerializer.serialize(id, "number")
        }

        if (serviceID !== undefined) {
            localVarQueryParameters['serviceID'] = ObjectSerializer.serialize(serviceID, "number")
        }

        if (platformGid !== undefined) {
            localVarQueryParameters['platformGid'] = ObjectSerializer.serialize(platformGid, "string")
        }


        let localVarUseFormData = false

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        }

        this.authentications.default.applyToRequest(localVarRequestOptions)

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams
            } else {
                localVarRequestOptions.form = localVarFormParams
            }
        }
        return new Promise<{ response: http.ClientResponse, body: InlineResponse20012 }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error)
                } else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse20012")
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body })
                    } else {
                        reject({ response: response, body: body })
                    }
                }
            })
        })
    }
    /**
     * 根据ID列表获取详情
     * @summary 根据ID列表获取详情
     * @param ids ID列表
     */
    public imGroupRetrieveGroupsGet(ids?: Array<number>): Promise<{ response: http.ClientResponse, body: InlineResponse20013 }> {
        const localVarPath = this.basePath + '/im/group/retrieveGroups'
        let localVarQueryParameters: any = {}
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders)
        let localVarFormParams: any = {}

        if (ids !== undefined) {
            localVarQueryParameters['ids'] = ObjectSerializer.serialize(ids, "Array<number>")
        }


        let localVarUseFormData = false

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        }

        this.authentications.default.applyToRequest(localVarRequestOptions)

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams
            } else {
                localVarRequestOptions.form = localVarFormParams
            }
        }
        return new Promise<{ response: http.ClientResponse, body: InlineResponse20013 }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error)
                } else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse20013")
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body })
                    } else {
                        reject({ response: response, body: body })
                    }
                }
            })
        })
    }
    /**
     * 更新群扩展字段
     * @summary 更新群扩展字段
     * @param pBIMUpdateGroupExtraReq 参数
     */
    public imGroupUpdateExtraPost(pBIMUpdateGroupExtraReq: PBIMUpdateGroupExtraReq): Promise<{ response: http.ClientResponse, body: InlineResponse2002 }> {
        const localVarPath = this.basePath + '/im/group/updateExtra'
        let localVarQueryParameters: any = {}
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders)
        let localVarFormParams: any = {}

        // verify required parameter 'pBIMUpdateGroupExtraReq' is not null or undefined
        if (pBIMUpdateGroupExtraReq === null || pBIMUpdateGroupExtraReq === undefined) {
            throw new Error('Required parameter pBIMUpdateGroupExtraReq was null or undefined when calling imGroupUpdateExtraPost.')
        }


        let localVarUseFormData = false

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(pBIMUpdateGroupExtraReq, "PBIMUpdateGroupExtraReq")
        }

        this.authentications.default.applyToRequest(localVarRequestOptions)

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams
            } else {
                localVarRequestOptions.form = localVarFormParams
            }
        }
        return new Promise<{ response: http.ClientResponse, body: InlineResponse2002 }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error)
                } else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse2002")
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body })
                    } else {
                        reject({ response: response, body: body })
                    }
                }
            })
        })
    }
    /**
     * 更新群信息
     * @summary 更新群信息
     * @param pBIMGroupDto 参数
     */
    public imGroupUpdateGroupPost(pBIMGroupDto: PBIMGroupDto): Promise<{ response: http.ClientResponse, body: InlineResponse2002 }> {
        const localVarPath = this.basePath + '/im/group/updateGroup'
        let localVarQueryParameters: any = {}
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders)
        let localVarFormParams: any = {}

        // verify required parameter 'pBIMGroupDto' is not null or undefined
        if (pBIMGroupDto === null || pBIMGroupDto === undefined) {
            throw new Error('Required parameter pBIMGroupDto was null or undefined when calling imGroupUpdateGroupPost.')
        }


        let localVarUseFormData = false

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(pBIMGroupDto, "PBIMGroupDto")
        }

        this.authentications.default.applyToRequest(localVarRequestOptions)

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams
            } else {
                localVarRequestOptions.form = localVarFormParams
            }
        }
        return new Promise<{ response: http.ClientResponse, body: InlineResponse2002 }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error)
                } else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse2002")
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body })
                    } else {
                        reject({ response: response, body: body })
                    }
                }
            })
        })
    }
}
export enum GroupMemberApiApiKeys {
}

export class GroupMemberApi {
    protected _basePath = defaultBasePath
    protected defaultHeaders: any = {}
    protected _useQuerystring: boolean = false

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
    }

    constructor(basePath?: string)
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value
    }

    set basePath(basePath: string) {
        this._basePath = basePath
    }

    get basePath() {
        return this._basePath
    }

    public setDefaultAuthentication(auth: Authentication) {
        this.authentications.default = auth
    }

    public setApiKey(key: GroupMemberApiApiKeys, value: string) {
        (this.authentications as any)[GroupMemberApiApiKeys[key]].apiKey = value
    }
    /**
     * 添加群成员信息
     * @summary 添加群成员信息
     * @param pBIMGroupMemberDto 参数
     */
    public imGroupCreateMemberPost(pBIMGroupMemberDto: GroupMemberCreate): Promise<{ response: http.ClientResponse, body: InlineResponse2002 }> {
        const localVarPath = this.basePath + '/im/group/createMember'
        let localVarQueryParameters: any = {}
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders)
        let localVarFormParams: any = {}

        // verify required parameter 'pBIMGroupMemberDto' is not null or undefined
        if (pBIMGroupMemberDto === null || pBIMGroupMemberDto === undefined) {
            throw new Error('Required parameter pBIMGroupMemberDto was null or undefined when calling imGroupCreateMemberPost.')
        }


        let localVarUseFormData = false

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(pBIMGroupMemberDto, "GroupMemberCreate")
        }

        this.authentications.default.applyToRequest(localVarRequestOptions)

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams
            } else {
                localVarRequestOptions.form = localVarFormParams
            }
        }
        return new Promise<{ response: http.ClientResponse, body: InlineResponse2002 }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error)
                } else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse2002")
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body })
                    } else {
                        reject({ response: response, body: body })
                    }
                }
            })
        })
    }
    /**
     * 删除群成员信息
     * @summary 删除群成员信息
     * @param pBIMGroupDto 参数
     */
    public imGroupDeleteMemberPost(pBIMGroupDto: PBIMGroupMemberDto): Promise<{ response: http.ClientResponse, body: InlineResponse2002 }> {
        const localVarPath = this.basePath + '/im/group/deleteMember'
        let localVarQueryParameters: any = {}
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders)
        let localVarFormParams: any = {}

        // verify required parameter 'pBIMGroupDto' is not null or undefined
        if (pBIMGroupDto === null || pBIMGroupDto === undefined) {
            throw new Error('Required parameter pBIMGroupDto was null or undefined when calling imGroupDeleteMemberPost.')
        }


        let localVarUseFormData = false

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(pBIMGroupDto, "PBIMGroupMemberDto")
        }

        this.authentications.default.applyToRequest(localVarRequestOptions)

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams
            } else {
                localVarRequestOptions.form = localVarFormParams
            }
        }
        return new Promise<{ response: http.ClientResponse, body: InlineResponse2002 }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error)
                } else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse2002")
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body })
                    } else {
                        reject({ response: response, body: body })
                    }
                }
            })
        })
    }
    /**
     * 分页获取群群内好友信息
     * @summary 分页获取群群内好友信息
     * @param serviceID 服务ID
     * @param platformGid 平台群ID
     * @param profilePlatformUid 运营号平台Uid
     * @param pageNo 页码
     * @param pageSize 每页条数限制
     */
    public imGroupFriendsGet(serviceID?: number, platformGid?: string, profilePlatformUid?: string, pageNo?: number, pageSize?: number): Promise<{ response: http.ClientResponse, body: InlineResponse20016 }> {
        const localVarPath = this.basePath + '/im/group/friends'
        let localVarQueryParameters: any = {}
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders)
        let localVarFormParams: any = {}

        if (serviceID !== undefined) {
            localVarQueryParameters['serviceID'] = ObjectSerializer.serialize(serviceID, "number")
        }

        if (platformGid !== undefined) {
            localVarQueryParameters['platformGid'] = ObjectSerializer.serialize(platformGid, "string")
        }

        if (profilePlatformUid !== undefined) {
            localVarQueryParameters['profilePlatformUid'] = ObjectSerializer.serialize(profilePlatformUid, "string")
        }

        if (pageNo !== undefined) {
            localVarQueryParameters['pageNo'] = ObjectSerializer.serialize(pageNo, "number")
        }

        if (pageSize !== undefined) {
            localVarQueryParameters['pageSize'] = ObjectSerializer.serialize(pageSize, "number")
        }


        let localVarUseFormData = false

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        }

        this.authentications.default.applyToRequest(localVarRequestOptions)

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams
            } else {
                localVarRequestOptions.form = localVarFormParams
            }
        }
        return new Promise<{ response: http.ClientResponse, body: InlineResponse20016 }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error)
                } else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse20016")
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body })
                    } else {
                        reject({ response: response, body: body })
                    }
                }
            })
        })
    }
    /**
     * 拉取群成员信息列表
     * @summary 拉取群成员信息列表
     * @param serviceID 服务ID
     * @param platformGid 平台群ID
     * @param startAt 起始时间戳
     * @param offset 偏移量
     * @param direction 查询方向 &gt&#x3D0 升序； &lt0 降序
     * @param limit 每页条数限制
     */
    public imGroupListMemberGet(serviceID?: number, platformGid?: string, startAt?: number, offset?: number, direction?: number, limit?: number): Promise<{ response: http.ClientResponse, body: InlineResponse20018 }> {
        const localVarPath = this.basePath + '/im/group/listMember'
        let localVarQueryParameters: any = {}
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders)
        let localVarFormParams: any = {}

        if (serviceID !== undefined) {
            localVarQueryParameters['serviceID'] = ObjectSerializer.serialize(serviceID, "number")
        }

        if (platformGid !== undefined) {
            localVarQueryParameters['platformGid'] = ObjectSerializer.serialize(platformGid, "string")
        }

        if (startAt !== undefined) {
            localVarQueryParameters['startAt'] = ObjectSerializer.serialize(startAt, "number")
        }

        if (offset !== undefined) {
            localVarQueryParameters['offset'] = ObjectSerializer.serialize(offset, "number")
        }

        if (direction !== undefined) {
            localVarQueryParameters['direction'] = ObjectSerializer.serialize(direction, "number")
        }

        if (limit !== undefined) {
            localVarQueryParameters['limit'] = ObjectSerializer.serialize(limit, "number")
        }


        let localVarUseFormData = false

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        }

        this.authentications.default.applyToRequest(localVarRequestOptions)

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams
            } else {
                localVarRequestOptions.form = localVarFormParams
            }
        }
        return new Promise<{ response: http.ClientResponse, body: InlineResponse20018 }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error)
                } else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse20018")
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body })
                    } else {
                        reject({ response: response, body: body })
                    }
                }
            })
        })
    }
    /**
     * 分页获取群成员信息
     * @summary 分页获取群成员信息
     * @param serviceID 服务ID
     * @param platformGid 平台群ID
     * @param startAt 起始时间戳
     * @param pageNo 页码
     * @param pageSize 每页条数限制
     * @param direction 查询方向 &gt&#x3D0 升序； &lt0 降序
     */
    public imGroupPageMemberGet(serviceID?: number, platformGid?: string, startAt?: number, pageNo?: number, pageSize?: number, direction?: number): Promise<{ response: http.ClientResponse, body: InlineResponse20016 }> {
        const localVarPath = this.basePath + '/im/group/pageMember'
        let localVarQueryParameters: any = {}
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders)
        let localVarFormParams: any = {}

        if (serviceID !== undefined) {
            localVarQueryParameters['serviceID'] = ObjectSerializer.serialize(serviceID, "number")
        }

        if (platformGid !== undefined) {
            localVarQueryParameters['platformGid'] = ObjectSerializer.serialize(platformGid, "string")
        }

        if (startAt !== undefined) {
            localVarQueryParameters['startAt'] = ObjectSerializer.serialize(startAt, "number")
        }

        if (pageNo !== undefined) {
            localVarQueryParameters['pageNo'] = ObjectSerializer.serialize(pageNo, "number")
        }

        if (pageSize !== undefined) {
            localVarQueryParameters['pageSize'] = ObjectSerializer.serialize(pageSize, "number")
        }

        if (direction !== undefined) {
            localVarQueryParameters['direction'] = ObjectSerializer.serialize(direction, "number")
        }


        let localVarUseFormData = false

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        }

        this.authentications.default.applyToRequest(localVarRequestOptions)

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams
            } else {
                localVarRequestOptions.form = localVarFormParams
            }
        }
        return new Promise<{ response: http.ClientResponse, body: InlineResponse20016 }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error)
                } else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse20016")
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body })
                    } else {
                        reject({ response: response, body: body })
                    }
                }
            })
        })
    }
    /**
     * 检索群成员信息，根据ID或组合条件
     * @summary 检索群成员信息，根据ID或组合条件
     * @param id 成员ID
     * @param serviceID 服务ID
     * @param platformGid 平台群ID
     * @param platformUid 成员平台Uid
     * @param customID 成员平台自定义ID
     */
    public imGroupRetrieveMemberGet(id?: number, serviceID?: number, platformGid?: string, platformUid?: string, customID?: string): Promise<{ response: http.ClientResponse, body: InlineResponse20017 }> {
        const localVarPath = this.basePath + '/im/group/retrieveMember'
        let localVarQueryParameters: any = {}
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders)
        let localVarFormParams: any = {}

        if (id !== undefined) {
            localVarQueryParameters['id'] = ObjectSerializer.serialize(id, "number")
        }

        if (serviceID !== undefined) {
            localVarQueryParameters['serviceID'] = ObjectSerializer.serialize(serviceID, "number")
        }

        if (platformGid !== undefined) {
            localVarQueryParameters['platformGid'] = ObjectSerializer.serialize(platformGid, "string")
        }

        if (platformUid !== undefined) {
            localVarQueryParameters['platformUid'] = ObjectSerializer.serialize(platformUid, "string")
        }

        if (customID !== undefined) {
            localVarQueryParameters['customID'] = ObjectSerializer.serialize(customID, "string")
        }


        let localVarUseFormData = false

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        }

        this.authentications.default.applyToRequest(localVarRequestOptions)

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams
            } else {
                localVarRequestOptions.form = localVarFormParams
            }
        }
        return new Promise<{ response: http.ClientResponse, body: InlineResponse20017 }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error)
                } else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse20017")
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body })
                    } else {
                        reject({ response: response, body: body })
                    }
                }
            })
        })
    }
    /**
     * 更新群成员信息
     * @summary 更新群成员信息
     * @param pBIMGroupMemberDto 参数
     */
    public imGroupUpdateMemberPost(pBIMGroupMemberDto: PBIMGroupMemberDto): Promise<{ response: http.ClientResponse, body: InlineResponse2002 }> {
        const localVarPath = this.basePath + '/im/group/UpdateMember'
        let localVarQueryParameters: any = {}
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders)
        let localVarFormParams: any = {}

        // verify required parameter 'pBIMGroupMemberDto' is not null or undefined
        if (pBIMGroupMemberDto === null || pBIMGroupMemberDto === undefined) {
            throw new Error('Required parameter pBIMGroupMemberDto was null or undefined when calling imGroupUpdateMemberPost.')
        }


        let localVarUseFormData = false

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(pBIMGroupMemberDto, "PBIMGroupMemberDto")
        }

        this.authentications.default.applyToRequest(localVarRequestOptions)

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams
            } else {
                localVarRequestOptions.form = localVarFormParams
            }
        }
        return new Promise<{ response: http.ClientResponse, body: InlineResponse2002 }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error)
                } else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse2002")
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body })
                    } else {
                        reject({ response: response, body: body })
                    }
                }
            })
        })
    }
}
export enum MessageApiApiKeys {
}

export class MessageApi {
    protected _basePath = defaultBasePath
    protected defaultHeaders: any = {}
    protected _useQuerystring: boolean = false

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
    }

    constructor(basePath?: string)
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value
    }

    set basePath(basePath: string) {
        this._basePath = basePath
    }

    get basePath() {
        return this._basePath
    }

    public setDefaultAuthentication(auth: Authentication) {
        this.authentications.default = auth
    }

    public setApiKey(key: MessageApiApiKeys, value: string) {
        (this.authentications as any)[MessageApiApiKeys[key]].apiKey = value
    }
    /**
     * 添加聊天消息
     * @summary 添加聊天消息
     * @param pBIMMessageDto 参数
     */
    public imMessageCreatePost(pBIMMessageDto: MessageCreate): Promise<{ response: http.ClientResponse, body: InlineResponse2002 }> {
        const localVarPath = this.basePath + '/im/message/create'
        let localVarQueryParameters: any = {}
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders)
        let localVarFormParams: any = {}

        // verify required parameter 'pBIMMessageDto' is not null or undefined
        if (pBIMMessageDto === null || pBIMMessageDto === undefined) {
            throw new Error('Required parameter pBIMMessageDto was null or undefined when calling imMessageCreatePost.')
        }


        let localVarUseFormData = false

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(pBIMMessageDto, "MessageCreate")
        }

        this.authentications.default.applyToRequest(localVarRequestOptions)

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams
            } else {
                localVarRequestOptions.form = localVarFormParams
            }
        }
        return new Promise<{ response: http.ClientResponse, body: InlineResponse2002 }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error)
                } else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse2002")
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body })
                    } else {
                        reject({ response: response, body: body })
                    }
                }
            })
        })
    }
    /**
     * 添加模板消息
     * @summary 添加模板消息
     * @param pBIMMessageDto 参数
     */
    public imMessageCreateTemplatePost(pBIMMessageDto: TemplateMessageCreate): Promise<{ response: http.ClientResponse, body: InlineResponse2002 }> {
        const localVarPath = this.basePath + '/im/message/createTemplate'
        let localVarQueryParameters: any = {}
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders)
        let localVarFormParams: any = {}

        // verify required parameter 'pBIMMessageDto' is not null or undefined
        if (pBIMMessageDto === null || pBIMMessageDto === undefined) {
            throw new Error('Required parameter pBIMMessageDto was null or undefined when calling imMessageCreateTemplatePost.')
        }


        let localVarUseFormData = false

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(pBIMMessageDto, "TemplateMessageCreate")
        }

        this.authentications.default.applyToRequest(localVarRequestOptions)

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams
            } else {
                localVarRequestOptions.form = localVarFormParams
            }
        }
        return new Promise<{ response: http.ClientResponse, body: InlineResponse2002 }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error)
                } else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse2002")
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body })
                    } else {
                        reject({ response: response, body: body })
                    }
                }
            })
        })
    }
    /**
     * 删除聊天消息
     * @summary 删除聊天消息
     * @param pBIMMessageDto 参数
     */
    public imMessageDeletePost(pBIMMessageDto: PBIMMessageDto): Promise<{ response: http.ClientResponse, body: InlineResponse2002 }> {
        const localVarPath = this.basePath + '/im/message/delete'
        let localVarQueryParameters: any = {}
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders)
        let localVarFormParams: any = {}

        // verify required parameter 'pBIMMessageDto' is not null or undefined
        if (pBIMMessageDto === null || pBIMMessageDto === undefined) {
            throw new Error('Required parameter pBIMMessageDto was null or undefined when calling imMessageDeletePost.')
        }


        let localVarUseFormData = false

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(pBIMMessageDto, "PBIMMessageDto")
        }

        this.authentications.default.applyToRequest(localVarRequestOptions)

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams
            } else {
                localVarRequestOptions.form = localVarFormParams
            }
        }
        return new Promise<{ response: http.ClientResponse, body: InlineResponse2002 }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error)
                } else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse2002")
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body })
                    } else {
                        reject({ response: response, body: body })
                    }
                }
            })
        })
    }
    /**
     * 删除模板消息
     * @summary 删除模板消息
     * @param pBIMTemplateMessageDto 参数
     */
    public imMessageDeleteTemplatePost(pBIMTemplateMessageDto: PBIMTemplateMessageDto): Promise<{ response: http.ClientResponse, body: InlineResponse2002 }> {
        const localVarPath = this.basePath + '/im/message/deleteTemplate'
        let localVarQueryParameters: any = {}
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders)
        let localVarFormParams: any = {}

        // verify required parameter 'pBIMTemplateMessageDto' is not null or undefined
        if (pBIMTemplateMessageDto === null || pBIMTemplateMessageDto === undefined) {
            throw new Error('Required parameter pBIMTemplateMessageDto was null or undefined when calling imMessageDeleteTemplatePost.')
        }


        let localVarUseFormData = false

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(pBIMTemplateMessageDto, "PBIMTemplateMessageDto")
        }

        this.authentications.default.applyToRequest(localVarRequestOptions)

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams
            } else {
                localVarRequestOptions.form = localVarFormParams
            }
        }
        return new Promise<{ response: http.ClientResponse, body: InlineResponse2002 }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error)
                } else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse2002")
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body })
                    } else {
                        reject({ response: response, body: body })
                    }
                }
            })
        })
    }
    /**
     * 拉取聊天消息列表
     * @summary 拉取聊天消息列表
     * @param serviceID 服务ID
     * @param profilePlatformUid 运营号平台Uid
     * @param platformUid 联系人平台Uid
     * @param platformGid 平台群ID
     * @param content 消息内容
     * @param startAt 起始时间戳
     * @param offset 偏移量
     * @param limit 每页条数限制
     */
    public imMessageListGet(serviceID?: number, profilePlatformUid?: string, platformUid?: string, platformGid?: string, content?: string, startAt?: number, offset?: number, limit?: number): Promise<{ response: http.ClientResponse, body: InlineResponse20020 }> {
        const localVarPath = this.basePath + '/im/message/list'
        let localVarQueryParameters: any = {}
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders)
        let localVarFormParams: any = {}

        if (serviceID !== undefined) {
            localVarQueryParameters['serviceID'] = ObjectSerializer.serialize(serviceID, "number")
        }

        if (profilePlatformUid !== undefined) {
            localVarQueryParameters['profilePlatformUid'] = ObjectSerializer.serialize(profilePlatformUid, "string")
        }

        if (platformUid !== undefined) {
            localVarQueryParameters['platformUid'] = ObjectSerializer.serialize(platformUid, "string")
        }

        if (platformGid !== undefined) {
            localVarQueryParameters['platformGid'] = ObjectSerializer.serialize(platformGid, "string")
        }

        if (content !== undefined) {
            localVarQueryParameters['content'] = ObjectSerializer.serialize(content, "string")
        }

        if (startAt !== undefined) {
            localVarQueryParameters['startAt'] = ObjectSerializer.serialize(startAt, "number")
        }

        if (offset !== undefined) {
            localVarQueryParameters['offset'] = ObjectSerializer.serialize(offset, "number")
        }

        if (limit !== undefined) {
            localVarQueryParameters['limit'] = ObjectSerializer.serialize(limit, "number")
        }


        let localVarUseFormData = false

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        }

        this.authentications.default.applyToRequest(localVarRequestOptions)

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams
            } else {
                localVarRequestOptions.form = localVarFormParams
            }
        }
        return new Promise<{ response: http.ClientResponse, body: InlineResponse20020 }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error)
                } else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse20020")
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body })
                    } else {
                        reject({ response: response, body: body })
                    }
                }
            })
        })
    }
    /**
     * 拉取模板消息列表
     * @summary 拉取模板消息列表
     * @param serviceID 服务ID
     * @param messageType 消息类型
     * @param startAt 起始时间戳
     * @param pageNo 页码
     * @param pageSize 每页条数限制
     * @param direction 查询方向 &gt&#x3D0 升序； &lt0 降序
     */
    public imMessagePageTemplateGet(serviceID?: number, messageType?: number, startAt?: number, pageNo?: number, pageSize?: number, direction?: number): Promise<{ response: http.ClientResponse, body: InlineResponse20022 }> {
        const localVarPath = this.basePath + '/im/message/pageTemplate'
        let localVarQueryParameters: any = {}
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders)
        let localVarFormParams: any = {}

        if (serviceID !== undefined) {
            localVarQueryParameters['serviceID'] = ObjectSerializer.serialize(serviceID, "number")
        }

        if (messageType !== undefined) {
            localVarQueryParameters['messageType'] = ObjectSerializer.serialize(messageType, "number")
        }

        if (startAt !== undefined) {
            localVarQueryParameters['startAt'] = ObjectSerializer.serialize(startAt, "number")
        }

        if (pageNo !== undefined) {
            localVarQueryParameters['pageNo'] = ObjectSerializer.serialize(pageNo, "number")
        }

        if (pageSize !== undefined) {
            localVarQueryParameters['pageSize'] = ObjectSerializer.serialize(pageSize, "number")
        }

        if (direction !== undefined) {
            localVarQueryParameters['direction'] = ObjectSerializer.serialize(direction, "number")
        }


        let localVarUseFormData = false

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        }

        this.authentications.default.applyToRequest(localVarRequestOptions)

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams
            } else {
                localVarRequestOptions.form = localVarFormParams
            }
        }
        return new Promise<{ response: http.ClientResponse, body: InlineResponse20022 }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error)
                } else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse20022")
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body })
                    } else {
                        reject({ response: response, body: body })
                    }
                }
            })
        })
    }
    /**
     * 检索聊天消息
     * @summary 检索聊天消息
     * @param id 消息ID
     */
    public imMessageRetrieveGet(id?: number): Promise<{ response: http.ClientResponse, body: InlineResponse20019 }> {
        const localVarPath = this.basePath + '/im/message/retrieve'
        let localVarQueryParameters: any = {}
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders)
        let localVarFormParams: any = {}

        if (id !== undefined) {
            localVarQueryParameters['id'] = ObjectSerializer.serialize(id, "number")
        }


        let localVarUseFormData = false

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        }

        this.authentications.default.applyToRequest(localVarRequestOptions)

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams
            } else {
                localVarRequestOptions.form = localVarFormParams
            }
        }
        return new Promise<{ response: http.ClientResponse, body: InlineResponse20019 }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error)
                } else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse20019")
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body })
                    } else {
                        reject({ response: response, body: body })
                    }
                }
            })
        })
    }
    /**
     * 检索模板消息
     * @summary 检索模板消息
     * @param id 模板消息ID
     */
    public imMessageRetrieveTemplateGet(id?: number): Promise<{ response: http.ClientResponse, body: InlineResponse20021 }> {
        const localVarPath = this.basePath + '/im/message/retrieveTemplate'
        let localVarQueryParameters: any = {}
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders)
        let localVarFormParams: any = {}

        if (id !== undefined) {
            localVarQueryParameters['id'] = ObjectSerializer.serialize(id, "number")
        }


        let localVarUseFormData = false

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        }

        this.authentications.default.applyToRequest(localVarRequestOptions)

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams
            } else {
                localVarRequestOptions.form = localVarFormParams
            }
        }
        return new Promise<{ response: http.ClientResponse, body: InlineResponse20021 }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error)
                } else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse20021")
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body })
                    } else {
                        reject({ response: response, body: body })
                    }
                }
            })
        })
    }
    /**
     * 撤销聊天消息
     * @summary 撤销聊天消息
     * @param pBIMMessageDto 参数
     */
    public imMessageRevokePost(pBIMMessageDto: PBIMMessageDto): Promise<{ response: http.ClientResponse, body: InlineResponse2002 }> {
        const localVarPath = this.basePath + '/im/message/revoke'
        let localVarQueryParameters: any = {}
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders)
        let localVarFormParams: any = {}

        // verify required parameter 'pBIMMessageDto' is not null or undefined
        if (pBIMMessageDto === null || pBIMMessageDto === undefined) {
            throw new Error('Required parameter pBIMMessageDto was null or undefined when calling imMessageRevokePost.')
        }


        let localVarUseFormData = false

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(pBIMMessageDto, "PBIMMessageDto")
        }

        this.authentications.default.applyToRequest(localVarRequestOptions)

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams
            } else {
                localVarRequestOptions.form = localVarFormParams
            }
        }
        return new Promise<{ response: http.ClientResponse, body: InlineResponse2002 }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error)
                } else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse2002")
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body })
                    } else {
                        reject({ response: response, body: body })
                    }
                }
            })
        })
    }
    /**
     * 更新聊天消息
     * @summary 更新聊天消息
     * @param pBIMMessageDto 参数
     */
    public imMessageUpdatePost(pBIMMessageDto: PBIMMessageDto): Promise<{ response: http.ClientResponse, body: InlineResponse2002 }> {
        const localVarPath = this.basePath + '/im/message/update'
        let localVarQueryParameters: any = {}
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders)
        let localVarFormParams: any = {}

        // verify required parameter 'pBIMMessageDto' is not null or undefined
        if (pBIMMessageDto === null || pBIMMessageDto === undefined) {
            throw new Error('Required parameter pBIMMessageDto was null or undefined when calling imMessageUpdatePost.')
        }


        let localVarUseFormData = false

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(pBIMMessageDto, "PBIMMessageDto")
        }

        this.authentications.default.applyToRequest(localVarRequestOptions)

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams
            } else {
                localVarRequestOptions.form = localVarFormParams
            }
        }
        return new Promise<{ response: http.ClientResponse, body: InlineResponse2002 }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error)
                } else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse2002")
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body })
                    } else {
                        reject({ response: response, body: body })
                    }
                }
            })
        })
    }
    /**
     * 更新模板消息
     * @summary 更新模板消息
     * @param pBIMTemplateMessageDto 参数
     */
    public imMessageUpdateTemplatePost(pBIMTemplateMessageDto: PBIMTemplateMessageDto): Promise<{ response: http.ClientResponse, body: InlineResponse2002 }> {
        const localVarPath = this.basePath + '/im/message/updateTemplate'
        let localVarQueryParameters: any = {}
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders)
        let localVarFormParams: any = {}

        // verify required parameter 'pBIMTemplateMessageDto' is not null or undefined
        if (pBIMTemplateMessageDto === null || pBIMTemplateMessageDto === undefined) {
            throw new Error('Required parameter pBIMTemplateMessageDto was null or undefined when calling imMessageUpdateTemplatePost.')
        }


        let localVarUseFormData = false

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(pBIMTemplateMessageDto, "PBIMTemplateMessageDto")
        }

        this.authentications.default.applyToRequest(localVarRequestOptions)

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams
            } else {
                localVarRequestOptions.form = localVarFormParams
            }
        }
        return new Promise<{ response: http.ClientResponse, body: InlineResponse2002 }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error)
                } else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse2002")
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body })
                    } else {
                        reject({ response: response, body: body })
                    }
                }
            })
        })
    }
}
export enum ProfileApiApiKeys {
}

export class ProfileApi {
    protected _basePath = defaultBasePath
    protected defaultHeaders: any = {}
    protected _useQuerystring: boolean = false

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
    }

    constructor(basePath?: string)
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value
    }

    set basePath(basePath: string) {
        this._basePath = basePath
    }

    get basePath() {
        return this._basePath
    }

    public setDefaultAuthentication(auth: Authentication) {
        this.authentications.default = auth
    }

    public setApiKey(key: ProfileApiApiKeys, value: string) {
        (this.authentications as any)[ProfileApiApiKeys[key]].apiKey = value
    }
    /**
     * 拉取运营号的联系人id列表
     * @summary 拉取运营号的联系人id列表
     * @param serviceID 服务ID
     * @param platformUid 运营号平台Uid
     * @param customID 运营号平台自定义ID
     */
    public imProfileContactsGet(serviceID?: number, platformUid?: string, customID?: string): Promise<{ response: http.ClientResponse, body: InlineResponse20024 }> {
        const localVarPath = this.basePath + '/im/profile/contacts'
        let localVarQueryParameters: any = {}
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders)
        let localVarFormParams: any = {}

        if (serviceID !== undefined) {
            localVarQueryParameters['serviceID'] = ObjectSerializer.serialize(serviceID, "number")
        }

        if (platformUid !== undefined) {
            localVarQueryParameters['platformUid'] = ObjectSerializer.serialize(platformUid, "string")
        }

        if (customID !== undefined) {
            localVarQueryParameters['customID'] = ObjectSerializer.serialize(customID, "string")
        }


        let localVarUseFormData = false

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        }

        this.authentications.default.applyToRequest(localVarRequestOptions)

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams
            } else {
                localVarRequestOptions.form = localVarFormParams
            }
        }
        return new Promise<{ response: http.ClientResponse, body: InlineResponse20024 }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error)
                } else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse20024")
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body })
                    } else {
                        reject({ response: response, body: body })
                    }
                }
            })
        })
    }
    /**
     * 添加运营号操作记录
     * @summary 添加运营号操作记录
     * @param pBIMActionDto 参数
     */
    public imProfileCreateActionPost(pBIMActionDto: ActionCreate): Promise<{ response: http.ClientResponse, body: InlineResponse2002 }> {
        const localVarPath = this.basePath + '/im/profile/createAction'
        let localVarQueryParameters: any = {}
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders)
        let localVarFormParams: any = {}

        // verify required parameter 'pBIMActionDto' is not null or undefined
        if (pBIMActionDto === null || pBIMActionDto === undefined) {
            throw new Error('Required parameter pBIMActionDto was null or undefined when calling imProfileCreateActionPost.')
        }


        let localVarUseFormData = false

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(pBIMActionDto, "ActionCreate")
        }

        this.authentications.default.applyToRequest(localVarRequestOptions)

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams
            } else {
                localVarRequestOptions.form = localVarFormParams
            }
        }
        return new Promise<{ response: http.ClientResponse, body: InlineResponse2002 }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error)
                } else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse2002")
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body })
                    } else {
                        reject({ response: response, body: body })
                    }
                }
            })
        })
    }
    /**
     * 添加运营号默认的配置
     * @summary 添加运营默认的配置
     * @param pBIMControlCreate 参数
     */
    public imProfileCreateControlPost(pBIMControlCreate: ControlCreate): Promise<{ response: http.ClientResponse, body: InlineResponse2002 }> {
        const localVarPath = this.basePath + '/im/profile/createControl'
        let localVarQueryParameters: any = {}
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders)
        let localVarFormParams: any = {}

        // verify required parameter 'pBIMControlCreate' is not null or undefined
        if (pBIMControlCreate === null || pBIMControlCreate === undefined) {
            throw new Error('Required parameter pBIMControlCreate was null or undefined when calling imProfileCreateControlPost.')
        }


        let localVarUseFormData = false

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(pBIMControlCreate, "ControlCreate")
        }

        this.authentications.default.applyToRequest(localVarRequestOptions)

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams
            } else {
                localVarRequestOptions.form = localVarFormParams
            }
        }
        return new Promise<{ response: http.ClientResponse, body: InlineResponse2002 }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error)
                } else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse2002")
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body })
                    } else {
                        reject({ response: response, body: body })
                    }
                }
            })
        })
    }
    /**
     * 添加运营号信息
     * @summary 添加运营号信息
     * @param pBIMProfileDto 参数
     */
    public imProfileCreatePost(pBIMProfileDto: ProfileCreate): Promise<{ response: http.ClientResponse, body: InlineResponse2002 }> {
        const localVarPath = this.basePath + '/im/profile/create'
        let localVarQueryParameters: any = {}
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders)
        let localVarFormParams: any = {}

        // verify required parameter 'pBIMProfileDto' is not null or undefined
        if (pBIMProfileDto === null || pBIMProfileDto === undefined) {
            throw new Error('Required parameter pBIMProfileDto was null or undefined when calling imProfileCreatePost.')
        }


        let localVarUseFormData = false

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(pBIMProfileDto, "ProfileCreate")
        }

        this.authentications.default.applyToRequest(localVarRequestOptions)

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams
            } else {
                localVarRequestOptions.form = localVarFormParams
            }
        }
        return new Promise<{ response: http.ClientResponse, body: InlineResponse2002 }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error)
                } else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse2002")
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body })
                    } else {
                        reject({ response: response, body: body })
                    }
                }
            })
        })
    }
    /**
     * 删除运营号操作记录
     * @summary 删除运营号操作记录
     * @param pBIMActionDto 参数
     */
    public imProfileDeleteActionPost(pBIMActionDto: PBIMActionDto): Promise<{ response: http.ClientResponse, body: InlineResponse2002 }> {
        const localVarPath = this.basePath + '/im/profile/deleteAction'
        let localVarQueryParameters: any = {}
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders)
        let localVarFormParams: any = {}

        // verify required parameter 'pBIMActionDto' is not null or undefined
        if (pBIMActionDto === null || pBIMActionDto === undefined) {
            throw new Error('Required parameter pBIMActionDto was null or undefined when calling imProfileDeleteActionPost.')
        }


        let localVarUseFormData = false

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(pBIMActionDto, "PBIMActionDto")
        }

        this.authentications.default.applyToRequest(localVarRequestOptions)

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams
            } else {
                localVarRequestOptions.form = localVarFormParams
            }
        }
        return new Promise<{ response: http.ClientResponse, body: InlineResponse2002 }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error)
                } else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse2002")
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body })
                    } else {
                        reject({ response: response, body: body })
                    }
                }
            })
        })
    }
    /**
     * 删除运营配置信息
     * @summary 删除运营配置信息
     * @param pBIMControlDto 参数
     */
    public imProfileDeleteControlPost(pBIMControlDto: PBIMControlDto): Promise<{ response: http.ClientResponse, body: InlineResponse2002 }> {
        const localVarPath = this.basePath + '/im/profile/deleteControl'
        let localVarQueryParameters: any = {}
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders)
        let localVarFormParams: any = {}

        // verify required parameter 'pBIMControlDto' is not null or undefined
        if (pBIMControlDto === null || pBIMControlDto === undefined) {
            throw new Error('Required parameter pBIMControlDto was null or undefined when calling imProfileDeleteControlPost.')
        }


        let localVarUseFormData = false

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(pBIMControlDto, "PBIMControlDto")
        }

        this.authentications.default.applyToRequest(localVarRequestOptions)

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams
            } else {
                localVarRequestOptions.form = localVarFormParams
            }
        }
        return new Promise<{ response: http.ClientResponse, body: InlineResponse2002 }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error)
                } else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse2002")
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body })
                    } else {
                        reject({ response: response, body: body })
                    }
                }
            })
        })
    }
    /**
     * 删除运营号信息
     * @summary 删除运营号信息
     * @param pBIMProfileDto 参数
     */
    public imProfileDeletePost(pBIMProfileDto: PBIMProfileDto): Promise<{ response: http.ClientResponse, body: InlineResponse2002 }> {
        const localVarPath = this.basePath + '/im/profile/delete'
        let localVarQueryParameters: any = {}
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders)
        let localVarFormParams: any = {}

        // verify required parameter 'pBIMProfileDto' is not null or undefined
        if (pBIMProfileDto === null || pBIMProfileDto === undefined) {
            throw new Error('Required parameter pBIMProfileDto was null or undefined when calling imProfileDeletePost.')
        }


        let localVarUseFormData = false

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(pBIMProfileDto, "PBIMProfileDto")
        }

        this.authentications.default.applyToRequest(localVarRequestOptions)

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams
            } else {
                localVarRequestOptions.form = localVarFormParams
            }
        }
        return new Promise<{ response: http.ClientResponse, body: InlineResponse2002 }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error)
                } else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse2002")
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body })
                    } else {
                        reject({ response: response, body: body })
                    }
                }
            })
        })
    }
    /**
     * 拉取运营号操作记录
     * @summary 拉取运营号操作记录
     * @param serviceID 服务ID
     * @param profilePlatformUid 运营号平台Uid
     * @param platformUid 平联系人台Uid
     * @param startAt 起始时间戳
     * @param offset 偏移量
     * @param direction 查询方向 &gt&#x3D0 升序； &lt0 降序
     * @param limit 每页条数限制
     */
    public imProfileListActionGet(serviceID?: number, profilePlatformUid?: string, platformUid?: string, startAt?: number, offset?: number, direction?: number, limit?: number): Promise<{ response: http.ClientResponse, body: InlineResponse20033 }> {
        const localVarPath = this.basePath + '/im/profile/listAction'
        let localVarQueryParameters: any = {}
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders)
        let localVarFormParams: any = {}

        if (serviceID !== undefined) {
            localVarQueryParameters['serviceID'] = ObjectSerializer.serialize(serviceID, "number")
        }

        if (profilePlatformUid !== undefined) {
            localVarQueryParameters['profilePlatformUid'] = ObjectSerializer.serialize(profilePlatformUid, "string")
        }

        if (platformUid !== undefined) {
            localVarQueryParameters['platformUid'] = ObjectSerializer.serialize(platformUid, "string")
        }

        if (startAt !== undefined) {
            localVarQueryParameters['startAt'] = ObjectSerializer.serialize(startAt, "number")
        }

        if (offset !== undefined) {
            localVarQueryParameters['offset'] = ObjectSerializer.serialize(offset, "number")
        }

        if (direction !== undefined) {
            localVarQueryParameters['direction'] = ObjectSerializer.serialize(direction, "number")
        }

        if (limit !== undefined) {
            localVarQueryParameters['limit'] = ObjectSerializer.serialize(limit, "number")
        }


        let localVarUseFormData = false

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        }

        this.authentications.default.applyToRequest(localVarRequestOptions)

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams
            } else {
                localVarRequestOptions.form = localVarFormParams
            }
        }
        return new Promise<{ response: http.ClientResponse, body: InlineResponse20033 }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error)
                } else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse20033")
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body })
                    } else {
                        reject({ response: response, body: body })
                    }
                }
            })
        })
    }
    /**
     * 拉取运营配置信息列表
     * @summary 拉取运营配置信息列表
     * @param serviceID 服务ID
     * @param startAt 起始时间戳
     * @param offset 偏移量
     * @param direction 查询方向 &gt&#x3D0 升序； &lt0 降序
     * @param limit 每页条数限制
     */
    public imProfileListControlGet(serviceID?: number, startAt?: number, offset?: number, direction?: number, limit?: number): Promise<{ response: http.ClientResponse, body: InlineResponse20030 }> {
        const localVarPath = this.basePath + '/im/profile/listControl'
        let localVarQueryParameters: any = {}
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders)
        let localVarFormParams: any = {}

        if (serviceID !== undefined) {
            localVarQueryParameters['serviceID'] = ObjectSerializer.serialize(serviceID, "number")
        }

        if (startAt !== undefined) {
            localVarQueryParameters['startAt'] = ObjectSerializer.serialize(startAt, "number")
        }

        if (offset !== undefined) {
            localVarQueryParameters['offset'] = ObjectSerializer.serialize(offset, "number")
        }

        if (direction !== undefined) {
            localVarQueryParameters['direction'] = ObjectSerializer.serialize(direction, "number")
        }

        if (limit !== undefined) {
            localVarQueryParameters['limit'] = ObjectSerializer.serialize(limit, "number")
        }


        let localVarUseFormData = false

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        }

        this.authentications.default.applyToRequest(localVarRequestOptions)

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams
            } else {
                localVarRequestOptions.form = localVarFormParams
            }
        }
        return new Promise<{ response: http.ClientResponse, body: InlineResponse20030 }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error)
                } else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse20030")
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body })
                    } else {
                        reject({ response: response, body: body })
                    }
                }
            })
        })
    }
    /**
     * 拉取运营号信息列表
     * @summary 拉取运营号信息列表
     * @param serviceID 服务ID
     * @param startAt 起始时间戳
     * @param offset 偏移量
     * @param direction 查询方向 &gt&#x3D0 升序； &lt0 降序
     * @param limit 每页条数限制
     */
    public imProfileListGet(serviceID?: number, startAt?: number, offset?: number, direction?: number, limit?: number): Promise<{ response: http.ClientResponse, body: InlineResponse20026 }> {
        const localVarPath = this.basePath + '/im/profile/list'
        let localVarQueryParameters: any = {}
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders)
        let localVarFormParams: any = {}

        if (serviceID !== undefined) {
            localVarQueryParameters['serviceID'] = ObjectSerializer.serialize(serviceID, "number")
        }

        if (startAt !== undefined) {
            localVarQueryParameters['startAt'] = ObjectSerializer.serialize(startAt, "number")
        }

        if (offset !== undefined) {
            localVarQueryParameters['offset'] = ObjectSerializer.serialize(offset, "number")
        }

        if (direction !== undefined) {
            localVarQueryParameters['direction'] = ObjectSerializer.serialize(direction, "number")
        }

        if (limit !== undefined) {
            localVarQueryParameters['limit'] = ObjectSerializer.serialize(limit, "number")
        }


        let localVarUseFormData = false

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        }

        this.authentications.default.applyToRequest(localVarRequestOptions)

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams
            } else {
                localVarRequestOptions.form = localVarFormParams
            }
        }
        return new Promise<{ response: http.ClientResponse, body: InlineResponse20026 }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error)
                } else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse20026")
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body })
                    } else {
                        reject({ response: response, body: body })
                    }
                }
            })
        })
    }
    /**
     * 分页获取运营号操作记录
     * @summary 分页获取运营号操作记录
     * @param serviceID 服务ID
     * @param profilePlatformUid 运营号平台Uid
     * @param platformUid 平联系人台Uid
     * @param startAt 起始时间戳
     * @param pageNo 页码
     * @param pageSize 每页条数限制
     * @param direction 查询方向 &gt&#x3D0 升序； &lt0 降序
     */
    public imProfilePageActionGet(serviceID?: number, profilePlatformUid?: string, platformUid?: string, startAt?: number, pageNo?: number, pageSize?: number, direction?: number): Promise<{ response: http.ClientResponse, body: InlineResponse20032 }> {
        const localVarPath = this.basePath + '/im/profile/pageAction'
        let localVarQueryParameters: any = {}
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders)
        let localVarFormParams: any = {}

        if (serviceID !== undefined) {
            localVarQueryParameters['serviceID'] = ObjectSerializer.serialize(serviceID, "number")
        }

        if (profilePlatformUid !== undefined) {
            localVarQueryParameters['profilePlatformUid'] = ObjectSerializer.serialize(profilePlatformUid, "string")
        }

        if (platformUid !== undefined) {
            localVarQueryParameters['platformUid'] = ObjectSerializer.serialize(platformUid, "string")
        }

        if (startAt !== undefined) {
            localVarQueryParameters['startAt'] = ObjectSerializer.serialize(startAt, "number")
        }

        if (pageNo !== undefined) {
            localVarQueryParameters['pageNo'] = ObjectSerializer.serialize(pageNo, "number")
        }

        if (pageSize !== undefined) {
            localVarQueryParameters['pageSize'] = ObjectSerializer.serialize(pageSize, "number")
        }

        if (direction !== undefined) {
            localVarQueryParameters['direction'] = ObjectSerializer.serialize(direction, "number")
        }


        let localVarUseFormData = false

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        }

        this.authentications.default.applyToRequest(localVarRequestOptions)

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams
            } else {
                localVarRequestOptions.form = localVarFormParams
            }
        }
        return new Promise<{ response: http.ClientResponse, body: InlineResponse20032 }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error)
                } else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse20032")
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body })
                    } else {
                        reject({ response: response, body: body })
                    }
                }
            })
        })
    }
    /**
     * 分页获取运营配置信息
     * @summary 分页获取运营配置信息
     * @param serviceID 服务ID
     * @param startAt 起始时间戳
     * @param pageNo 页码
     * @param pageSize 每页条数限制
     * @param direction 查询方向 &gt&#x3D0 升序； &lt0 降序
     */
    public imProfilePageControlGet(serviceID?: number, startAt?: number, pageNo?: number, pageSize?: number, direction?: number): Promise<{ response: http.ClientResponse, body: InlineResponse20029 }> {
        const localVarPath = this.basePath + '/im/profile/pageControl'
        let localVarQueryParameters: any = {}
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders)
        let localVarFormParams: any = {}

        if (serviceID !== undefined) {
            localVarQueryParameters['serviceID'] = ObjectSerializer.serialize(serviceID, "number")
        }

        if (startAt !== undefined) {
            localVarQueryParameters['startAt'] = ObjectSerializer.serialize(startAt, "number")
        }

        if (pageNo !== undefined) {
            localVarQueryParameters['pageNo'] = ObjectSerializer.serialize(pageNo, "number")
        }

        if (pageSize !== undefined) {
            localVarQueryParameters['pageSize'] = ObjectSerializer.serialize(pageSize, "number")
        }

        if (direction !== undefined) {
            localVarQueryParameters['direction'] = ObjectSerializer.serialize(direction, "number")
        }


        let localVarUseFormData = false

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        }

        this.authentications.default.applyToRequest(localVarRequestOptions)

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams
            } else {
                localVarRequestOptions.form = localVarFormParams
            }
        }
        return new Promise<{ response: http.ClientResponse, body: InlineResponse20029 }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error)
                } else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse20029")
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body })
                    } else {
                        reject({ response: response, body: body })
                    }
                }
            })
        })
    }
    /**
     * 重粉列表分页查询
     * @summary 重粉列表分页查询
     * @param serviceID 服务ID
     * @param platformUid 运营号平台Uid
     * @param customID 运营号自定义ID
     * @param pageNo 页码
     * @param pageSize 每页条数限制
     */
    public imProfilePageDupContactGet(serviceID?: number, platformUid?: string, customID?: string, pageNo?: number, pageSize?: number): Promise<{ response: http.ClientResponse, body: InlineResponse20011 }> {
        const localVarPath = this.basePath + '/im/profile/pageDupContact'
        let localVarQueryParameters: any = {}
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders)
        let localVarFormParams: any = {}

        if (serviceID !== undefined) {
            localVarQueryParameters['serviceID'] = ObjectSerializer.serialize(serviceID, "number")
        }

        if (platformUid !== undefined) {
            localVarQueryParameters['platformUid'] = ObjectSerializer.serialize(platformUid, "string")
        }

        if (customID !== undefined) {
            localVarQueryParameters['customID'] = ObjectSerializer.serialize(customID, "string")
        }

        if (pageNo !== undefined) {
            localVarQueryParameters['pageNo'] = ObjectSerializer.serialize(pageNo, "number")
        }

        if (pageSize !== undefined) {
            localVarQueryParameters['pageSize'] = ObjectSerializer.serialize(pageSize, "number")
        }


        let localVarUseFormData = false

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        }

        this.authentications.default.applyToRequest(localVarRequestOptions)

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams
            } else {
                localVarRequestOptions.form = localVarFormParams
            }
        }
        return new Promise<{ response: http.ClientResponse, body: InlineResponse20011 }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error)
                } else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse20011")
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body })
                    } else {
                        reject({ response: response, body: body })
                    }
                }
            })
        })
    }
    /**
     * 运营号重粉统计查询
     * @summary 运营号重粉统计查询
     * @param serviceID 服务ID
     * @param platformUid 运营号平台Uid
     * @param pageNo 页码
     * @param pageSize 每页条数限制
     * @param direction 查询方向 &gt&#x3D0 升序； &lt0 降序
     */
    public imProfilePageDupFansGet(serviceID?: number, platformUid?: string, pageNo?: number, pageSize?: number, direction?: number): Promise<{ response: http.ClientResponse, body: InlineResponse20027 }> {
        const localVarPath = this.basePath + '/im/profile/pageDupFans'
        let localVarQueryParameters: any = {}
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders)
        let localVarFormParams: any = {}

        if (serviceID !== undefined) {
            localVarQueryParameters['serviceID'] = ObjectSerializer.serialize(serviceID, "number")
        }

        if (platformUid !== undefined) {
            localVarQueryParameters['platformUid'] = ObjectSerializer.serialize(platformUid, "string")
        }

        if (pageNo !== undefined) {
            localVarQueryParameters['pageNo'] = ObjectSerializer.serialize(pageNo, "number")
        }

        if (pageSize !== undefined) {
            localVarQueryParameters['pageSize'] = ObjectSerializer.serialize(pageSize, "number")
        }

        if (direction !== undefined) {
            localVarQueryParameters['direction'] = ObjectSerializer.serialize(direction, "number")
        }


        let localVarUseFormData = false

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        }

        this.authentications.default.applyToRequest(localVarRequestOptions)

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams
            } else {
                localVarRequestOptions.form = localVarFormParams
            }
        }
        return new Promise<{ response: http.ClientResponse, body: InlineResponse20027 }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error)
                } else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse20027")
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body })
                    } else {
                        reject({ response: response, body: body })
                    }
                }
            })
        })
    }
    /**
     * 分页获取运营号信息
     * @summary 分页获取运营号信息
     * @param serviceID 服务ID
     * @param startAt 起始时间戳
     * @param pageNo 页码
     * @param pageSize 每页条数限制
     * @param direction 查询方向 &gt&#x3D0 升序； &lt0 降序
     */
    public imProfilePageGet(serviceID?: number, startAt?: number, pageNo?: number, pageSize?: number, direction?: number): Promise<{ response: http.ClientResponse, body: InlineResponse20025 }> {
        const localVarPath = this.basePath + '/im/profile/page'
        let localVarQueryParameters: any = {}
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders)
        let localVarFormParams: any = {}

        if (serviceID !== undefined) {
            localVarQueryParameters['serviceID'] = ObjectSerializer.serialize(serviceID, "number")
        }

        if (startAt !== undefined) {
            localVarQueryParameters['startAt'] = ObjectSerializer.serialize(startAt, "number")
        }

        if (pageNo !== undefined) {
            localVarQueryParameters['pageNo'] = ObjectSerializer.serialize(pageNo, "number")
        }

        if (pageSize !== undefined) {
            localVarQueryParameters['pageSize'] = ObjectSerializer.serialize(pageSize, "number")
        }

        if (direction !== undefined) {
            localVarQueryParameters['direction'] = ObjectSerializer.serialize(direction, "number")
        }


        let localVarUseFormData = false

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        }

        this.authentications.default.applyToRequest(localVarRequestOptions)

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams
            } else {
                localVarRequestOptions.form = localVarFormParams
            }
        }
        return new Promise<{ response: http.ClientResponse, body: InlineResponse20025 }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error)
                } else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse20025")
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body })
                    } else {
                        reject({ response: response, body: body })
                    }
                }
            })
        })
    }
    /**
     * 检索运营号操作记录
     * @summary 检索运营号操作记录
     * @param id ID
     */
    public imProfileRetrieveActionGet(id?: number): Promise<{ response: http.ClientResponse, body: InlineResponse20031 }> {
        const localVarPath = this.basePath + '/im/profile/retrieveAction'
        let localVarQueryParameters: any = {}
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders)
        let localVarFormParams: any = {}

        if (id !== undefined) {
            localVarQueryParameters['id'] = ObjectSerializer.serialize(id, "number")
        }


        let localVarUseFormData = false

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        }

        this.authentications.default.applyToRequest(localVarRequestOptions)

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams
            } else {
                localVarRequestOptions.form = localVarFormParams
            }
        }
        return new Promise<{ response: http.ClientResponse, body: InlineResponse20031 }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error)
                } else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse20031")
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body })
                    } else {
                        reject({ response: response, body: body })
                    }
                }
            })
        })
    }
    /**
     * 根据ID列表获取详情
     * @summary 根据ID列表获取详情
     * @param contactIDs ID列表
     */
    public imProfileRetrieveByContactIDsGet(contactIDs?: Array<number>): Promise<{ response: http.ClientResponse, body: InlineResponse20024 }> {
        const localVarPath = this.basePath + '/im/profile/retrieveByContactIDs'
        let localVarQueryParameters: any = {}
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders)
        let localVarFormParams: any = {}

        if (contactIDs !== undefined) {
            localVarQueryParameters['contactIDs'] = ObjectSerializer.serialize(contactIDs, "Array<number>")
        }


        let localVarUseFormData = false

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        }

        this.authentications.default.applyToRequest(localVarRequestOptions)

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams
            } else {
                localVarRequestOptions.form = localVarFormParams
            }
        }
        return new Promise<{ response: http.ClientResponse, body: InlineResponse20024 }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error)
                } else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse20024")
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body })
                    } else {
                        reject({ response: response, body: body })
                    }
                }
            })
        })
    }
    /**
     * 检索运营号信息
     * @summary 检索运营号信息
     * @param udid 设备唯一ID
     */
    public imProfileRetrieveByUDIDGet(udid?: string): Promise<{ response: http.ClientResponse, body: InlineResponse20023 }> {
        const localVarPath = this.basePath + '/im/profile/retrieveByUDID'
        let localVarQueryParameters: any = {}
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders)
        let localVarFormParams: any = {}

        if (udid !== undefined) {
            localVarQueryParameters['udid'] = ObjectSerializer.serialize(udid, "string")
        }


        let localVarUseFormData = false

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        }

        this.authentications.default.applyToRequest(localVarRequestOptions)

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams
            } else {
                localVarRequestOptions.form = localVarFormParams
            }
        }
        return new Promise<{ response: http.ClientResponse, body: InlineResponse20023 }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error)
                } else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse20023")
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body })
                    } else {
                        reject({ response: response, body: body })
                    }
                }
            })
        })
    }
    /**
     * 检索运营配置信息
     * @summary 检索运营配置信息
     * @param id ID
     * @param serviceID 服务ID
     * @param type 配置类型
     */
    public imProfileRetrieveControlGet(id?: number, serviceID?: number, type?: string): Promise<{ response: http.ClientResponse, body: InlineResponse20028 }> {
        const localVarPath = this.basePath + '/im/profile/retrieveControl'
        let localVarQueryParameters: any = {}
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders)
        let localVarFormParams: any = {}

        if (id !== undefined) {
            localVarQueryParameters['id'] = ObjectSerializer.serialize(id, "number")
        }

        if (serviceID !== undefined) {
            localVarQueryParameters['serviceID'] = ObjectSerializer.serialize(serviceID, "number")
        }

        if (type !== undefined) {
            localVarQueryParameters['type'] = ObjectSerializer.serialize(type, "string")
        }


        let localVarUseFormData = false

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        }

        this.authentications.default.applyToRequest(localVarRequestOptions)

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams
            } else {
                localVarRequestOptions.form = localVarFormParams
            }
        }
        return new Promise<{ response: http.ClientResponse, body: InlineResponse20028 }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error)
                } else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse20028")
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body })
                    } else {
                        reject({ response: response, body: body })
                    }
                }
            })
        })
    }
    /**
     * 检索运营号信息
     * @summary 检索运营号信息
     * @param id 运营号ID
     * @param serviceID 服务ID
     * @param platformUid 运营号平台Uid
     * @param customID 运营号平台自定义ID
     */
    public imProfileRetrieveGet(id?: number, serviceID?: number, platformUid?: string, customID?: string): Promise<{ response: http.ClientResponse, body: InlineResponse20023 }> {
        const localVarPath = this.basePath + '/im/profile/retrieve'
        let localVarQueryParameters: any = {}
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders)
        let localVarFormParams: any = {}

        if (id !== undefined) {
            localVarQueryParameters['id'] = ObjectSerializer.serialize(id, "number")
        }

        if (serviceID !== undefined) {
            localVarQueryParameters['serviceID'] = ObjectSerializer.serialize(serviceID, "number")
        }

        if (platformUid !== undefined) {
            localVarQueryParameters['platformUid'] = ObjectSerializer.serialize(platformUid, "string")
        }

        if (customID !== undefined) {
            localVarQueryParameters['customID'] = ObjectSerializer.serialize(customID, "string")
        }


        let localVarUseFormData = false

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        }

        this.authentications.default.applyToRequest(localVarRequestOptions)

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams
            } else {
                localVarRequestOptions.form = localVarFormParams
            }
        }
        return new Promise<{ response: http.ClientResponse, body: InlineResponse20023 }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error)
                } else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse20023")
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body })
                    } else {
                        reject({ response: response, body: body })
                    }
                }
            })
        })
    }
    /**
     * 更新运营号操作记录
     * @summary 更新运营号操作记录
     * @param pBIMActionDto 参数
     */
    public imProfileUpdateActionPost(pBIMActionDto: PBIMActionDto): Promise<{ response: http.ClientResponse, body: InlineResponse2002 }> {
        const localVarPath = this.basePath + '/im/profile/updateAction'
        let localVarQueryParameters: any = {}
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders)
        let localVarFormParams: any = {}

        // verify required parameter 'pBIMActionDto' is not null or undefined
        if (pBIMActionDto === null || pBIMActionDto === undefined) {
            throw new Error('Required parameter pBIMActionDto was null or undefined when calling imProfileUpdateActionPost.')
        }


        let localVarUseFormData = false

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(pBIMActionDto, "PBIMActionDto")
        }

        this.authentications.default.applyToRequest(localVarRequestOptions)

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams
            } else {
                localVarRequestOptions.form = localVarFormParams
            }
        }
        return new Promise<{ response: http.ClientResponse, body: InlineResponse2002 }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error)
                } else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse2002")
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body })
                    } else {
                        reject({ response: response, body: body })
                    }
                }
            })
        })
    }
    /**
     * 更新运营配置信息
     * @summary 更新运营配置信息
     * @param pBIMControlDto 参数
     */
    public imProfileUpdateControlPost(pBIMControlDto: PBIMControlDto): Promise<{ response: http.ClientResponse, body: InlineResponse2002 }> {
        const localVarPath = this.basePath + '/im/profile/updateControl'
        let localVarQueryParameters: any = {}
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders)
        let localVarFormParams: any = {}

        // verify required parameter 'pBIMControlDto' is not null or undefined
        if (pBIMControlDto === null || pBIMControlDto === undefined) {
            throw new Error('Required parameter pBIMControlDto was null or undefined when calling imProfileUpdateControlPost.')
        }


        let localVarUseFormData = false

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(pBIMControlDto, "PBIMControlDto")
        }

        this.authentications.default.applyToRequest(localVarRequestOptions)

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams
            } else {
                localVarRequestOptions.form = localVarFormParams
            }
        }
        return new Promise<{ response: http.ClientResponse, body: InlineResponse2002 }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error)
                } else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse2002")
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body })
                    } else {
                        reject({ response: response, body: body })
                    }
                }
            })
        })
    }
    /**
     * 更新运营号扩展信息
     * @summary 更新运营号扩展信息
     * @param pBIMUpdateProfileExtraReq 参数
     */
    public imProfileUpdateExtraPost(pBIMUpdateProfileExtraReq: PBIMUpdateProfileExtraReq): Promise<{ response: http.ClientResponse, body: InlineResponse2002 }> {
        const localVarPath = this.basePath + '/im/profile/updateExtra'
        let localVarQueryParameters: any = {}
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders)
        let localVarFormParams: any = {}

        // verify required parameter 'pBIMUpdateProfileExtraReq' is not null or undefined
        if (pBIMUpdateProfileExtraReq === null || pBIMUpdateProfileExtraReq === undefined) {
            throw new Error('Required parameter pBIMUpdateProfileExtraReq was null or undefined when calling imProfileUpdateExtraPost.')
        }


        let localVarUseFormData = false

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(pBIMUpdateProfileExtraReq, "PBIMUpdateProfileExtraReq")
        }

        this.authentications.default.applyToRequest(localVarRequestOptions)

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams
            } else {
                localVarRequestOptions.form = localVarFormParams
            }
        }
        return new Promise<{ response: http.ClientResponse, body: InlineResponse2002 }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error)
                } else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse2002")
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body })
                    } else {
                        reject({ response: response, body: body })
                    }
                }
            })
        })
    }
    /**
     * 更新运营号信息
     * @summary 更新运营号信息
     * @param pBIMProfileDto 参数
     */
    public imProfileUpdatePost(pBIMProfileDto: PBIMProfileDto): Promise<{ response: http.ClientResponse, body: InlineResponse2002 }> {
        const localVarPath = this.basePath + '/im/profile/update'
        let localVarQueryParameters: any = {}
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders)
        let localVarFormParams: any = {}

        // verify required parameter 'pBIMProfileDto' is not null or undefined
        if (pBIMProfileDto === null || pBIMProfileDto === undefined) {
            throw new Error('Required parameter pBIMProfileDto was null or undefined when calling imProfileUpdatePost.')
        }


        let localVarUseFormData = false

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(pBIMProfileDto, "PBIMProfileDto")
        }

        this.authentications.default.applyToRequest(localVarRequestOptions)

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams
            } else {
                localVarRequestOptions.form = localVarFormParams
            }
        }
        return new Promise<{ response: http.ClientResponse, body: InlineResponse2002 }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error)
                } else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse2002")
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body })
                    } else {
                        reject({ response: response, body: body })
                    }
                }
            })
        })
    }
}
export enum RelationApiApiKeys {
}

export class RelationApi {
    protected _basePath = defaultBasePath
    protected defaultHeaders: any = {}
    protected _useQuerystring: boolean = false

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
    }

    constructor(basePath?: string)
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value
    }

    set basePath(basePath: string) {
        this._basePath = basePath
    }

    get basePath() {
        return this._basePath
    }

    public setDefaultAuthentication(auth: Authentication) {
        this.authentications.default = auth
    }

    public setApiKey(key: RelationApiApiKeys, value: string) {
        (this.authentications as any)[RelationApiApiKeys[key]].apiKey = value
    }
    /**
     * 创建联系人关系信息
     * @summary 创建联系人关系信息
     * @param pBIMRelationDto 参数
     */
    public imRelationCreatePost(pBIMRelationDto: RelationCreate): Promise<{ response: http.ClientResponse, body: InlineResponse2002 }> {
        const localVarPath = this.basePath + '/im/relation/create'
        let localVarQueryParameters: any = {}
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders)
        let localVarFormParams: any = {}

        // verify required parameter 'pBIMRelationDto' is not null or undefined
        if (pBIMRelationDto === null || pBIMRelationDto === undefined) {
            throw new Error('Required parameter pBIMRelationDto was null or undefined when calling imRelationCreatePost.')
        }


        let localVarUseFormData = false

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(pBIMRelationDto, "RelationCreate")
        }

        this.authentications.default.applyToRequest(localVarRequestOptions)

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams
            } else {
                localVarRequestOptions.form = localVarFormParams
            }
        }
        return new Promise<{ response: http.ClientResponse, body: InlineResponse2002 }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error)
                } else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse2002")
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body })
                    } else {
                        reject({ response: response, body: body })
                    }
                }
            })
        })
    }
    /**
     * 删除联系人关系信息
     * @summary 删除联系人关系信息
     * @param pBIMRelationDto 参数
     */
    public imRelationDeletePost(pBIMRelationDto: PBIMRelationDto): Promise<{ response: http.ClientResponse, body: InlineResponse2002 }> {
        const localVarPath = this.basePath + '/im/relation/delete'
        let localVarQueryParameters: any = {}
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders)
        let localVarFormParams: any = {}

        // verify required parameter 'pBIMRelationDto' is not null or undefined
        if (pBIMRelationDto === null || pBIMRelationDto === undefined) {
            throw new Error('Required parameter pBIMRelationDto was null or undefined when calling imRelationDeletePost.')
        }


        let localVarUseFormData = false

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(pBIMRelationDto, "PBIMRelationDto")
        }

        this.authentications.default.applyToRequest(localVarRequestOptions)

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams
            } else {
                localVarRequestOptions.form = localVarFormParams
            }
        }
        return new Promise<{ response: http.ClientResponse, body: InlineResponse2002 }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error)
                } else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse2002")
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body })
                    } else {
                        reject({ response: response, body: body })
                    }
                }
            })
        })
    }
    /**
     * 拉取运营号关系列表
     * @summary 拉取运营号关系列表
     * @param serviceID 服务ID
     * @param profilePlatformUid 运营号平台Uid
     * @param profileCustomID 运营号自定义ID
     * @param status 关系状态 1 运营号请求, 2 联系人请求, 3 通过好友, 4 删除好友
     * @param startAt 起始时间戳
     * @param offset 偏移量
     * @param direction 查询方向 &gt&#x3D0 升序； &lt0 降序
     * @param limit 每页条数限制
     */
    public imRelationListGet(serviceID?: number, profilePlatformUid?: string, profileCustomID?: string, status?: number, startAt?: number, offset?: number, direction?: number, limit?: number): Promise<{ response: http.ClientResponse, body: InlineResponse2009 }> {
        const localVarPath = this.basePath + '/im/relation/list'
        let localVarQueryParameters: any = {}
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders)
        let localVarFormParams: any = {}

        if (serviceID !== undefined) {
            localVarQueryParameters['serviceID'] = ObjectSerializer.serialize(serviceID, "number")
        }

        if (profilePlatformUid !== undefined) {
            localVarQueryParameters['profilePlatformUid'] = ObjectSerializer.serialize(profilePlatformUid, "string")
        }

        if (profileCustomID !== undefined) {
            localVarQueryParameters['profileCustomID'] = ObjectSerializer.serialize(profileCustomID, "string")
        }

        if (status !== undefined) {
            localVarQueryParameters['status'] = ObjectSerializer.serialize(status, "number")
        }

        if (startAt !== undefined) {
            localVarQueryParameters['startAt'] = ObjectSerializer.serialize(startAt, "number")
        }

        if (offset !== undefined) {
            localVarQueryParameters['offset'] = ObjectSerializer.serialize(offset, "number")
        }

        if (direction !== undefined) {
            localVarQueryParameters['direction'] = ObjectSerializer.serialize(direction, "number")
        }

        if (limit !== undefined) {
            localVarQueryParameters['limit'] = ObjectSerializer.serialize(limit, "number")
        }


        let localVarUseFormData = false

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        }

        this.authentications.default.applyToRequest(localVarRequestOptions)

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams
            } else {
                localVarRequestOptions.form = localVarFormParams
            }
        }
        return new Promise<{ response: http.ClientResponse, body: InlineResponse2009 }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error)
                } else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse2009")
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body })
                    } else {
                        reject({ response: response, body: body })
                    }
                }
            })
        })
    }
    /**
     * 共同好友分页查询
     * @summary 共同好友分页查询
     * @param serviceID 服务ID
     * @param platformUid 联系人平台Uid
     * @param customID 联系人自定义ID
     * @param pageNo 页码
     * @param pageSize 每页条数限制
     */
    public imRelationPageDupContactGet(serviceID?: number, platformUid?: string, customID?: string, pageNo?: number, pageSize?: number): Promise<{ response: http.ClientResponse, body: InlineResponse20011 }> {
        const localVarPath = this.basePath + '/im/relation/pageDupContact'
        let localVarQueryParameters: any = {}
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders)
        let localVarFormParams: any = {}

        if (serviceID !== undefined) {
            localVarQueryParameters['serviceID'] = ObjectSerializer.serialize(serviceID, "number")
        }

        if (platformUid !== undefined) {
            localVarQueryParameters['platformUid'] = ObjectSerializer.serialize(platformUid, "string")
        }

        if (customID !== undefined) {
            localVarQueryParameters['customID'] = ObjectSerializer.serialize(customID, "string")
        }

        if (pageNo !== undefined) {
            localVarQueryParameters['pageNo'] = ObjectSerializer.serialize(pageNo, "number")
        }

        if (pageSize !== undefined) {
            localVarQueryParameters['pageSize'] = ObjectSerializer.serialize(pageSize, "number")
        }


        let localVarUseFormData = false

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        }

        this.authentications.default.applyToRequest(localVarRequestOptions)

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams
            } else {
                localVarRequestOptions.form = localVarFormParams
            }
        }
        return new Promise<{ response: http.ClientResponse, body: InlineResponse20011 }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error)
                } else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse20011")
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body })
                    } else {
                        reject({ response: response, body: body })
                    }
                }
            })
        })
    }
    /**
     * 联系人共同好友统计查询
     * @summary 联系人共同好友统计查询
     * @param serviceID 服务ID
     * @param platformUid 联系人平台Uid
     * @param pageNo 页码
     * @param pageSize 每页条数限制
     * @param direction 查询方向 &gt&#x3D0 升序； &lt0 降序
     */
    public imRelationPageDupFriendsGet(serviceID?: number, platformUid?: string, pageNo?: number, pageSize?: number, direction?: number): Promise<{ response: http.ClientResponse, body: InlineResponse20010 }> {
        const localVarPath = this.basePath + '/im/relation/pageDupFriends'
        let localVarQueryParameters: any = {}
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders)
        let localVarFormParams: any = {}

        if (serviceID !== undefined) {
            localVarQueryParameters['serviceID'] = ObjectSerializer.serialize(serviceID, "number")
        }

        if (platformUid !== undefined) {
            localVarQueryParameters['platformUid'] = ObjectSerializer.serialize(platformUid, "string")
        }

        if (pageNo !== undefined) {
            localVarQueryParameters['pageNo'] = ObjectSerializer.serialize(pageNo, "number")
        }

        if (pageSize !== undefined) {
            localVarQueryParameters['pageSize'] = ObjectSerializer.serialize(pageSize, "number")
        }

        if (direction !== undefined) {
            localVarQueryParameters['direction'] = ObjectSerializer.serialize(direction, "number")
        }


        let localVarUseFormData = false

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        }

        this.authentications.default.applyToRequest(localVarRequestOptions)

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams
            } else {
                localVarRequestOptions.form = localVarFormParams
            }
        }
        return new Promise<{ response: http.ClientResponse, body: InlineResponse20010 }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error)
                } else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse20010")
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body })
                    } else {
                        reject({ response: response, body: body })
                    }
                }
            })
        })
    }
    /**
     * 分页获取关系信息
     * @summary 分页获取关系信息
     * @param serviceID 服务ID
     * @param profilePlatformUid 运营号平台Uid
     * @param profileCustomID 运营号自定义ID
     * @param status 关系状态 1 运营号请求, 2 联系人请求, 3 通过好友, 4 删除好友
     * @param startAt 起始时间戳
     * @param pageNo 页码
     * @param pageSize 每页条数限制
     * @param direction 查询方向 &gt&#x3D0 升序； &lt0 降序
     */
    public imRelationPageGet(serviceID?: number, profilePlatformUid?: string, profileCustomID?: string, status?: number, startAt?: number, pageNo?: number, pageSize?: number, direction?: number): Promise<{ response: http.ClientResponse, body: InlineResponse2008 }> {
        const localVarPath = this.basePath + '/im/relation/page'
        let localVarQueryParameters: any = {}
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders)
        let localVarFormParams: any = {}

        if (serviceID !== undefined) {
            localVarQueryParameters['serviceID'] = ObjectSerializer.serialize(serviceID, "number")
        }

        if (profilePlatformUid !== undefined) {
            localVarQueryParameters['profilePlatformUid'] = ObjectSerializer.serialize(profilePlatformUid, "string")
        }

        if (profileCustomID !== undefined) {
            localVarQueryParameters['profileCustomID'] = ObjectSerializer.serialize(profileCustomID, "string")
        }

        if (status !== undefined) {
            localVarQueryParameters['status'] = ObjectSerializer.serialize(status, "number")
        }

        if (startAt !== undefined) {
            localVarQueryParameters['startAt'] = ObjectSerializer.serialize(startAt, "number")
        }

        if (pageNo !== undefined) {
            localVarQueryParameters['pageNo'] = ObjectSerializer.serialize(pageNo, "number")
        }

        if (pageSize !== undefined) {
            localVarQueryParameters['pageSize'] = ObjectSerializer.serialize(pageSize, "number")
        }

        if (direction !== undefined) {
            localVarQueryParameters['direction'] = ObjectSerializer.serialize(direction, "number")
        }


        let localVarUseFormData = false

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        }

        this.authentications.default.applyToRequest(localVarRequestOptions)

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams
            } else {
                localVarRequestOptions.form = localVarFormParams
            }
        }
        return new Promise<{ response: http.ClientResponse, body: InlineResponse2008 }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error)
                } else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse2008")
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body })
                    } else {
                        reject({ response: response, body: body })
                    }
                }
            })
        })
    }
    /**
     * 检索关系信息
     * @summary 检索关系信息
     * @param serviceID 服务ID
     * @param profileCustomID 运营号自定义ID
     * @param customID 联系人自定义ID
     */
    public imRelationRetrieveByCustomIDGet(serviceID?: number, profileCustomID?: string, customID?: string): Promise<{ response: http.ClientResponse, body: InlineResponse2007 }> {
        const localVarPath = this.basePath + '/im/relation/retrieveByCustomID'
        let localVarQueryParameters: any = {}
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders)
        let localVarFormParams: any = {}

        if (serviceID !== undefined) {
            localVarQueryParameters['serviceID'] = ObjectSerializer.serialize(serviceID, "number")
        }

        if (profileCustomID !== undefined) {
            localVarQueryParameters['profileCustomID'] = ObjectSerializer.serialize(profileCustomID, "string")
        }

        if (customID !== undefined) {
            localVarQueryParameters['customID'] = ObjectSerializer.serialize(customID, "string")
        }


        let localVarUseFormData = false

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        }

        this.authentications.default.applyToRequest(localVarRequestOptions)

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams
            } else {
                localVarRequestOptions.form = localVarFormParams
            }
        }
        return new Promise<{ response: http.ClientResponse, body: InlineResponse2007 }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error)
                } else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse2007")
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body })
                    } else {
                        reject({ response: response, body: body })
                    }
                }
            })
        })
    }
    /**
     * 检索关系信息
     * @summary 检索关系信息
     * @param serviceID 服务ID
     * @param profilePlatformUid 运营号平台Uid
     * @param platformUid 联系人平台Uid
     */
    public imRelationRetrieveByPlatformUidGet(serviceID?: number, profilePlatformUid?: string, platformUid?: string): Promise<{ response: http.ClientResponse, body: InlineResponse2007 }> {
        const localVarPath = this.basePath + '/im/relation/retrieveByPlatformUid'
        let localVarQueryParameters: any = {}
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders)
        let localVarFormParams: any = {}

        if (serviceID !== undefined) {
            localVarQueryParameters['serviceID'] = ObjectSerializer.serialize(serviceID, "number")
        }

        if (profilePlatformUid !== undefined) {
            localVarQueryParameters['profilePlatformUid'] = ObjectSerializer.serialize(profilePlatformUid, "string")
        }

        if (platformUid !== undefined) {
            localVarQueryParameters['platformUid'] = ObjectSerializer.serialize(platformUid, "string")
        }


        let localVarUseFormData = false

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        }

        this.authentications.default.applyToRequest(localVarRequestOptions)

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams
            } else {
                localVarRequestOptions.form = localVarFormParams
            }
        }
        return new Promise<{ response: http.ClientResponse, body: InlineResponse2007 }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error)
                } else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse2007")
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body })
                    } else {
                        reject({ response: response, body: body })
                    }
                }
            })
        })
    }
    /**
     * 检索关系信息
     * @summary 检索关系信息
     * @param id ID
     */
    public imRelationRetrieveGet(id?: number): Promise<{ response: http.ClientResponse, body: InlineResponse2007 }> {
        const localVarPath = this.basePath + '/im/relation/retrieve'
        let localVarQueryParameters: any = {}
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders)
        let localVarFormParams: any = {}

        if (id !== undefined) {
            localVarQueryParameters['id'] = ObjectSerializer.serialize(id, "number")
        }


        let localVarUseFormData = false

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        }

        this.authentications.default.applyToRequest(localVarRequestOptions)

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams
            } else {
                localVarRequestOptions.form = localVarFormParams
            }
        }
        return new Promise<{ response: http.ClientResponse, body: InlineResponse2007 }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error)
                } else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse2007")
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body })
                    } else {
                        reject({ response: response, body: body })
                    }
                }
            })
        })
    }
    /**
     * 更新联系人关系信息
     * @summary 更新联系人关系信息
     * @param pBIMRelationDto 参数
     */
    public imRelationUpdatePost(pBIMRelationDto: PBIMRelationDto): Promise<{ response: http.ClientResponse, body: InlineResponse2002 }> {
        const localVarPath = this.basePath + '/im/relation/update'
        let localVarQueryParameters: any = {}
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders)
        let localVarFormParams: any = {}

        // verify required parameter 'pBIMRelationDto' is not null or undefined
        if (pBIMRelationDto === null || pBIMRelationDto === undefined) {
            throw new Error('Required parameter pBIMRelationDto was null or undefined when calling imRelationUpdatePost.')
        }


        let localVarUseFormData = false

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(pBIMRelationDto, "PBIMRelationDto")
        }

        this.authentications.default.applyToRequest(localVarRequestOptions)

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams
            } else {
                localVarRequestOptions.form = localVarFormParams
            }
        }
        return new Promise<{ response: http.ClientResponse, body: InlineResponse2002 }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error)
                } else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse2002")
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body })
                    } else {
                        reject({ response: response, body: body })
                    }
                }
            })
        })
    }
}
export enum SystemApiApiKeys {
}

export class SystemApi {
    protected _basePath = defaultBasePath
    protected defaultHeaders: any = {}
    protected _useQuerystring: boolean = false

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
    }

    constructor(basePath?: string)
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value
    }

    set basePath(basePath: string) {
        this._basePath = basePath
    }

    get basePath() {
        return this._basePath
    }

    public setDefaultAuthentication(auth: Authentication) {
        this.authentications.default = auth
    }

    public setApiKey(key: SystemApiApiKeys, value: string) {
        (this.authentications as any)[SystemApiApiKeys[key]].apiKey = value
    }
    /**
     * 添加系统配置
     * @summary 添加系统配置
     * @param pBIMSystemCreate 参数
     */
    public imSystemCreatePost(pBIMSystemCreate: SystemCreate): Promise<{ response: http.ClientResponse, body: InlineResponse2002 }> {
        const localVarPath = this.basePath + '/im/system/create'
        let localVarQueryParameters: any = {}
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders)
        let localVarFormParams: any = {}

        // verify required parameter 'pBIMSystemCreate' is not null or undefined
        if (pBIMSystemCreate === null || pBIMSystemCreate === undefined) {
            throw new Error('Required parameter pBIMSystemCreate was null or undefined when calling imSystemCreatePost.')
        }


        let localVarUseFormData = false

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(pBIMSystemCreate, "SystemCreate")
        }

        this.authentications.default.applyToRequest(localVarRequestOptions)

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams
            } else {
                localVarRequestOptions.form = localVarFormParams
            }
        }
        return new Promise<{ response: http.ClientResponse, body: InlineResponse2002 }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error)
                } else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse2002")
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body })
                    } else {
                        reject({ response: response, body: body })
                    }
                }
            })
        })
    }
    /**
     * 删除系统配置
     * @summary 删除系统配置
     * @param pBIMSystemDto 参数
     */
    public imSystemDeletePost(pBIMSystemDto: PBIMSystemDto): Promise<{ response: http.ClientResponse, body: InlineResponse2002 }> {
        const localVarPath = this.basePath + '/im/system/delete'
        let localVarQueryParameters: any = {}
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders)
        let localVarFormParams: any = {}

        // verify required parameter 'pBIMSystemDto' is not null or undefined
        if (pBIMSystemDto === null || pBIMSystemDto === undefined) {
            throw new Error('Required parameter pBIMSystemDto was null or undefined when calling imSystemDeletePost.')
        }


        let localVarUseFormData = false

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(pBIMSystemDto, "PBIMSystemDto")
        }

        this.authentications.default.applyToRequest(localVarRequestOptions)

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams
            } else {
                localVarRequestOptions.form = localVarFormParams
            }
        }
        return new Promise<{ response: http.ClientResponse, body: InlineResponse2002 }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error)
                } else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse2002")
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body })
                    } else {
                        reject({ response: response, body: body })
                    }
                }
            })
        })
    }
    /**
     * 检索运营号信息
     * @summary 检索运营号信息
     * @param id ID
     * @param serviceID 服务ID
     * @param types 系统配置类型
     */
    public imSystemRetrieveGet(id?: number, serviceID?: number, types?: Array<string>): Promise<{ response: http.ClientResponse, body: InlineResponse200 }> {
        const localVarPath = this.basePath + '/im/system/retrieve'
        let localVarQueryParameters: any = {}
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders)
        let localVarFormParams: any = {}

        if (id !== undefined) {
            localVarQueryParameters['id'] = ObjectSerializer.serialize(id, "number")
        }

        if (serviceID !== undefined) {
            localVarQueryParameters['serviceID'] = ObjectSerializer.serialize(serviceID, "number")
        }

        if (types !== undefined) {
            localVarQueryParameters['types'] = ObjectSerializer.serialize(types, "Array<string>")
        }


        let localVarUseFormData = false

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        }

        this.authentications.default.applyToRequest(localVarRequestOptions)

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams
            } else {
                localVarRequestOptions.form = localVarFormParams
            }
        }
        return new Promise<{ response: http.ClientResponse, body: InlineResponse200 }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error)
                } else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse200")
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body })
                    } else {
                        reject({ response: response, body: body })
                    }
                }
            })
        })
    }
    /**
     * 更新系统配置
     * @summary 更新系统配置
     * @param pBIMSystemDto 参数
     */
    public imSystemUpdatePost(pBIMSystemDto: PBIMSystemDto): Promise<{ response: http.ClientResponse, body: InlineResponse2002 }> {
        const localVarPath = this.basePath + '/im/system/update'
        let localVarQueryParameters: any = {}
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders)
        let localVarFormParams: any = {}

        // verify required parameter 'pBIMSystemDto' is not null or undefined
        if (pBIMSystemDto === null || pBIMSystemDto === undefined) {
            throw new Error('Required parameter pBIMSystemDto was null or undefined when calling imSystemUpdatePost.')
        }


        let localVarUseFormData = false

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(pBIMSystemDto, "PBIMSystemDto")
        }

        this.authentications.default.applyToRequest(localVarRequestOptions)

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams
            } else {
                localVarRequestOptions.form = localVarFormParams
            }
        }
        return new Promise<{ response: http.ClientResponse, body: InlineResponse2002 }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error)
                } else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse2002")
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body })
                    } else {
                        reject({ response: response, body: body })
                    }
                }
            })
        })
    }
}
export enum TimelineApiApiKeys {
}

export class TimelineApi {
    protected _basePath = defaultBasePath
    protected defaultHeaders: any = {}
    protected _useQuerystring: boolean = false

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
    }

    constructor(basePath?: string)
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value
    }

    set basePath(basePath: string) {
        this._basePath = basePath
    }

    get basePath() {
        return this._basePath
    }

    public setDefaultAuthentication(auth: Authentication) {
        this.authentications.default = auth
    }

    public setApiKey(key: TimelineApiApiKeys, value: string) {
        (this.authentications as any)[TimelineApiApiKeys[key]].apiKey = value
    }
    /**
     * 添加timeline(朋友圈)信息
     * @summary 添加timeline(朋友圈)信息
     * @param pBIMTimelineDto 参数
     */
    public imTimelineCreatePost(pBIMTimelineDto: TimelineCreate): Promise<{ response: http.ClientResponse, body: InlineResponse2002 }> {
        const localVarPath = this.basePath + '/im/timeline/create'
        let localVarQueryParameters: any = {}
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders)
        let localVarFormParams: any = {}

        // verify required parameter 'pBIMTimelineDto' is not null or undefined
        if (pBIMTimelineDto === null || pBIMTimelineDto === undefined) {
            throw new Error('Required parameter pBIMTimelineDto was null or undefined when calling imTimelineCreatePost.')
        }


        let localVarUseFormData = false

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(pBIMTimelineDto, "TimelineCreate")
        }

        this.authentications.default.applyToRequest(localVarRequestOptions)

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams
            } else {
                localVarRequestOptions.form = localVarFormParams
            }
        }
        return new Promise<{ response: http.ClientResponse, body: InlineResponse2002 }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error)
                } else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse2002")
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body })
                    } else {
                        reject({ response: response, body: body })
                    }
                }
            })
        })
    }
    /**
     * 删除timeline信息
     * @summary 删除timeline信息
     * @param pBIMTimelineDto 参数
     */
    public imTimelineDeletePost(pBIMTimelineDto: PBIMTimelineDto): Promise<{ response: http.ClientResponse, body: InlineResponse2002 }> {
        const localVarPath = this.basePath + '/im/timeline/delete'
        let localVarQueryParameters: any = {}
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders)
        let localVarFormParams: any = {}

        // verify required parameter 'pBIMTimelineDto' is not null or undefined
        if (pBIMTimelineDto === null || pBIMTimelineDto === undefined) {
            throw new Error('Required parameter pBIMTimelineDto was null or undefined when calling imTimelineDeletePost.')
        }


        let localVarUseFormData = false

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(pBIMTimelineDto, "PBIMTimelineDto")
        }

        this.authentications.default.applyToRequest(localVarRequestOptions)

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams
            } else {
                localVarRequestOptions.form = localVarFormParams
            }
        }
        return new Promise<{ response: http.ClientResponse, body: InlineResponse2002 }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error)
                } else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse2002")
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body })
                    } else {
                        reject({ response: response, body: body })
                    }
                }
            })
        })
    }
    /**
     * 拉取timeline信息
     * @summary 拉取timeline信息
     * @param serviceID 服务ID
     * @param profilePlatformUid 运营号平台Uid
     * @param platformUid 联系人平台Uid
     * @param startAt 起始时间戳
     * @param offset 偏移量
     * @param direction 查询方向 &gt&#x3D0 升序； &lt0 降序
     * @param limit 每页条数限制
     */
    public imTimelineListGet(serviceID?: number, profilePlatformUid?: string, platformUid?: string, startAt?: number, offset?: number, direction?: number, limit?: number): Promise<{ response: http.ClientResponse, body: InlineResponse20036 }> {
        const localVarPath = this.basePath + '/im/timeline/list'
        let localVarQueryParameters: any = {}
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders)
        let localVarFormParams: any = {}

        if (serviceID !== undefined) {
            localVarQueryParameters['serviceID'] = ObjectSerializer.serialize(serviceID, "number")
        }

        if (profilePlatformUid !== undefined) {
            localVarQueryParameters['profilePlatformUid'] = ObjectSerializer.serialize(profilePlatformUid, "string")
        }

        if (platformUid !== undefined) {
            localVarQueryParameters['platformUid'] = ObjectSerializer.serialize(platformUid, "string")
        }

        if (startAt !== undefined) {
            localVarQueryParameters['startAt'] = ObjectSerializer.serialize(startAt, "number")
        }

        if (offset !== undefined) {
            localVarQueryParameters['offset'] = ObjectSerializer.serialize(offset, "number")
        }

        if (direction !== undefined) {
            localVarQueryParameters['direction'] = ObjectSerializer.serialize(direction, "number")
        }

        if (limit !== undefined) {
            localVarQueryParameters['limit'] = ObjectSerializer.serialize(limit, "number")
        }


        let localVarUseFormData = false

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        }

        this.authentications.default.applyToRequest(localVarRequestOptions)

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams
            } else {
                localVarRequestOptions.form = localVarFormParams
            }
        }
        return new Promise<{ response: http.ClientResponse, body: InlineResponse20036 }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error)
                } else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse20036")
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body })
                    } else {
                        reject({ response: response, body: body })
                    }
                }
            })
        })
    }
    /**
     * 分页获取timeline信息
     * @summary 分页获取timeline信息
     * @param serviceID 服务ID
     * @param profilePlatformUid 运营号平台Uid
     * @param platformUid 联系人平台Uid
     * @param startAt 起始时间戳
     * @param pageNo 页码
     * @param pageSize 每页条数限制
     * @param direction 查询方向 &gt&#x3D0 升序； &lt0 降序
     */
    public imTimelinePageGet(serviceID?: number, profilePlatformUid?: string, platformUid?: string, startAt?: number, pageNo?: number, pageSize?: number, direction?: number): Promise<{ response: http.ClientResponse, body: InlineResponse20035 }> {
        const localVarPath = this.basePath + '/im/timeline/page'
        let localVarQueryParameters: any = {}
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders)
        let localVarFormParams: any = {}

        if (serviceID !== undefined) {
            localVarQueryParameters['serviceID'] = ObjectSerializer.serialize(serviceID, "number")
        }

        if (profilePlatformUid !== undefined) {
            localVarQueryParameters['profilePlatformUid'] = ObjectSerializer.serialize(profilePlatformUid, "string")
        }

        if (platformUid !== undefined) {
            localVarQueryParameters['platformUid'] = ObjectSerializer.serialize(platformUid, "string")
        }

        if (startAt !== undefined) {
            localVarQueryParameters['startAt'] = ObjectSerializer.serialize(startAt, "number")
        }

        if (pageNo !== undefined) {
            localVarQueryParameters['pageNo'] = ObjectSerializer.serialize(pageNo, "number")
        }

        if (pageSize !== undefined) {
            localVarQueryParameters['pageSize'] = ObjectSerializer.serialize(pageSize, "number")
        }

        if (direction !== undefined) {
            localVarQueryParameters['direction'] = ObjectSerializer.serialize(direction, "number")
        }


        let localVarUseFormData = false

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        }

        this.authentications.default.applyToRequest(localVarRequestOptions)

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams
            } else {
                localVarRequestOptions.form = localVarFormParams
            }
        }
        return new Promise<{ response: http.ClientResponse, body: InlineResponse20035 }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error)
                } else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse20035")
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body })
                    } else {
                        reject({ response: response, body: body })
                    }
                }
            })
        })
    }
    /**
     * 检索timeline信息
     * @summary 检索timeline信息
     * @param id Timeline ID
     */
    public imTimelineRetrieveGet(id?: number): Promise<{ response: http.ClientResponse, body: InlineResponse20034 }> {
        const localVarPath = this.basePath + '/im/timeline/retrieve'
        let localVarQueryParameters: any = {}
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders)
        let localVarFormParams: any = {}

        if (id !== undefined) {
            localVarQueryParameters['id'] = ObjectSerializer.serialize(id, "number")
        }


        let localVarUseFormData = false

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        }

        this.authentications.default.applyToRequest(localVarRequestOptions)

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams
            } else {
                localVarRequestOptions.form = localVarFormParams
            }
        }
        return new Promise<{ response: http.ClientResponse, body: InlineResponse20034 }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error)
                } else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse20034")
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body })
                    } else {
                        reject({ response: response, body: body })
                    }
                }
            })
        })
    }
    /**
     * 更新timeline信息
     * @summary 更新timeline信息
     * @param pBIMTimelineDto 参数
     */
    public imTimelineUpdatePost(pBIMTimelineDto: PBIMTimelineDto): Promise<{ response: http.ClientResponse, body: InlineResponse2002 }> {
        const localVarPath = this.basePath + '/im/timeline/update'
        let localVarQueryParameters: any = {}
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders)
        let localVarFormParams: any = {}

        // verify required parameter 'pBIMTimelineDto' is not null or undefined
        if (pBIMTimelineDto === null || pBIMTimelineDto === undefined) {
            throw new Error('Required parameter pBIMTimelineDto was null or undefined when calling imTimelineUpdatePost.')
        }


        let localVarUseFormData = false

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(pBIMTimelineDto, "PBIMTimelineDto")
        }

        this.authentications.default.applyToRequest(localVarRequestOptions)

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams
            } else {
                localVarRequestOptions.form = localVarFormParams
            }
        }
        return new Promise<{ response: http.ClientResponse, body: InlineResponse2002 }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error)
                } else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse2002")
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body })
                    } else {
                        reject({ response: response, body: body })
                    }
                }
            })
        })
    }
}
